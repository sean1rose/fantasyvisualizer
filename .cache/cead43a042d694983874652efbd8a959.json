{"dependencies":[{"name":"react","loc":{"line":11,"column":21}}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\nexports.getOffset = getOffset;\nexports.traverseTreeNodes = traverseTreeNodes;\nexports.updateCheckState = updateCheckState;\nexports.getCheck = getCheck;\nexports.getStrictlyValue = getStrictlyValue;\nexports.isPositionPrefix = isPositionPrefix;\n\nvar _react = require('react');\n\nfunction getOffset(ele) {\n  if (!ele.getClientRects().length) {\n    return { top: 0, left: 0 };\n  }\n\n  var rect = ele.getBoundingClientRect();\n  if (rect.width || rect.height) {\n    var doc = ele.ownerDocument;\n    var win = doc.defaultView;\n    var docElem = doc.documentElement;\n\n    return {\n      top: rect.top + win.pageYOffset - docElem.clientTop,\n      left: rect.left + win.pageXOffset - docElem.clientLeft\n    };\n  }\n\n  return rect;\n} /* eslint no-loop-func: 0*/\nfunction traverseTreeNodes(treeNodes, callback) {\n  var traverse = function traverse(subTreeNodes, level, parentsChildrenPos, parentPos) {\n    if (Array.isArray(subTreeNodes)) {\n      subTreeNodes = subTreeNodes.filter(function (item) {\n        return !!item;\n      });\n    }\n    _react.Children.forEach(subTreeNodes, function (item, index) {\n      var pos = level + '-' + index;\n      parentsChildrenPos.push(pos); // Note: side effect\n\n      var childrenPos = [];\n      if (item.props.children && item.type && item.type.isTreeNode) {\n        traverse(item.props.children, pos, childrenPos, pos);\n      }\n      callback(item, index, pos, item.key || pos, childrenPos, parentPos);\n    });\n  };\n  traverse(treeNodes, 0, []);\n}\n\nfunction updateCheckState(obj, checkedPosition, checkIt) {\n  var childrenLoop = function childrenLoop(parentObj) {\n    parentObj.childrenPos.forEach(function (childPos) {\n      var childObj = obj[childPos];\n      // User click don't change disabled item checked state\n      if (!childObj.disableCheckbox && !childObj.disabled) {\n        childObj.halfChecked = false;\n        childObj.checked = checkIt;\n      }\n      childrenLoop(childObj);\n    });\n  };\n\n  childrenLoop(obj[checkedPosition]);\n\n  var parentLoop = function parentLoop(childObj) {\n    if (!childObj.parentPos) return;\n    var parentObj = obj[childObj.parentPos];\n\n    var childrenCount = parentObj.childrenPos.length;\n\n    var checkedChildrenCount = 0;\n    parentObj.childrenPos.forEach(function (childPos) {\n      if (obj[childPos].disableCheckbox) {\n        childrenCount -= 1;\n        return;\n      }\n      if (obj[childPos].checked === true) checkedChildrenCount++;else if (obj[childPos].halfChecked === true) checkedChildrenCount += 0.5;\n    });\n\n    if (checkedChildrenCount === childrenCount) {\n      parentObj.checked = true;\n      parentObj.halfChecked = false;\n    } else if (checkedChildrenCount > 0) {\n      parentObj.halfChecked = true;\n      parentObj.checked = false;\n    } else {\n      parentObj.checked = false;\n      parentObj.halfChecked = false;\n    }\n    parentLoop(parentObj);\n  };\n\n  parentLoop(obj[checkedPosition]);\n}\n\nfunction getCheck(treeNodesStates) {\n  var halfCheckedKeys = [];\n  var checkedKeys = [];\n  var checkedNodes = [];\n  var checkedNodesPositions = [];\n  Object.keys(treeNodesStates).forEach(function (item) {\n    var itemObj = treeNodesStates[item];\n    if (itemObj.checked) {\n      checkedKeys.push(itemObj.key);\n      checkedNodes.push(itemObj.node);\n      checkedNodesPositions.push({ node: itemObj.node, pos: item });\n    } else if (itemObj.halfChecked) {\n      halfCheckedKeys.push(itemObj.key);\n    }\n  });\n  return {\n    halfCheckedKeys: halfCheckedKeys,\n    checkedKeys: checkedKeys,\n    checkedNodes: checkedNodes,\n    checkedNodesPositions: checkedNodesPositions\n  };\n}\n\nfunction getStrictlyValue(checkedKeys, halfChecked) {\n  if (halfChecked) {\n    return { checked: checkedKeys, halfChecked: halfChecked };\n  }\n  return checkedKeys;\n}\n\nfunction isPositionPrefix(smallPos, bigPos) {\n  if (bigPos.length < smallPos.length) {\n    return false;\n  }\n  // attention: \"0-0-1\" \"0-0-10\"\n  if (bigPos.length > smallPos.length && bigPos.charAt(smallPos.length) !== '-') {\n    return false;\n  }\n  return bigPos.substr(0, smallPos.length) === smallPos;\n}"},"hash":"c4357eb5bd5c37df57f240c87f463c2a"}