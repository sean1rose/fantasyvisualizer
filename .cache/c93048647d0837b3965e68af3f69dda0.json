{"dependencies":[{"name":"babel-runtime/helpers/classCallCheck","loc":{"line":5,"column":31}},{"name":"babel-runtime/helpers/possibleConstructorReturn","loc":{"line":9,"column":42}},{"name":"babel-runtime/helpers/inherits","loc":{"line":13,"column":25}},{"name":"babel-runtime/helpers/extends","loc":{"line":17,"column":24}},{"name":"babel-runtime/helpers/objectWithoutProperties","loc":{"line":21,"column":40}},{"name":"react","loc":{"line":25,"column":21}},{"name":"react-dom","loc":{"line":29,"column":24}},{"name":"rc-util/lib/KeyCode","loc":{"line":33,"column":23}},{"name":"classnames","loc":{"line":37,"column":26}},{"name":"object-assign","loc":{"line":41,"column":28}},{"name":"rc-animate","loc":{"line":45,"column":25}},{"name":"./util","loc":{"line":49,"column":20}},{"name":"./SelectTrigger","loc":{"line":51,"column":29}},{"name":"./TreeNode","loc":{"line":55,"column":25}},{"name":"./strategies","loc":{"line":59,"column":26}},{"name":"./PropTypes","loc":{"line":61,"column":25}}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');\n\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _KeyCode = require('rc-util/lib/KeyCode');\n\nvar _KeyCode2 = _interopRequireDefault(_KeyCode);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _objectAssign = require('object-assign');\n\nvar _objectAssign2 = _interopRequireDefault(_objectAssign);\n\nvar _rcAnimate = require('rc-animate');\n\nvar _rcAnimate2 = _interopRequireDefault(_rcAnimate);\n\nvar _util = require('./util');\n\nvar _SelectTrigger = require('./SelectTrigger');\n\nvar _SelectTrigger2 = _interopRequireDefault(_SelectTrigger);\n\nvar _TreeNode2 = require('./TreeNode');\n\nvar _TreeNode3 = _interopRequireDefault(_TreeNode2);\n\nvar _strategies = require('./strategies');\n\nvar _PropTypes = require('./PropTypes');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction noop() {}\n\nfunction filterFn(input, child) {\n  return String((0, _util.getPropValue)(child, (0, _util.labelCompatible)(this.props.treeNodeFilterProp))).indexOf(input) > -1;\n}\n\nfunction loopTreeData(data) {\n  var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var treeCheckable = arguments[2];\n\n  return data.map(function (item, index) {\n    var pos = level + '-' + index;\n    var label = item.label,\n        value = item.value,\n        disabled = item.disabled,\n        key = item.key,\n        hasOwnProperty = item.hasOwnProperty,\n        selectable = item.selectable,\n        children = item.children,\n        isLeaf = item.isLeaf,\n        otherProps = (0, _objectWithoutProperties3['default'])(item, ['label', 'value', 'disabled', 'key', 'hasOwnProperty', 'selectable', 'children', 'isLeaf']);\n\n    var props = (0, _extends3['default'])({\n      value: value,\n      title: label,\n      // value: value || String(key || label), // cause onChange callback error\n      key: key || value || pos,\n      disabled: disabled || false,\n      selectable: selectable === false ? selectable : !treeCheckable\n    }, otherProps);\n    var ret = void 0;\n    if (children && children.length) {\n      ret = _react2['default'].createElement(\n        _TreeNode3['default'],\n        props,\n        loopTreeData(children, pos, treeCheckable)\n      );\n    } else {\n      ret = _react2['default'].createElement(_TreeNode3['default'], (0, _extends3['default'])({}, props, { isLeaf: isLeaf }));\n    }\n    return ret;\n  });\n}\n\nvar Select = function (_Component) {\n  (0, _inherits3['default'])(Select, _Component);\n\n  function Select(props) {\n    (0, _classCallCheck3['default'])(this, Select);\n\n    var _this = (0, _possibleConstructorReturn3['default'])(this, _Component.call(this, props));\n\n    _initialiseProps.call(_this);\n\n    var value = [];\n    if ('value' in props) {\n      value = (0, _util.toArray)(props.value);\n    } else {\n      value = (0, _util.toArray)(props.defaultValue);\n    }\n    // save parsed treeData, for performance (treeData may be very big)\n    _this.renderedTreeData = _this.renderTreeData();\n    value = _this.addLabelToValue(props, value);\n    value = _this.getValue(props, value, props.inputValue ? '__strict' : true);\n    var inputValue = props.inputValue || '';\n    // if (props.combobox) {\n    //   inputValue = value.length ? String(value[0].value) : '';\n    // }\n    _this.state = {\n      value: value,\n      inputValue: inputValue,\n      open: props.open || props.defaultOpen,\n      focused: false\n    };\n    return _this;\n  }\n\n  Select.prototype.componentDidMount = function componentDidMount() {\n    var _props2 = this.props,\n        autoFocus = _props2.autoFocus,\n        disabled = _props2.disabled;\n\n    if ((0, _util.isMultipleOrTags)(this.props)) {\n      var inputNode = this.getInputDOMNode();\n      if (inputNode.value) {\n        inputNode.style.width = '';\n        inputNode.style.width = this.inputMirrorInstance.clientWidth + 'px';\n      } else {\n        inputNode.style.width = '';\n      }\n    }\n    if (autoFocus && !disabled) {\n      this.focus();\n    }\n  };\n\n  Select.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    // save parsed treeData, for performance (treeData may be very big)\n    this.renderedTreeData = this.renderTreeData(nextProps);\n    // Detecting whether the object of `onChange`'s argument  is old ref.\n    // Better to do a deep equal later.\n    this._cacheTreeNodesStates = this._cacheTreeNodesStates !== 'no' && this._savedValue && nextProps.value === this._savedValue;\n    if (this.props.treeData !== nextProps.treeData || this.props.children !== nextProps.children) {\n      // refresh this._treeNodesStates cache\n      this._treeNodesStates = (0, _util.getTreeNodesStates)(this.renderedTreeData || nextProps.children, this.state.value.map(function (item) {\n        return item.value;\n      }));\n    }\n    if ('value' in nextProps) {\n      var value = (0, _util.toArray)(nextProps.value);\n      value = this.addLabelToValue(nextProps, value);\n      value = this.getValue(nextProps, value);\n      this.setState({\n        value: value\n      });\n      // if (nextProps.combobox) {\n      //   this.setState({\n      //     inputValue: value.length ? String(value[0].key) : '',\n      //   });\n      // }\n    }\n    if (nextProps.inputValue !== this.props.inputValue) {\n      this.setState({\n        inputValue: nextProps.inputValue\n      });\n    }\n    if ('open' in nextProps) {\n      this.setState({\n        open: nextProps.open\n      });\n    }\n  };\n\n  Select.prototype.componentWillUpdate = function componentWillUpdate(nextProps) {\n    if (this._savedValue && nextProps.value && nextProps.value !== this._savedValue && nextProps.value === this.props.value) {\n      this._cacheTreeNodesStates = false;\n      this.getValue(nextProps, this.addLabelToValue(nextProps, (0, _util.toArray)(nextProps.value)));\n    }\n  };\n\n  Select.prototype.componentDidUpdate = function componentDidUpdate() {\n    var state = this.state;\n    var props = this.props;\n    if (state.open && (0, _util.isMultipleOrTags)(props)) {\n      var inputNode = this.getInputDOMNode();\n      if (inputNode.value) {\n        inputNode.style.width = '';\n        inputNode.style.width = this.inputMirrorInstance.clientWidth + 'px';\n      } else {\n        inputNode.style.width = '';\n      }\n    }\n  };\n\n  Select.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.clearDelayTimer();\n    if (this.dropdownContainer) {\n      _reactDom2['default'].unmountComponentAtNode(this.dropdownContainer);\n      document.body.removeChild(this.dropdownContainer);\n      this.dropdownContainer = null;\n    }\n  };\n\n  // combobox ignore\n\n\n  Select.prototype.getLabelFromNode = function getLabelFromNode(child) {\n    return (0, _util.getPropValue)(child, this.props.treeNodeLabelProp);\n  };\n\n  Select.prototype.getLabelFromProps = function getLabelFromProps(props, value) {\n    var _this2 = this;\n\n    if (value === undefined) {\n      return null;\n    }\n    var label = null;\n    (0, _util.loopAllChildren)(this.renderedTreeData || props.children, function (item) {\n      if ((0, _util.getValuePropValue)(item) === value) {\n        label = _this2.getLabelFromNode(item);\n      }\n    });\n    if (label === null) {\n      return value;\n    }\n    return label;\n  };\n\n  Select.prototype.getDropdownContainer = function getDropdownContainer() {\n    if (!this.dropdownContainer) {\n      this.dropdownContainer = document.createElement('div');\n      document.body.appendChild(this.dropdownContainer);\n    }\n    return this.dropdownContainer;\n  };\n\n  Select.prototype.getSearchPlaceholderElement = function getSearchPlaceholderElement(hidden) {\n    var props = this.props;\n    var placeholder = void 0;\n    if ((0, _util.isMultipleOrTagsOrCombobox)(props)) {\n      placeholder = props.placeholder || props.searchPlaceholder;\n    } else {\n      placeholder = props.searchPlaceholder;\n    }\n    if (placeholder) {\n      return _react2['default'].createElement(\n        'span',\n        {\n          style: { display: hidden ? 'none' : 'block' },\n          onClick: this.onPlaceholderClick,\n          className: props.prefixCls + '-search__field__placeholder'\n        },\n        placeholder\n      );\n    }\n    return null;\n  };\n\n  Select.prototype.getInputElement = function getInputElement() {\n    var inputValue = this.state.inputValue;\n    var _props3 = this.props,\n        prefixCls = _props3.prefixCls,\n        disabled = _props3.disabled;\n\n    return _react2['default'].createElement(\n      'span',\n      { className: prefixCls + '-search__field__wrap' },\n      _react2['default'].createElement('input', {\n        ref: (0, _util.saveRef)(this, 'inputInstance'),\n        onChange: this.onInputChange,\n        onKeyDown: this.onInputKeyDown,\n        value: inputValue,\n        disabled: disabled,\n        className: prefixCls + '-search__field',\n        role: 'textbox'\n      }),\n      _react2['default'].createElement(\n        'span',\n        {\n          ref: (0, _util.saveRef)(this, 'inputMirrorInstance'),\n          className: prefixCls + '-search__field__mirror'\n        },\n        inputValue,\n        '\\xA0'\n      ),\n      (0, _util.isMultipleOrTags)(this.props) ? null : this.getSearchPlaceholderElement(!!inputValue)\n    );\n  };\n\n  Select.prototype.getInputDOMNode = function getInputDOMNode() {\n    return this.inputInstance;\n  };\n\n  Select.prototype.getPopupDOMNode = function getPopupDOMNode() {\n    return this.trigger.getPopupDOMNode();\n  };\n\n  Select.prototype.getPopupComponentRefs = function getPopupComponentRefs() {\n    return this.trigger.getPopupEleRefs();\n  };\n\n  Select.prototype.getValue = function getValue(_props, val) {\n    var _this3 = this;\n\n    var init = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    var value = val;\n    // if inputValue existing, tree is checkStrictly\n    var _strict = init === '__strict' || init && (this.state && this.state.inputValue || this.props.inputValue !== _props.inputValue);\n    if (_props.treeCheckable && (_props.treeCheckStrictly || _strict)) {\n      this.halfCheckedValues = [];\n      value = [];\n      val.forEach(function (i) {\n        if (!i.halfChecked) {\n          value.push(i);\n        } else {\n          _this3.halfCheckedValues.push(i);\n        }\n      });\n    }\n    // if (!(_props.treeCheckable && !_props.treeCheckStrictly)) {\n    if (!!!_props.treeCheckable || _props.treeCheckable && (_props.treeCheckStrictly || _strict)) {\n      return value;\n    }\n    var checkedTreeNodes = void 0;\n    if (this._cachetreeData && this._cacheTreeNodesStates && this._checkedNodes && this.state && !this.state.inputValue) {\n      this.checkedTreeNodes = checkedTreeNodes = this._checkedNodes;\n    } else {\n      /**\n       * Note: `this._treeNodesStates`'s treeNodesStates must correspond to nodes of the\n       * final tree (`processTreeNode` function from SelectTrigger.jsx produce the final tree).\n       *\n       * And, `this._treeNodesStates` from `onSelect` is previous value,\n       * so it perhaps only have a few nodes, but the newly filtered tree can have many nodes,\n       * thus, you cannot use previous _treeNodesStates.\n       */\n      // getTreeNodesStates is not effective.\n      this._treeNodesStates = (0, _util.getTreeNodesStates)(this.renderedTreeData || _props.children, value.map(function (item) {\n        return item.value;\n      }));\n      this.checkedTreeNodes = checkedTreeNodes = this._treeNodesStates.checkedNodes;\n    }\n    var mapLabVal = function mapLabVal(arr) {\n      return arr.map(function (itemObj) {\n        return {\n          value: (0, _util.getValuePropValue)(itemObj.node),\n          label: (0, _util.getPropValue)(itemObj.node, _props.treeNodeLabelProp)\n        };\n      });\n    };\n    var props = this.props;\n    var checkedValues = [];\n    if (props.showCheckedStrategy === _strategies.SHOW_ALL) {\n      checkedValues = mapLabVal(checkedTreeNodes);\n    } else if (props.showCheckedStrategy === _strategies.SHOW_PARENT) {\n      var posArr = (0, _util.filterParentPosition)(checkedTreeNodes.map(function (itemObj) {\n        return itemObj.pos;\n      }));\n      checkedValues = mapLabVal(checkedTreeNodes.filter(function (itemObj) {\n        return posArr.indexOf(itemObj.pos) !== -1;\n      }));\n    } else {\n      checkedValues = mapLabVal(checkedTreeNodes.filter(function (itemObj) {\n        return !itemObj.node.props.children;\n      }));\n    }\n    return checkedValues;\n  };\n\n  Select.prototype.getCheckedNodes = function getCheckedNodes(info, props) {\n    // TODO treeCheckable does not support tags/dynamic\n    var checkedNodes = info.checkedNodes;\n    // if inputValue existing, tree is checkStrictly\n\n    if (props.treeCheckStrictly || this.state.inputValue) {\n      return checkedNodes;\n    }\n    var checkedNodesPositions = info.checkedNodesPositions;\n    if (props.showCheckedStrategy === _strategies.SHOW_ALL) {\n      checkedNodes = checkedNodes;\n    } else if (props.showCheckedStrategy === _strategies.SHOW_PARENT) {\n      var posArr = (0, _util.filterParentPosition)(checkedNodesPositions.map(function (itemObj) {\n        return itemObj.pos;\n      }));\n      checkedNodes = checkedNodesPositions.filter(function (itemObj) {\n        return posArr.indexOf(itemObj.pos) !== -1;\n      }).map(function (itemObj) {\n        return itemObj.node;\n      });\n    } else {\n      checkedNodes = checkedNodes.filter(function (n) {\n        return !n.props.children;\n      });\n    }\n    return checkedNodes;\n  };\n\n  Select.prototype.getDeselectedValue = function getDeselectedValue(selectedValue) {\n    var checkedTreeNodes = this.checkedTreeNodes;\n    var unCheckPos = void 0;\n    checkedTreeNodes.forEach(function (itemObj) {\n      if (itemObj.node.props.value === selectedValue) {\n        unCheckPos = itemObj.pos;\n      }\n    });\n    var newVals = [];\n    var newCkTns = [];\n    checkedTreeNodes.forEach(function (itemObj) {\n      if ((0, _util.isPositionPrefix)(itemObj.pos, unCheckPos) || (0, _util.isPositionPrefix)(unCheckPos, itemObj.pos)) {\n        // Filter ancestral and children nodes when uncheck a node.\n        return;\n      }\n      newCkTns.push(itemObj);\n      newVals.push(itemObj.node.props.value);\n    });\n    this.checkedTreeNodes = this._checkedNodes = newCkTns;\n    var nv = this.state.value.filter(function (val) {\n      return newVals.indexOf(val.value) !== -1;\n    });\n    this.fireChange(nv, { triggerValue: selectedValue, clear: true });\n  };\n\n  Select.prototype.setOpenState = function setOpenState(open, needFocus) {\n    var _this4 = this;\n\n    var documentClickClose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    this.clearDelayTimer();\n    var props = this.props;\n    // can not optimize, if children is empty\n    // if (this.state.open === open) {\n    //   return;\n    // }\n\n    if (!this.props.onDropdownVisibleChange(open, { documentClickClose: documentClickClose })) {\n      return;\n    }\n    this.setState({\n      open: open\n    }, function () {\n      if (needFocus || open) {\n        if (open || (0, _util.isMultipleOrTagsOrCombobox)(props)) {\n          var input = _this4.getInputDOMNode();\n          if (input && document.activeElement !== input) {\n            input.focus();\n          }\n        } else if (_this4.selection) {\n          _this4.selection.focus();\n        }\n      }\n    });\n  };\n\n  Select.prototype.clearSearchInput = function clearSearchInput() {\n    this.getInputDOMNode().focus();\n    if (!('inputValue' in this.props)) {\n      this.setState({ inputValue: '' });\n    }\n  };\n\n  Select.prototype.addLabelToValue = function addLabelToValue(props, value_) {\n    var _this5 = this;\n\n    var value = value_;\n    if (this.isLabelInValue()) {\n      value.forEach(function (v, i) {\n        if (Object.prototype.toString.call(value[i]) !== '[object Object]') {\n          value[i] = {\n            value: '',\n            label: ''\n          };\n          return;\n        }\n        v.label = v.label || _this5.getLabelFromProps(props, v.value);\n      });\n    } else {\n      value = value.map(function (v) {\n        return {\n          value: v,\n          label: _this5.getLabelFromProps(props, v)\n        };\n      });\n    }\n    return value;\n  };\n\n  Select.prototype.clearDelayTimer = function clearDelayTimer() {\n    if (this.delayTimer) {\n      clearTimeout(this.delayTimer);\n      this.delayTimer = null;\n    }\n  };\n\n  Select.prototype.removeSelected = function removeSelected(selectedVal) {\n    var props = this.props;\n    if (props.disabled) {\n      return;\n    }\n    this._cacheTreeNodesStates = 'no';\n    if (props.treeCheckable && (props.showCheckedStrategy === _strategies.SHOW_ALL || props.showCheckedStrategy === _strategies.SHOW_PARENT) && !(props.treeCheckStrictly || this.state.inputValue)) {\n      this.getDeselectedValue(selectedVal);\n      return;\n    }\n    // click the node's `x`(in select box), likely trigger the TreeNode's `unCheck` event,\n    // cautiously, they are completely different, think about it, the tree may not render at first,\n    // but the nodes in select box are ready.\n    var label = void 0;\n    var value = this.state.value.filter(function (singleValue) {\n      if (singleValue.value === selectedVal) {\n        label = singleValue.label;\n      }\n      return singleValue.value !== selectedVal;\n    });\n    var canMultiple = (0, _util.isMultipleOrTags)(props);\n\n    if (canMultiple) {\n      var event = selectedVal;\n      if (this.isLabelInValue()) {\n        event = {\n          value: selectedVal,\n          label: label\n        };\n      }\n      props.onDeselect(event);\n    }\n    if (props.treeCheckable) {\n      if (this.checkedTreeNodes && this.checkedTreeNodes.length) {\n        this.checkedTreeNodes = this._checkedNodes = this.checkedTreeNodes.filter(function (item) {\n          return value.some(function (i) {\n            return i.value === item.node.props.value;\n          });\n        });\n      }\n    }\n    this.fireChange(value, { triggerValue: selectedVal, clear: true });\n  };\n\n  Select.prototype.openIfHasChildren = function openIfHasChildren() {\n    var props = this.props;\n    if (_react2['default'].Children.count(props.children) || (0, _util.isSingleMode)(props)) {\n      this.setOpenState(true);\n    }\n  };\n\n  Select.prototype.fireChange = function fireChange(value, extraInfo) {\n    var _this6 = this;\n\n    var props = this.props;\n    var vals = value.map(function (i) {\n      return i.value;\n    });\n    var sv = this.state.value.map(function (i) {\n      return i.value;\n    });\n    if (vals.length !== sv.length || !vals.every(function (val, index) {\n      return sv[index] === val;\n    })) {\n      var ex = { preValue: [].concat(this.state.value) };\n      if (extraInfo) {\n        (0, _objectAssign2['default'])(ex, extraInfo);\n      }\n      var labs = null;\n      var vls = value;\n      if (!this.isLabelInValue()) {\n        labs = value.map(function (i) {\n          return i.label;\n        });\n        vls = vls.map(function (v) {\n          return v.value;\n        });\n      } else if (this.halfCheckedValues && this.halfCheckedValues.length) {\n        this.halfCheckedValues.forEach(function (i) {\n          if (!vls.some(function (v) {\n            return v.value === i.value;\n          })) {\n            vls.push(i);\n          }\n        });\n      }\n      if (props.treeCheckable && ex.clear) {\n        var treeData = this.renderedTreeData || props.children;\n        ex.allCheckedNodes = (0, _util.flatToHierarchy)((0, _util.filterAllCheckedData)(vals, treeData));\n      }\n      if (props.treeCheckable && this.state.inputValue) {\n        var _vls = [].concat(this.state.value);\n        if (ex.checked) {\n          value.forEach(function (i) {\n            if (_vls.every(function (ii) {\n              return ii.value !== i.value;\n            })) {\n              _vls.push((0, _extends3['default'])({}, i));\n            }\n          });\n        } else {\n          var index = void 0;\n          var includeVal = _vls.some(function (i, ind) {\n            if (i.value === ex.triggerValue) {\n              index = ind;\n              return true;\n            }\n          });\n          if (includeVal) {\n            _vls.splice(index, 1);\n          }\n        }\n        vls = _vls;\n        if (!this.isLabelInValue()) {\n          labs = _vls.map(function (v) {\n            return v.label;\n          });\n          vls = _vls.map(function (v) {\n            return v.value;\n          });\n        }\n      }\n      this._savedValue = (0, _util.isMultipleOrTags)(props) ? vls : vls[0];\n      props.onChange(this._savedValue, labs, ex);\n      if (!('value' in props)) {\n        this._cacheTreeNodesStates = false;\n        this.setState({\n          value: this.getValue(props, (0, _util.toArray)(this._savedValue).map(function (v, i) {\n            return _this6.isLabelInValue() ? v : {\n              value: v,\n              label: labs && labs[i]\n            };\n          }))\n        });\n      }\n    }\n  };\n\n  Select.prototype.isLabelInValue = function isLabelInValue() {\n    var _props4 = this.props,\n        treeCheckable = _props4.treeCheckable,\n        treeCheckStrictly = _props4.treeCheckStrictly,\n        labelInValue = _props4.labelInValue;\n\n    if (treeCheckable && treeCheckStrictly) {\n      return true;\n    }\n    return labelInValue || false;\n  };\n\n  Select.prototype.focus = function focus() {\n    if ((0, _util.isSingleMode)(this.props)) {\n      this.selection.focus();\n    } else {\n      this.getInputDOMNode().focus();\n    }\n  };\n\n  Select.prototype.blur = function blur() {\n    if ((0, _util.isSingleMode)(this.props)) {\n      this.selection.blur();\n    } else {\n      this.getInputDOMNode().blur();\n    }\n  };\n\n  Select.prototype.renderTopControlNode = function renderTopControlNode() {\n    var _this7 = this;\n\n    var value = this.state.value;\n\n    var props = this.props;\n    var choiceTransitionName = props.choiceTransitionName,\n        prefixCls = props.prefixCls,\n        maxTagTextLength = props.maxTagTextLength;\n    // single and not combobox, input is inside dropdown\n\n    if ((0, _util.isSingleMode)(props)) {\n      var innerNode = _react2['default'].createElement(\n        'span',\n        {\n          key: 'placeholder',\n          className: prefixCls + '-selection__placeholder'\n        },\n        props.placeholder\n      );\n      if (value.length) {\n        innerNode = _react2['default'].createElement(\n          'span',\n          {\n            key: 'value',\n            title: value[0].label,\n            className: prefixCls + '-selection-selected-value'\n          },\n          value[0].label\n        );\n      }\n      return _react2['default'].createElement(\n        'span',\n        { className: prefixCls + '-selection__rendered' },\n        innerNode\n      );\n    }\n\n    var selectedValueNodes = [];\n    if ((0, _util.isMultipleOrTags)(props)) {\n      selectedValueNodes = value.map(function (singleValue) {\n        var content = singleValue.label;\n        var title = content;\n        if (maxTagTextLength && typeof content === 'string' && content.length > maxTagTextLength) {\n          content = content.slice(0, maxTagTextLength) + '...';\n        }\n        return _react2['default'].createElement(\n          'li',\n          (0, _extends3['default'])({\n            style: _util.UNSELECTABLE_STYLE\n          }, _util.UNSELECTABLE_ATTRIBUTE, {\n            onMouseDown: _util.preventDefaultEvent,\n            className: prefixCls + '-selection__choice',\n            key: singleValue.value,\n            title: title\n          }),\n          _react2['default'].createElement('span', {\n            className: prefixCls + '-selection__choice__remove',\n            onClick: _this7.removeSelected.bind(_this7, singleValue.value)\n          }),\n          _react2['default'].createElement(\n            'span',\n            { className: prefixCls + '-selection__choice__content' },\n            content\n          )\n        );\n      });\n    }\n    selectedValueNodes.push(_react2['default'].createElement(\n      'li',\n      {\n        className: prefixCls + '-search ' + prefixCls + '-search--inline',\n        key: '__input'\n      },\n      this.getInputElement()\n    ));\n    var className = prefixCls + '-selection__rendered';\n    if ((0, _util.isMultipleOrTags)(props) && choiceTransitionName) {\n      return _react2['default'].createElement(\n        _rcAnimate2['default'],\n        {\n          className: className,\n          component: 'ul',\n          transitionName: choiceTransitionName,\n          onLeave: this.onChoiceAnimationLeave\n        },\n        selectedValueNodes\n      );\n    }\n    return _react2['default'].createElement(\n      'ul',\n      { className: className },\n      selectedValueNodes\n    );\n  };\n\n  Select.prototype.renderTreeData = function renderTreeData(props) {\n    var validProps = props || this.props;\n    if (validProps.treeData) {\n      if (props && props.treeData === this.props.treeData && this.renderedTreeData) {\n        // cache and use pre data.\n        this._cachetreeData = true;\n        return this.renderedTreeData;\n      }\n      this._cachetreeData = false;\n      var treeData = [].concat(validProps.treeData);\n      // process treeDataSimpleMode\n      if (validProps.treeDataSimpleMode) {\n        var simpleFormat = {\n          id: 'id',\n          pId: 'pId',\n          rootPId: null\n        };\n        if (Object.prototype.toString.call(validProps.treeDataSimpleMode) === '[object Object]') {\n          (0, _objectAssign2['default'])(simpleFormat, validProps.treeDataSimpleMode);\n        }\n        treeData = (0, _util.processSimpleTreeData)(treeData, simpleFormat);\n      }\n      return loopTreeData(treeData, undefined, this.props.treeCheckable);\n    }\n  };\n\n  Select.prototype.render = function render() {\n    var _rootCls;\n\n    var props = this.props;\n    var multiple = (0, _util.isMultipleOrTags)(props);\n    var state = this.state;\n    var className = props.className,\n        disabled = props.disabled,\n        allowClear = props.allowClear,\n        prefixCls = props.prefixCls;\n\n    var ctrlNode = this.renderTopControlNode();\n    var extraSelectionProps = {};\n    if (!(0, _util.isMultipleOrTagsOrCombobox)(props)) {\n      extraSelectionProps = {\n        onKeyDown: this.onKeyDown,\n        tabIndex: 0\n      };\n    }\n    var rootCls = (_rootCls = {}, _rootCls[className] = !!className, _rootCls[prefixCls] = 1, _rootCls[prefixCls + '-open'] = state.open, _rootCls[prefixCls + '-focused'] = state.open || state.focused, _rootCls[prefixCls + '-disabled'] = disabled, _rootCls[prefixCls + '-enabled'] = !disabled, _rootCls[prefixCls + '-allow-clear'] = !!props.allowClear, _rootCls);\n\n    var clear = _react2['default'].createElement('span', {\n      key: 'clear',\n      className: prefixCls + '-selection__clear',\n      onClick: this.onClearSelection\n    });\n    return _react2['default'].createElement(\n      _SelectTrigger2['default'],\n      (0, _extends3['default'])({}, props, {\n        treeNodes: props.children,\n        treeData: this.renderedTreeData,\n        _cachetreeData: this._cachetreeData,\n        _treeNodesStates: this._treeNodesStates,\n        halfCheckedValues: this.halfCheckedValues,\n        multiple: multiple,\n        disabled: disabled,\n        visible: state.open,\n        inputValue: state.inputValue,\n        inputElement: this.getInputElement(),\n        value: state.value,\n        onDropdownVisibleChange: this.onDropdownVisibleChange,\n        getPopupContainer: props.getPopupContainer,\n        onSelect: this.onSelect,\n        ref: (0, _util.saveRef)(this, 'trigger')\n      }),\n      _react2['default'].createElement(\n        'span',\n        {\n          style: props.style,\n          onClick: props.onClick,\n          className: (0, _classnames2['default'])(rootCls),\n          onBlur: props.onBlur,\n          onFocus: props.onFocus\n        },\n        _react2['default'].createElement(\n          'span',\n          (0, _extends3['default'])({\n            ref: (0, _util.saveRef)(this, 'selection'),\n            key: 'selection',\n            className: prefixCls + '-selection\\n            ' + prefixCls + '-selection--' + (multiple ? 'multiple' : 'single'),\n            role: 'combobox',\n            'aria-autocomplete': 'list',\n            'aria-haspopup': 'true',\n            'aria-expanded': state.open\n          }, extraSelectionProps),\n          ctrlNode,\n          allowClear && this.state.value.length && this.state.value[0].value ? clear : null,\n          multiple || !props.showArrow ? null : _react2['default'].createElement(\n            'span',\n            {\n              key: 'arrow',\n              className: prefixCls + '-arrow',\n              style: { outline: 'none' }\n            },\n            _react2['default'].createElement('b', null)\n          ),\n          multiple ? this.getSearchPlaceholderElement(!!this.state.inputValue || this.state.value.length) : null\n        )\n      )\n    );\n  };\n\n  return Select;\n}(_react.Component);\n\nSelect.propTypes = _PropTypes.SelectPropTypes;\nSelect.defaultProps = {\n  prefixCls: 'rc-tree-select',\n  filterTreeNode: filterFn,\n  showSearch: true,\n  allowClear: false,\n  placeholder: '',\n  searchPlaceholder: '',\n  labelInValue: false,\n  onClick: noop,\n  onChange: noop,\n  onSelect: noop,\n  onDeselect: noop,\n  onSearch: noop,\n  showArrow: true,\n  dropdownMatchSelectWidth: true,\n  dropdownStyle: {},\n  onDropdownVisibleChange: function onDropdownVisibleChange() {\n    return true;\n  },\n  notFoundContent: 'Not Found',\n  showCheckedStrategy: _strategies.SHOW_CHILD,\n  // skipHandleInitValue: false, // Deprecated (use treeCheckStrictly)\n  treeCheckStrictly: false,\n  treeIcon: false,\n  treeLine: false,\n  treeDataSimpleMode: false,\n  treeDefaultExpandAll: false,\n  treeCheckable: false,\n  treeNodeFilterProp: 'value',\n  treeNodeLabelProp: 'title'\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this8 = this;\n\n  this.onInputChange = function (event) {\n    var val = event.target.value;\n    var props = _this8.props;\n\n    _this8.setState({\n      inputValue: val,\n      open: true\n    });\n    if (props.treeCheckable && !val) {\n      _this8.setState({\n        value: _this8.getValue(props, [].concat(_this8.state.value), false)\n      });\n    }\n    props.onSearch(val);\n  };\n\n  this.onDropdownVisibleChange = function (open) {\n    // selection inside combobox cause click\n    if (!open && document.activeElement === _this8.getInputDOMNode()) {}\n    // return;\n\n    // this.setOpenState(open);\n    // setTimeout, then have animation. why?\n    setTimeout(function () {\n      _this8.setOpenState(open, undefined, !open);\n    }, 10);\n  };\n\n  this.onKeyDown = function (event) {\n    var props = _this8.props;\n    if (props.disabled) {\n      return;\n    }\n    var keyCode = event.keyCode;\n    if (_this8.state.open && !_this8.getInputDOMNode()) {\n      _this8.onInputKeyDown(event);\n    } else if (keyCode === _KeyCode2['default'].ENTER || keyCode === _KeyCode2['default'].DOWN) {\n      _this8.setOpenState(true);\n      event.preventDefault();\n    }\n  };\n\n  this.onInputKeyDown = function (event) {\n    var props = _this8.props;\n    if (props.disabled) {\n      return;\n    }\n    var state = _this8.state;\n    var keyCode = event.keyCode;\n    if ((0, _util.isMultipleOrTags)(props) && !event.target.value && keyCode === _KeyCode2['default'].BACKSPACE) {\n      var value = state.value.concat();\n      if (value.length) {\n        var popValue = value.pop();\n        _this8.removeSelected(_this8.isLabelInValue() ? popValue : popValue.value);\n      }\n      return;\n    }\n    if (keyCode === _KeyCode2['default'].DOWN) {\n      if (!state.open) {\n        _this8.openIfHasChildren();\n        event.preventDefault();\n        event.stopPropagation();\n        return;\n      }\n    } else if (keyCode === _KeyCode2['default'].ESC) {\n      if (state.open) {\n        _this8.setOpenState(false);\n        event.preventDefault();\n        event.stopPropagation();\n      }\n      return;\n    }\n  };\n\n  this.onSelect = function (selectedKeys, info) {\n    var item = info.node;\n    var value = _this8.state.value;\n    var props = _this8.props;\n    var selectedValue = (0, _util.getValuePropValue)(item);\n    var selectedLabel = _this8.getLabelFromNode(item);\n    var checkableSelect = props.treeCheckable && info.event === 'select';\n    var event = selectedValue;\n    if (_this8.isLabelInValue()) {\n      event = {\n        value: event,\n        label: selectedLabel\n      };\n    }\n    if (info.selected === false) {\n      _this8.onDeselect(info);\n      if (!checkableSelect) return;\n    }\n    props.onSelect(event, item, info);\n\n    var checkEvt = info.event === 'check';\n    if ((0, _util.isMultipleOrTags)(props)) {\n      _this8.clearSearchInput();\n      if (checkEvt) {\n        value = _this8.getCheckedNodes(info, props).map(function (n) {\n          return {\n            value: (0, _util.getValuePropValue)(n),\n            label: _this8.getLabelFromNode(n)\n          };\n        });\n      } else {\n        if (value.some(function (i) {\n          return i.value === selectedValue;\n        })) {\n          return;\n        }\n        value = value.concat([{\n          value: selectedValue,\n          label: selectedLabel\n        }]);\n      }\n    } else {\n      if (value.length && value[0].value === selectedValue) {\n        _this8.setOpenState(false);\n        return;\n      }\n      value = [{\n        value: selectedValue,\n        label: selectedLabel\n      }];\n      _this8.setOpenState(false);\n    }\n\n    var extraInfo = {\n      triggerValue: selectedValue,\n      triggerNode: item\n    };\n    if (checkEvt) {\n      extraInfo.checked = info.checked;\n      // if inputValue existing, tree is checkStrictly\n      extraInfo.allCheckedNodes = props.treeCheckStrictly || _this8.state.inputValue ? info.checkedNodes : (0, _util.flatToHierarchy)(info.checkedNodesPositions);\n      _this8._checkedNodes = info.checkedNodesPositions;\n      var _tree = _this8.trigger.popupEle;\n      _this8._treeNodesStates = _tree.checkKeys;\n    } else {\n      extraInfo.selected = info.selected;\n    }\n\n    _this8.fireChange(value, extraInfo);\n    if (props.inputValue === null) {\n      _this8.setState({\n        inputValue: ''\n      });\n    }\n  };\n\n  this.onDeselect = function (info) {\n    _this8.removeSelected((0, _util.getValuePropValue)(info.node));\n    if (!(0, _util.isMultipleOrTags)(_this8.props)) {\n      _this8.setOpenState(false);\n    } else {\n      _this8.clearSearchInput();\n    }\n  };\n\n  this.onPlaceholderClick = function () {\n    _this8.getInputDOMNode().focus();\n  };\n\n  this.onClearSelection = function (event) {\n    var props = _this8.props;\n    var state = _this8.state;\n    if (props.disabled) {\n      return;\n    }\n    event.stopPropagation();\n    _this8._cacheTreeNodesStates = 'no';\n    _this8._checkedNodes = [];\n    if (state.inputValue || state.value.length) {\n      _this8.setOpenState(false);\n      if (typeof props.inputValue === 'undefined') {\n        _this8.setState({\n          inputValue: ''\n        }, function () {\n          _this8.fireChange([]);\n        });\n      } else {\n        _this8.fireChange([]);\n      }\n    }\n  };\n\n  this.onChoiceAnimationLeave = function () {\n    _this8.trigger.trigger.forcePopupAlign();\n  };\n};\n\nSelect.SHOW_ALL = _strategies.SHOW_ALL;\nSelect.SHOW_PARENT = _strategies.SHOW_PARENT;\nSelect.SHOW_CHILD = _strategies.SHOW_CHILD;\n\nexports['default'] = Select;\nmodule.exports = exports['default'];"},"hash":"981a5c5df8dc67fb026cba39968e15c5"}