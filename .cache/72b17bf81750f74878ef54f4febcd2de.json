{"dependencies":[{"name":"react","loc":{"line":5,"column":21}},{"name":"prop-types","loc":{"line":9,"column":25}},{"name":"recompose/pure","loc":{"line":13,"column":20}}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _pure = require('recompose/pure');\n\nvar _pure2 = _interopRequireDefault(_pure);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *\n * @param {string} axis\n * @param {number} width\n * @param {number} height\n * @param {string} position\n * @param {number} offsetX\n * @param {number} offsetY\n * @param {string} orientation\n * @return {{ x: number, y: number, textAnchor: string }}\n */\nvar computeLabel = function computeLabel(_ref) {\n    var axis = _ref.axis,\n        width = _ref.width,\n        height = _ref.height,\n        position = _ref.position,\n        offsetX = _ref.offsetX,\n        offsetY = _ref.offsetY,\n        orientation = _ref.orientation;\n\n    var x = 0;\n    var y = 0;\n    var rotation = orientation === 'vertical' ? -90 : 0;\n    var textAnchor = 'start';\n\n    if (axis === 'x') {\n        switch (position) {\n            case 'top-left':\n                x = -offsetX;\n                y = offsetY;\n                textAnchor = 'end';\n                break;\n            case 'top':\n                y = -offsetY;\n                if (orientation === 'horizontal') {\n                    textAnchor = 'middle';\n                } else {\n                    textAnchor = 'start';\n                }\n                break;\n            case 'top-right':\n                x = offsetX;\n                y = offsetY;\n                if (orientation === 'horizontal') {\n                    textAnchor = 'start';\n                } else {\n                    textAnchor = 'end';\n                }\n                break;\n            case 'right':\n                x = offsetX;\n                y = height / 2;\n                if (orientation === 'horizontal') {\n                    textAnchor = 'start';\n                } else {\n                    textAnchor = 'middle';\n                }\n                break;\n            case 'bottom-right':\n                x = offsetX;\n                y = height - offsetY;\n                textAnchor = 'start';\n                break;\n            case 'bottom':\n                y = height + offsetY;\n                if (orientation === 'horizontal') {\n                    textAnchor = 'middle';\n                } else {\n                    textAnchor = 'end';\n                }\n                break;\n            case 'bottom-left':\n                y = height - offsetY;\n                x = -offsetX;\n                if (orientation === 'horizontal') {\n                    textAnchor = 'end';\n                } else {\n                    textAnchor = 'start';\n                }\n                break;\n            case 'left':\n                x = -offsetX;\n                y = height / 2;\n                if (orientation === 'horizontal') {\n                    textAnchor = 'end';\n                } else {\n                    textAnchor = 'middle';\n                }\n                break;\n        }\n    } else {\n        switch (position) {\n            case 'top-left':\n                x = offsetX;\n                y = -offsetY;\n                textAnchor = 'start';\n                break;\n            case 'top':\n                x = width / 2;\n                y = -offsetY;\n                if (orientation === 'horizontal') {\n                    textAnchor = 'middle';\n                } else {\n                    textAnchor = 'start';\n                }\n                break;\n            case 'top-right':\n                x = width - offsetX;\n                y = -offsetY;\n                if (orientation === 'horizontal') {\n                    textAnchor = 'end';\n                } else {\n                    textAnchor = 'start';\n                }\n                break;\n            case 'right':\n                x = width + offsetX;\n                if (orientation === 'horizontal') {\n                    textAnchor = 'start';\n                } else {\n                    textAnchor = 'middle';\n                }\n                break;\n            case 'bottom-right':\n                x = width - offsetX;\n                y = offsetY;\n                textAnchor = 'end';\n                break;\n            case 'bottom':\n                x = width / 2;\n                y = offsetY;\n                if (orientation === 'horizontal') {\n                    textAnchor = 'middle';\n                } else {\n                    textAnchor = 'end';\n                }\n                break;\n            case 'bottom-left':\n                x = offsetX;\n                y = offsetY;\n                if (orientation === 'horizontal') {\n                    textAnchor = 'start';\n                } else {\n                    textAnchor = 'end';\n                }\n                break;\n            case 'left':\n                x = -offsetX;\n                if (orientation === 'horizontal') {\n                    textAnchor = 'end';\n                } else {\n                    textAnchor = 'middle';\n                }\n                break;\n        }\n    }\n\n    return { x: x, y: y, rotation: rotation, textAnchor: textAnchor };\n}; /*\n    * This file is part of the nivo project.\n    *\n    * Copyright 2016-present, RaphaÃ«l Benitte.\n    *\n    * For the full copyright and license information, please view the LICENSE\n    * file that was distributed with this source code.\n    */\n\n\nvar CartesianMarkersItem = function CartesianMarkersItem(_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height,\n        axis = _ref2.axis,\n        scale = _ref2.scale,\n        value = _ref2.value,\n        theme = _ref2.theme,\n        lineStyle = _ref2.lineStyle,\n        textStyle = _ref2.textStyle,\n        legend = _ref2.legend,\n        legendPosition = _ref2.legendPosition,\n        legendOffsetX = _ref2.legendOffsetX,\n        legendOffsetY = _ref2.legendOffsetY,\n        legendOrientation = _ref2.legendOrientation;\n\n    var x = 0;\n    var x2 = 0;\n    var y = 0;\n    var y2 = 0;\n\n    if (axis === 'y') {\n        y = scale(value);\n        x2 = width;\n    } else {\n        x = scale(value);\n        y2 = height;\n    }\n\n    var legendNode = null;\n    if (legend) {\n        var legendProps = computeLabel({\n            axis: axis,\n            width: width,\n            height: height,\n            position: legendPosition,\n            offsetX: legendOffsetX,\n            offsetY: legendOffsetY,\n            orientation: legendOrientation\n        });\n        legendNode = _react2.default.createElement(\n            'text',\n            {\n                transform: 'translate(' + legendProps.x + ', ' + legendProps.y + ') rotate(' + legendProps.rotation + ')',\n                textAnchor: legendProps.textAnchor,\n                alignmentBaseline: 'central',\n                style: textStyle\n            },\n            legend\n        );\n    }\n\n    return _react2.default.createElement(\n        'g',\n        { transform: 'translate(' + x + ', ' + y + ')' },\n        _react2.default.createElement('line', {\n            x1: 0,\n            x2: x2,\n            y1: 0,\n            y2: y2,\n            stroke: theme.markers.lineColor,\n            strokeWidth: theme.markers.lineStrokeWidth,\n            style: lineStyle\n        }),\n        legendNode\n    );\n};\n\nCartesianMarkersItem.propTypes = {\n    width: _propTypes2.default.number.isRequired,\n    height: _propTypes2.default.number.isRequired,\n\n    axis: _propTypes2.default.oneOf(['x', 'y']).isRequired,\n    scale: _propTypes2.default.func.isRequired,\n    value: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired,\n    lineStyle: _propTypes2.default.object,\n    textStyle: _propTypes2.default.object,\n\n    legend: _propTypes2.default.string,\n    legendPosition: _propTypes2.default.oneOf(['top-left', 'top', 'top-right', 'right', 'bottom-right', 'bottom', 'bottom-left', 'left']),\n    legendOffsetX: _propTypes2.default.number.isRequired,\n    legendOffsetY: _propTypes2.default.number.isRequired,\n    legendOrientation: _propTypes2.default.oneOf(['horizontal', 'vertical']).isRequired,\n\n    theme: _propTypes2.default.shape({\n        markers: _propTypes2.default.shape({\n            textColor: _propTypes2.default.string.isRequired,\n            fontSize: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired\n        }).isRequired\n    }).isRequired\n};\n\nCartesianMarkersItem.defaultProps = {\n    legendPosition: 'top-right',\n    legendOffsetX: 14,\n    legendOffsetY: 14,\n    legendOrientation: 'horizontal'\n};\n\nexports.default = (0, _pure2.default)(CartesianMarkersItem);"},"hash":"45399a493785ac0ce6046fa6544c3f04"}