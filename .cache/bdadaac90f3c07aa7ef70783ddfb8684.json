{"dependencies":[{"name":"draft-js","loc":{"line":6,"column":23}},{"name":"lodash/toArray","loc":{"line":8,"column":23}},{"name":"immutable","loc":{"line":12,"column":25}}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\nexports['default'] = customHTML2Content;\n\nvar _draftJs = require('draft-js');\n\nvar _toArray = require('lodash/toArray');\n\nvar _toArray2 = _interopRequireDefault(_toArray);\n\nvar _immutable = require('immutable');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction compose() {\n    for (var _len = arguments.length, argument = Array(_len), _key = 0; _key < _len; _key++) {\n        argument[_key] = arguments[_key];\n    }\n\n    var args = arguments;\n    var start = args.length - 1;\n    return function () {\n        var i = start;\n        var result = args[start].apply(this, arguments);\n        while (i--) {\n            result = args[i].call(this, result);\n        }return result;\n    };\n}\n;\n/*\n * Helpers\n */\n// Prepares img meta data object based on img attributes\nvar getBlockSpecForElement = function getBlockSpecForElement(imgElement) {\n    return {\n        contentType: 'image',\n        src: imgElement.getAttribute('src'),\n        width: imgElement.getAttribute('width'),\n        height: imgElement.getAttribute('height'),\n        align: imgElement.style.cssFloat\n    };\n};\n// Wraps meta data in HTML element which is 'understandable' by Draft, I used <blockquote />.\nvar wrapBlockSpec = function wrapBlockSpec(blockSpec) {\n    if (blockSpec == null) {\n        return null;\n    }\n    var tempEl = document.createElement('blockquote');\n    // stringify meta data and insert it as text content of temp HTML element. We will later extract\n    // and parse it.\n    tempEl.innerText = JSON.stringify(blockSpec);\n    return tempEl;\n};\n// Replaces <img> element with our temp element\nvar replaceElement = function replaceElement(oldEl, newEl) {\n    if (!(newEl instanceof HTMLElement)) {\n        return;\n    }\n    var parentNode = oldEl.parentNode;\n    return parentNode.replaceChild(newEl, oldEl);\n};\nvar elementToBlockSpecElement = compose(wrapBlockSpec, getBlockSpecForElement);\nvar imgReplacer = function imgReplacer(imgElement) {\n    return replaceElement(imgElement, elementToBlockSpecElement(imgElement));\n};\n// creates ContentBlock based on provided spec\nvar createContentBlock = function createContentBlock(blockData, contentState) {\n    var key = blockData.key,\n        type = blockData.type,\n        text = blockData.text,\n        data = blockData.data,\n        inlineStyles = blockData.inlineStyles,\n        entityData = blockData.entityData;\n\n    var blockSpec = {\n        type: type != null ? type : 'unstyled',\n        text: text != null ? text : '',\n        key: key != null ? key : (0, _draftJs.genKey)(),\n        data: null,\n        characterList: (0, _immutable.List)([])\n    };\n    if (data) {\n        blockSpec.data = (0, _immutable.fromJS)(data);\n    }\n    if (inlineStyles || entityData) {\n        var entityKey = void 0;\n        if (entityData) {\n            var _type = entityData.type,\n                mutability = entityData.mutability,\n                _data = entityData.data;\n\n            contentState.createEntity(_type, mutability, _data);\n            entityKey = contentState.getLastCreatedEntityKey();\n        } else {\n            entityKey = null;\n        }\n        var style = (0, _immutable.OrderedSet)(inlineStyles || []);\n        var charData = _draftJs.CharacterMetadata.create({ style: style, entityKey: entityKey });\n        blockSpec.characterList = (0, _immutable.List)((0, _immutable.Repeat)(charData, text.length));\n    }\n    return new _draftJs.ContentBlock(blockSpec);\n};\n// takes HTML string and returns DraftJS ContentState\nfunction customHTML2Content(HTML, contentState) {\n    var tempDoc = new DOMParser().parseFromString(HTML, 'text/html');\n    // replace all <img /> with <blockquote /> elements\n    (0, _toArray2['default'])(tempDoc.querySelectorAll('img')).forEach(imgReplacer);\n    // use DraftJS converter to do initial conversion. I don't provide DOMBuilder and\n    // blockRenderMap arguments here since it should fall back to its default ones, which are fine\n\n    var _convertFromHTML = (0, _draftJs.convertFromHTML)(tempDoc.body.innerHTML),\n        contentBlocks = _convertFromHTML.contentBlocks;\n    // now replace <blockquote /> ContentBlocks with 'atomic' ones\n\n\n    contentBlocks = contentBlocks.reduce(function (contentBlocks, block) {\n        if (block.getType() !== 'blockquote') {\n            return contentBlocks.concat(block);\n        }\n        var image = JSON.parse(block.getText());\n        contentState.createEntity('IMAGE-ENTITY', 'IMMUTABLE', image);\n        var entityKey = contentState.getLastCreatedEntityKey();\n        var charData = _draftJs.CharacterMetadata.create({ entity: entityKey });\n        // const blockSpec = Object.assign({ type: 'atomic', text: ' ' }, { entityData })\n        // const atomicBlock = createContentBlock(blockSpec)\n        // const spacerBlock = createContentBlock({});\n        var fragmentArray = [new _draftJs.ContentBlock({\n            key: (0, _draftJs.genKey)(),\n            type: 'image-block',\n            text: ' ',\n            characterList: (0, _immutable.List)((0, _immutable.Repeat)(charData, charData.count()))\n        }), new _draftJs.ContentBlock({\n            key: (0, _draftJs.genKey)(),\n            type: 'unstyled',\n            text: '',\n            characterList: (0, _immutable.List)()\n        })];\n        return contentBlocks.concat(fragmentArray);\n    }, []);\n    // console.log('>> customHTML2Content contentBlocks', contentBlocks);\n    tempDoc = null;\n    return _draftJs.BlockMapBuilder.createFromArray(contentBlocks);\n}\nmodule.exports = exports['default'];"},"hash":"6e1dcfefbc29e34f282493c0060d05cb"}