{"dependencies":[{"name":"babel-runtime/helpers/extends","loc":{"line":5,"column":24}},{"name":"react","loc":{"line":9,"column":21}},{"name":"prop-types","loc":{"line":13,"column":25}},{"name":"react-dom","loc":{"line":17,"column":24}},{"name":"create-react-class","loc":{"line":19,"column":32}},{"name":"rc-util/lib/Dom/contains","loc":{"line":23,"column":24}},{"name":"rc-util/lib/Dom/addEventListener","loc":{"line":27,"column":32}},{"name":"./Popup","loc":{"line":31,"column":21}},{"name":"./utils","loc":{"line":35,"column":21}},{"name":"rc-util/lib/getContainerRenderMixin","loc":{"line":37,"column":39}},{"name":"rc-util/lib/Portal","loc":{"line":41,"column":22}}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDom = require('react-dom');\n\nvar _createReactClass = require('create-react-class');\n\nvar _createReactClass2 = _interopRequireDefault(_createReactClass);\n\nvar _contains = require('rc-util/lib/Dom/contains');\n\nvar _contains2 = _interopRequireDefault(_contains);\n\nvar _addEventListener = require('rc-util/lib/Dom/addEventListener');\n\nvar _addEventListener2 = _interopRequireDefault(_addEventListener);\n\nvar _Popup = require('./Popup');\n\nvar _Popup2 = _interopRequireDefault(_Popup);\n\nvar _utils = require('./utils');\n\nvar _getContainerRenderMixin = require('rc-util/lib/getContainerRenderMixin');\n\nvar _getContainerRenderMixin2 = _interopRequireDefault(_getContainerRenderMixin);\n\nvar _Portal = require('rc-util/lib/Portal');\n\nvar _Portal2 = _interopRequireDefault(_Portal);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction noop() {}\n\nfunction returnEmptyString() {\n  return '';\n}\n\nfunction returnDocument() {\n  return window.document;\n}\n\nvar ALL_HANDLERS = ['onClick', 'onMouseDown', 'onTouchStart', 'onMouseEnter', 'onMouseLeave', 'onFocus', 'onBlur', 'onContextMenu'];\n\nvar IS_REACT_16 = !!_reactDom.createPortal;\n\nvar mixins = [];\n\nif (!IS_REACT_16) {\n  mixins.push((0, _getContainerRenderMixin2['default'])({\n    autoMount: false,\n\n    isVisible: function isVisible(instance) {\n      return instance.state.popupVisible;\n    },\n    isForceRender: function isForceRender(instance) {\n      return instance.props.forceRender;\n    },\n    getContainer: function getContainer(instance) {\n      return instance.getContainer();\n    }\n  }));\n}\n\nvar Trigger = (0, _createReactClass2['default'])({\n  displayName: 'Trigger',\n  propTypes: {\n    children: _propTypes2['default'].any,\n    action: _propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].arrayOf(_propTypes2['default'].string)]),\n    showAction: _propTypes2['default'].any,\n    hideAction: _propTypes2['default'].any,\n    getPopupClassNameFromAlign: _propTypes2['default'].any,\n    onPopupVisibleChange: _propTypes2['default'].func,\n    afterPopupVisibleChange: _propTypes2['default'].func,\n    popup: _propTypes2['default'].oneOfType([_propTypes2['default'].node, _propTypes2['default'].func]).isRequired,\n    popupStyle: _propTypes2['default'].object,\n    prefixCls: _propTypes2['default'].string,\n    popupClassName: _propTypes2['default'].string,\n    popupPlacement: _propTypes2['default'].string,\n    builtinPlacements: _propTypes2['default'].object,\n    popupTransitionName: _propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].object]),\n    popupAnimation: _propTypes2['default'].any,\n    mouseEnterDelay: _propTypes2['default'].number,\n    mouseLeaveDelay: _propTypes2['default'].number,\n    zIndex: _propTypes2['default'].number,\n    focusDelay: _propTypes2['default'].number,\n    blurDelay: _propTypes2['default'].number,\n    getPopupContainer: _propTypes2['default'].func,\n    getDocument: _propTypes2['default'].func,\n    forceRender: _propTypes2['default'].bool,\n    destroyPopupOnHide: _propTypes2['default'].bool,\n    mask: _propTypes2['default'].bool,\n    maskClosable: _propTypes2['default'].bool,\n    onPopupAlign: _propTypes2['default'].func,\n    popupAlign: _propTypes2['default'].object,\n    popupVisible: _propTypes2['default'].bool,\n    maskTransitionName: _propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].object]),\n    maskAnimation: _propTypes2['default'].string\n  },\n\n  mixins: mixins,\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      prefixCls: 'rc-trigger-popup',\n      getPopupClassNameFromAlign: returnEmptyString,\n      getDocument: returnDocument,\n      onPopupVisibleChange: noop,\n      afterPopupVisibleChange: noop,\n      onPopupAlign: noop,\n      popupClassName: '',\n      mouseEnterDelay: 0,\n      mouseLeaveDelay: 0.1,\n      focusDelay: 0,\n      blurDelay: 0.15,\n      popupStyle: {},\n      destroyPopupOnHide: false,\n      popupAlign: {},\n      defaultPopupVisible: false,\n      mask: false,\n      maskClosable: true,\n      action: [],\n      showAction: [],\n      hideAction: []\n    };\n  },\n  getInitialState: function getInitialState() {\n    var props = this.props;\n    var popupVisible = void 0;\n    if ('popupVisible' in props) {\n      popupVisible = !!props.popupVisible;\n    } else {\n      popupVisible = !!props.defaultPopupVisible;\n    }\n\n    this.prevPopupVisible = popupVisible;\n\n    return {\n      popupVisible: popupVisible\n    };\n  },\n  componentWillMount: function componentWillMount() {\n    var _this = this;\n\n    ALL_HANDLERS.forEach(function (h) {\n      _this['fire' + h] = function (e) {\n        _this.fireEvents(h, e);\n      };\n    });\n  },\n  componentDidMount: function componentDidMount() {\n    this.componentDidUpdate({}, {\n      popupVisible: this.state.popupVisible\n    });\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(_ref) {\n    var popupVisible = _ref.popupVisible;\n\n    if (popupVisible !== undefined) {\n      this.setState({\n        popupVisible: popupVisible\n      });\n    }\n  },\n  componentDidUpdate: function componentDidUpdate(_, prevState) {\n    var props = this.props;\n    var state = this.state;\n    var triggerAfterPopupVisibleChange = function triggerAfterPopupVisibleChange() {\n      if (prevState.popupVisible !== state.popupVisible) {\n        props.afterPopupVisibleChange(state.popupVisible);\n      }\n    };\n    if (!IS_REACT_16) {\n      this.renderComponent(null, triggerAfterPopupVisibleChange);\n    }\n\n    this.prevPopupVisible = prevState.popupVisible;\n\n    // We must listen to `mousedown` or `touchstart`, edge case:\n    // https://github.com/ant-design/ant-design/issues/5804\n    // https://github.com/react-component/calendar/issues/250\n    // https://github.com/react-component/trigger/issues/50\n    if (state.popupVisible) {\n      var currentDocument = void 0;\n      if (!this.clickOutsideHandler && (this.isClickToHide() || this.isContextMenuToShow())) {\n        currentDocument = props.getDocument();\n        this.clickOutsideHandler = (0, _addEventListener2['default'])(currentDocument, 'mousedown', this.onDocumentClick);\n      }\n      // always hide on mobile\n      if (!this.touchOutsideHandler) {\n        currentDocument = currentDocument || props.getDocument();\n        this.touchOutsideHandler = (0, _addEventListener2['default'])(currentDocument, 'touchstart', this.onDocumentClick);\n      }\n      // close popup when trigger type contains 'onContextMenu' and document is scrolling.\n      if (!this.contextMenuOutsideHandler1 && this.isContextMenuToShow()) {\n        currentDocument = currentDocument || props.getDocument();\n        this.contextMenuOutsideHandler1 = (0, _addEventListener2['default'])(currentDocument, 'scroll', this.onContextMenuClose);\n      }\n      // close popup when trigger type contains 'onContextMenu' and window is blur.\n      if (!this.contextMenuOutsideHandler2 && this.isContextMenuToShow()) {\n        this.contextMenuOutsideHandler2 = (0, _addEventListener2['default'])(window, 'blur', this.onContextMenuClose);\n      }\n      return;\n    }\n\n    this.clearOutsideHandler();\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    this.clearDelayTimer();\n    this.clearOutsideHandler();\n  },\n  onMouseEnter: function onMouseEnter(e) {\n    this.fireEvents('onMouseEnter', e);\n    this.delaySetPopupVisible(true, this.props.mouseEnterDelay);\n  },\n  onMouseLeave: function onMouseLeave(e) {\n    this.fireEvents('onMouseLeave', e);\n    this.delaySetPopupVisible(false, this.props.mouseLeaveDelay);\n  },\n  onPopupMouseEnter: function onPopupMouseEnter() {\n    this.clearDelayTimer();\n  },\n  onPopupMouseLeave: function onPopupMouseLeave(e) {\n    // https://github.com/react-component/trigger/pull/13\n    // react bug?\n    if (e.relatedTarget && !e.relatedTarget.setTimeout && this._component && this._component.getPopupDomNode && (0, _contains2['default'])(this._component.getPopupDomNode(), e.relatedTarget)) {\n      return;\n    }\n    this.delaySetPopupVisible(false, this.props.mouseLeaveDelay);\n  },\n  onFocus: function onFocus(e) {\n    this.fireEvents('onFocus', e);\n    // incase focusin and focusout\n    this.clearDelayTimer();\n    if (this.isFocusToShow()) {\n      this.focusTime = Date.now();\n      this.delaySetPopupVisible(true, this.props.focusDelay);\n    }\n  },\n  onMouseDown: function onMouseDown(e) {\n    this.fireEvents('onMouseDown', e);\n    this.preClickTime = Date.now();\n  },\n  onTouchStart: function onTouchStart(e) {\n    this.fireEvents('onTouchStart', e);\n    this.preTouchTime = Date.now();\n  },\n  onBlur: function onBlur(e) {\n    this.fireEvents('onBlur', e);\n    this.clearDelayTimer();\n    if (this.isBlurToHide()) {\n      this.delaySetPopupVisible(false, this.props.blurDelay);\n    }\n  },\n  onContextMenu: function onContextMenu(e) {\n    e.preventDefault();\n    this.fireEvents('onContextMenu', e);\n    this.setPopupVisible(true);\n  },\n  onContextMenuClose: function onContextMenuClose() {\n    if (this.isContextMenuToShow()) {\n      this.close();\n    }\n  },\n  onClick: function onClick(event) {\n    this.fireEvents('onClick', event);\n    // focus will trigger click\n    if (this.focusTime) {\n      var preTime = void 0;\n      if (this.preClickTime && this.preTouchTime) {\n        preTime = Math.min(this.preClickTime, this.preTouchTime);\n      } else if (this.preClickTime) {\n        preTime = this.preClickTime;\n      } else if (this.preTouchTime) {\n        preTime = this.preTouchTime;\n      }\n      if (Math.abs(preTime - this.focusTime) < 20) {\n        return;\n      }\n      this.focusTime = 0;\n    }\n    this.preClickTime = 0;\n    this.preTouchTime = 0;\n    event.preventDefault();\n    var nextVisible = !this.state.popupVisible;\n    if (this.isClickToHide() && !nextVisible || nextVisible && this.isClickToShow()) {\n      this.setPopupVisible(!this.state.popupVisible);\n    }\n  },\n  onDocumentClick: function onDocumentClick(event) {\n    if (this.props.mask && !this.props.maskClosable) {\n      return;\n    }\n    var target = event.target;\n    var root = (0, _reactDom.findDOMNode)(this);\n    var popupNode = this.getPopupDomNode();\n    if (!(0, _contains2['default'])(root, target) && !(0, _contains2['default'])(popupNode, target)) {\n      this.close();\n    }\n  },\n  handlePortalUpdate: function handlePortalUpdate() {\n    if (this.prevPopupVisible !== this.state.popupVisible) {\n      this.props.afterPopupVisibleChange(this.state.popupVisible);\n    }\n  },\n  getPopupDomNode: function getPopupDomNode() {\n    // for test\n    if (this._component && this._component.getPopupDomNode) {\n      return this._component.getPopupDomNode();\n    }\n    return null;\n  },\n  getRootDomNode: function getRootDomNode() {\n    return (0, _reactDom.findDOMNode)(this);\n  },\n  getPopupClassNameFromAlign: function getPopupClassNameFromAlign(align) {\n    var className = [];\n    var props = this.props;\n    var popupPlacement = props.popupPlacement,\n        builtinPlacements = props.builtinPlacements,\n        prefixCls = props.prefixCls;\n\n    if (popupPlacement && builtinPlacements) {\n      className.push((0, _utils.getPopupClassNameFromAlign)(builtinPlacements, prefixCls, align));\n    }\n    if (props.getPopupClassNameFromAlign) {\n      className.push(props.getPopupClassNameFromAlign(align));\n    }\n    return className.join(' ');\n  },\n  getPopupAlign: function getPopupAlign() {\n    var props = this.props;\n    var popupPlacement = props.popupPlacement,\n        popupAlign = props.popupAlign,\n        builtinPlacements = props.builtinPlacements;\n\n    if (popupPlacement && builtinPlacements) {\n      return (0, _utils.getAlignFromPlacement)(builtinPlacements, popupPlacement, popupAlign);\n    }\n    return popupAlign;\n  },\n  getComponent: function getComponent() {\n    var props = this.props,\n        state = this.state;\n\n    var mouseProps = {};\n    if (this.isMouseEnterToShow()) {\n      mouseProps.onMouseEnter = this.onPopupMouseEnter;\n    }\n    if (this.isMouseLeaveToHide()) {\n      mouseProps.onMouseLeave = this.onPopupMouseLeave;\n    }\n    return _react2['default'].createElement(\n      _Popup2['default'],\n      (0, _extends3['default'])({\n        prefixCls: props.prefixCls,\n        destroyPopupOnHide: props.destroyPopupOnHide,\n        visible: state.popupVisible,\n        className: props.popupClassName,\n        action: props.action,\n        align: this.getPopupAlign(),\n        onAlign: props.onPopupAlign,\n        animation: props.popupAnimation,\n        getClassNameFromAlign: this.getPopupClassNameFromAlign\n      }, mouseProps, {\n        getRootDomNode: this.getRootDomNode,\n        style: props.popupStyle,\n        mask: props.mask,\n        zIndex: props.zIndex,\n        transitionName: props.popupTransitionName,\n        maskAnimation: props.maskAnimation,\n        maskTransitionName: props.maskTransitionName,\n        ref: this.savePopup\n      }),\n      typeof props.popup === 'function' ? props.popup() : props.popup\n    );\n  },\n  getContainer: function getContainer() {\n    var props = this.props;\n\n    var popupContainer = document.createElement('div');\n    // Make sure default popup container will never cause scrollbar appearing\n    // https://github.com/react-component/trigger/issues/41\n    popupContainer.style.position = 'absolute';\n    popupContainer.style.top = '0';\n    popupContainer.style.left = '0';\n    popupContainer.style.width = '100%';\n    var mountNode = props.getPopupContainer ? props.getPopupContainer((0, _reactDom.findDOMNode)(this)) : props.getDocument().body;\n    mountNode.appendChild(popupContainer);\n    return popupContainer;\n  },\n  setPopupVisible: function setPopupVisible(popupVisible) {\n    this.clearDelayTimer();\n    if (this.state.popupVisible !== popupVisible) {\n      if (!('popupVisible' in this.props)) {\n        this.setState({\n          popupVisible: popupVisible\n        });\n      }\n      this.props.onPopupVisibleChange(popupVisible);\n    }\n  },\n  delaySetPopupVisible: function delaySetPopupVisible(visible, delayS) {\n    var _this2 = this;\n\n    var delay = delayS * 1000;\n    this.clearDelayTimer();\n    if (delay) {\n      this.delayTimer = setTimeout(function () {\n        _this2.setPopupVisible(visible);\n        _this2.clearDelayTimer();\n      }, delay);\n    } else {\n      this.setPopupVisible(visible);\n    }\n  },\n  clearDelayTimer: function clearDelayTimer() {\n    if (this.delayTimer) {\n      clearTimeout(this.delayTimer);\n      this.delayTimer = null;\n    }\n  },\n  clearOutsideHandler: function clearOutsideHandler() {\n    if (this.clickOutsideHandler) {\n      this.clickOutsideHandler.remove();\n      this.clickOutsideHandler = null;\n    }\n\n    if (this.contextMenuOutsideHandler1) {\n      this.contextMenuOutsideHandler1.remove();\n      this.contextMenuOutsideHandler1 = null;\n    }\n\n    if (this.contextMenuOutsideHandler2) {\n      this.contextMenuOutsideHandler2.remove();\n      this.contextMenuOutsideHandler2 = null;\n    }\n\n    if (this.touchOutsideHandler) {\n      this.touchOutsideHandler.remove();\n      this.touchOutsideHandler = null;\n    }\n  },\n  createTwoChains: function createTwoChains(event) {\n    var childPros = this.props.children.props;\n    var props = this.props;\n    if (childPros[event] && props[event]) {\n      return this['fire' + event];\n    }\n    return childPros[event] || props[event];\n  },\n  isClickToShow: function isClickToShow() {\n    var _props = this.props,\n        action = _props.action,\n        showAction = _props.showAction;\n\n    return action.indexOf('click') !== -1 || showAction.indexOf('click') !== -1;\n  },\n  isContextMenuToShow: function isContextMenuToShow() {\n    var _props2 = this.props,\n        action = _props2.action,\n        showAction = _props2.showAction;\n\n    return action.indexOf('contextMenu') !== -1 || showAction.indexOf('contextMenu') !== -1;\n  },\n  isClickToHide: function isClickToHide() {\n    var _props3 = this.props,\n        action = _props3.action,\n        hideAction = _props3.hideAction;\n\n    return action.indexOf('click') !== -1 || hideAction.indexOf('click') !== -1;\n  },\n  isMouseEnterToShow: function isMouseEnterToShow() {\n    var _props4 = this.props,\n        action = _props4.action,\n        showAction = _props4.showAction;\n\n    return action.indexOf('hover') !== -1 || showAction.indexOf('mouseEnter') !== -1;\n  },\n  isMouseLeaveToHide: function isMouseLeaveToHide() {\n    var _props5 = this.props,\n        action = _props5.action,\n        hideAction = _props5.hideAction;\n\n    return action.indexOf('hover') !== -1 || hideAction.indexOf('mouseLeave') !== -1;\n  },\n  isFocusToShow: function isFocusToShow() {\n    var _props6 = this.props,\n        action = _props6.action,\n        showAction = _props6.showAction;\n\n    return action.indexOf('focus') !== -1 || showAction.indexOf('focus') !== -1;\n  },\n  isBlurToHide: function isBlurToHide() {\n    var _props7 = this.props,\n        action = _props7.action,\n        hideAction = _props7.hideAction;\n\n    return action.indexOf('focus') !== -1 || hideAction.indexOf('blur') !== -1;\n  },\n  forcePopupAlign: function forcePopupAlign() {\n    if (this.state.popupVisible && this._component && this._component.alignInstance) {\n      this._component.alignInstance.forceAlign();\n    }\n  },\n  fireEvents: function fireEvents(type, e) {\n    var childCallback = this.props.children.props[type];\n    if (childCallback) {\n      childCallback(e);\n    }\n    var callback = this.props[type];\n    if (callback) {\n      callback(e);\n    }\n  },\n  close: function close() {\n    this.setPopupVisible(false);\n  },\n  savePopup: function savePopup(node) {\n    if (IS_REACT_16) {\n      this._component = node;\n    }\n  },\n  render: function render() {\n    var popupVisible = this.state.popupVisible;\n\n    var props = this.props;\n    var children = props.children;\n    var child = _react2['default'].Children.only(children);\n    var newChildProps = { key: 'trigger' };\n\n    if (this.isContextMenuToShow()) {\n      newChildProps.onContextMenu = this.onContextMenu;\n    } else {\n      newChildProps.onContextMenu = this.createTwoChains('onContextMenu');\n    }\n\n    if (this.isClickToHide() || this.isClickToShow()) {\n      newChildProps.onClick = this.onClick;\n      newChildProps.onMouseDown = this.onMouseDown;\n      newChildProps.onTouchStart = this.onTouchStart;\n    } else {\n      newChildProps.onClick = this.createTwoChains('onClick');\n      newChildProps.onMouseDown = this.createTwoChains('onMouseDown');\n      newChildProps.onTouchStart = this.createTwoChains('onTouchStart');\n    }\n    if (this.isMouseEnterToShow()) {\n      newChildProps.onMouseEnter = this.onMouseEnter;\n    } else {\n      newChildProps.onMouseEnter = this.createTwoChains('onMouseEnter');\n    }\n    if (this.isMouseLeaveToHide()) {\n      newChildProps.onMouseLeave = this.onMouseLeave;\n    } else {\n      newChildProps.onMouseLeave = this.createTwoChains('onMouseLeave');\n    }\n    if (this.isFocusToShow() || this.isBlurToHide()) {\n      newChildProps.onFocus = this.onFocus;\n      newChildProps.onBlur = this.onBlur;\n    } else {\n      newChildProps.onFocus = this.createTwoChains('onFocus');\n      newChildProps.onBlur = this.createTwoChains('onBlur');\n    }\n\n    var trigger = _react2['default'].cloneElement(child, newChildProps);\n\n    if (!IS_REACT_16) {\n      return trigger;\n    }\n\n    var portal = void 0;\n    // prevent unmounting after it's rendered\n    if (popupVisible || this._component || props.forceRender) {\n      portal = _react2['default'].createElement(\n        _Portal2['default'],\n        {\n          key: 'portal',\n          getContainer: this.getContainer,\n          didUpdate: this.handlePortalUpdate\n        },\n        this.getComponent()\n      );\n    }\n\n    return [trigger, portal];\n  }\n});\n\nexports['default'] = Trigger;\nmodule.exports = exports['default'];"},"hash":"d50a17065156faa047062b374a85a51d"}