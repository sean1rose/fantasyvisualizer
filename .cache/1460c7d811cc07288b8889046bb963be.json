{"dependencies":[{"name":"lodash/isFunction","loc":{"line":7,"column":27}},{"name":"react","loc":{"line":20,"column":21}},{"name":"prop-types","loc":{"line":24,"column":25}},{"name":"../util/PureRender","loc":{"line":28,"column":26}},{"name":"../util/ReactUtils","loc":{"line":32,"column":26}},{"name":"../util/DataUtils","loc":{"line":34,"column":25}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _isFunction2 = require('lodash/isFunction');\n\nvar _isFunction3 = _interopRequireDefault(_isFunction2);\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _class2, _temp; /**\n                             * @fileOverview Cartesian Grid\n                             */\n\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _PureRender = require('../util/PureRender');\n\nvar _PureRender2 = _interopRequireDefault(_PureRender);\n\nvar _ReactUtils = require('../util/ReactUtils');\n\nvar _DataUtils = require('../util/DataUtils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar CartesianGrid = (0, _PureRender2.default)(_class = (_temp = _class2 = function (_Component) {\n  _inherits(CartesianGrid, _Component);\n\n  function CartesianGrid() {\n    _classCallCheck(this, CartesianGrid);\n\n    return _possibleConstructorReturn(this, (CartesianGrid.__proto__ || Object.getPrototypeOf(CartesianGrid)).apply(this, arguments));\n  }\n\n  _createClass(CartesianGrid, [{\n    key: 'renderLineItem',\n    value: function renderLineItem(option, props) {\n      var lineItem = void 0;\n\n      if (_react2.default.isValidElement(option)) {\n        lineItem = _react2.default.cloneElement(option, props);\n      } else if ((0, _isFunction3.default)(option)) {\n        lineItem = option(props);\n      } else {\n        var x1 = props.x1,\n            y1 = props.y1,\n            x2 = props.x2,\n            y2 = props.y2,\n            key = props.key,\n            others = _objectWithoutProperties(props, ['x1', 'y1', 'x2', 'y2', 'key']);\n\n        lineItem = _react2.default.createElement('line', _extends({}, (0, _ReactUtils.getPresentationAttributes)(others), {\n          x1: x1,\n          y1: y1,\n          x2: x2,\n          y2: y2,\n          fill: 'none',\n          key: key\n        }));\n      }\n\n      return lineItem;\n    }\n\n    /**\n     * Draw the horizontal grid lines\n     * @param {Array} horizontalPoints either passed in as props or generated from function\n     * @return {Group} Horizontal lines\n     */\n\n  }, {\n    key: 'renderHorizontal',\n    value: function renderHorizontal(horizontalPoints) {\n      var _this2 = this;\n\n      var _props = this.props,\n          x = _props.x,\n          width = _props.width,\n          horizontal = _props.horizontal;\n\n\n      if (!horizontalPoints || !horizontalPoints.length) {\n        return null;\n      }\n\n      var items = horizontalPoints.map(function (entry, i) {\n        var props = _extends({}, _this2.props, {\n          x1: x,\n          y1: entry,\n          x2: x + width,\n          y2: entry,\n          key: 'line-' + i,\n          index: i\n        });\n\n        return _this2.renderLineItem(horizontal, props);\n      });\n\n      return _react2.default.createElement(\n        'g',\n        { className: 'recharts-cartesian-grid-horizontal' },\n        items\n      );\n    }\n\n    /**\n     * Draw vertical grid lines\n     * @param {Array} verticalPoints either passed in as props or generated from function\n     * @return {Group} Vertical lines\n     */\n\n  }, {\n    key: 'renderVertical',\n    value: function renderVertical(verticalPoints) {\n      var _this3 = this;\n\n      var _props2 = this.props,\n          y = _props2.y,\n          height = _props2.height,\n          vertical = _props2.vertical;\n\n\n      if (!verticalPoints || !verticalPoints.length) {\n        return null;\n      }\n\n      var items = verticalPoints.map(function (entry, i) {\n        var props = _extends({}, _this3.props, {\n          x1: entry,\n          y1: y,\n          x2: entry,\n          y2: y + height,\n          key: 'line-' + i,\n          index: i\n        });\n\n        return _this3.renderLineItem(vertical, props);\n      });\n\n      return _react2.default.createElement(\n        'g',\n        { className: 'recharts-cartesian-grid-vertical' },\n        items\n      );\n    }\n\n    /**\n     * Draw vertical grid stripes filled by colors\n     * @param {Array} verticalPoints either passed in as props or generated from function\n     * @return {Group} Vertical stripes\n     */\n\n  }, {\n    key: 'renderVerticalStripes',\n    value: function renderVerticalStripes(verticalPoints) {\n      var verticalFill = this.props.verticalFill;\n\n      if (!verticalFill || !verticalFill.length) {\n        return null;\n      }\n\n      var _props3 = this.props,\n          fillOpacity = _props3.fillOpacity,\n          x = _props3.x,\n          y = _props3.y,\n          width = _props3.width,\n          height = _props3.height;\n\n      var verticalPointsUpdated = verticalPoints.slice().sort(function (a, b) {\n        return a - b > 0;\n      });\n\n      if (x !== verticalPointsUpdated[0]) {\n        verticalPointsUpdated.unshift(0);\n      }\n\n      var items = verticalPointsUpdated.map(function (entry, i) {\n        var lineWidth = verticalPointsUpdated[i + 1] ? verticalPointsUpdated[i + 1] - entry : x + width - entry;\n        if (lineWidth <= 0) {\n          return null;\n        }\n        var colorIndex = i % verticalFill.length;\n        return _react2.default.createElement('rect', {\n          key: i,\n          x: Math.round(entry + x - x),\n          y: y,\n          width: lineWidth,\n          height: height,\n          stroke: 'none',\n          fill: verticalFill[colorIndex],\n          fillOpacity: fillOpacity,\n          className: 'recharts-cartesian-grid-bg'\n        });\n      });\n\n      return _react2.default.createElement(\n        'g',\n        { className: 'recharts-cartesian-gridstripes-vertical' },\n        items\n      );\n    }\n\n    /**\n     * Draw horizontal grid stripes filled by colors\n     * @param {Array} horizontalPoints either passed in as props or generated from function\n     * @return {Group} Horizontal stripes\n     */\n\n  }, {\n    key: 'renderHorizontalStripes',\n    value: function renderHorizontalStripes(horizontalPoints) {\n      var horizontalFill = this.props.horizontalFill;\n\n      if (!horizontalFill || !horizontalFill.length) {\n        return null;\n      }\n\n      var _props4 = this.props,\n          fillOpacity = _props4.fillOpacity,\n          x = _props4.x,\n          y = _props4.y,\n          width = _props4.width,\n          height = _props4.height;\n\n      var horizontalPointsUpdated = horizontalPoints.slice().sort(function (a, b) {\n        return a - b > 0;\n      });\n      if (y !== horizontalPointsUpdated[0]) {\n        horizontalPointsUpdated.unshift(0);\n      }\n\n      var items = horizontalPointsUpdated.map(function (entry, i) {\n        var lineHeight = horizontalPointsUpdated[i + 1] ? horizontalPointsUpdated[i + 1] - entry : y + height - entry;\n        if (lineHeight <= 0) {\n          return null;\n        }\n        var colorIndex = i % horizontalFill.length;\n        return _react2.default.createElement('rect', {\n          key: i,\n          y: Math.round(entry + y - y),\n          x: x,\n          height: lineHeight,\n          width: width,\n          stroke: 'none',\n          fill: horizontalFill[colorIndex],\n          fillOpacity: fillOpacity,\n          className: 'recharts-cartesian-grid-bg'\n        });\n      });\n\n      return _react2.default.createElement(\n        'g',\n        { className: 'recharts-cartesian-gridstripes-horizontal' },\n        items\n      );\n    }\n  }, {\n    key: 'renderBackground',\n    value: function renderBackground() {\n      var fill = this.props.fill;\n\n\n      if (!fill || fill === 'none') {\n        return null;\n      }\n\n      var _props5 = this.props,\n          fillOpacity = _props5.fillOpacity,\n          x = _props5.x,\n          y = _props5.y,\n          width = _props5.width,\n          height = _props5.height;\n\n\n      return _react2.default.createElement('rect', {\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        stroke: 'none',\n        fill: fill,\n        fillOpacity: fillOpacity,\n        className: 'recharts-cartesian-grid-bg'\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props6 = this.props,\n          x = _props6.x,\n          y = _props6.y,\n          width = _props6.width,\n          height = _props6.height,\n          horizontal = _props6.horizontal,\n          vertical = _props6.vertical,\n          horizontalCoordinatesGenerator = _props6.horizontalCoordinatesGenerator,\n          verticalCoordinatesGenerator = _props6.verticalCoordinatesGenerator,\n          xAxis = _props6.xAxis,\n          yAxis = _props6.yAxis,\n          offset = _props6.offset,\n          chartWidth = _props6.chartWidth,\n          chartHeight = _props6.chartHeight;\n\n\n      if (!(0, _DataUtils.isNumber)(width) || width <= 0 || !(0, _DataUtils.isNumber)(height) || height <= 0 || !(0, _DataUtils.isNumber)(x) || x !== +x || !(0, _DataUtils.isNumber)(y) || y !== +y) {\n        return null;\n      }\n\n      var _props7 = this.props,\n          horizontalPoints = _props7.horizontalPoints,\n          verticalPoints = _props7.verticalPoints;\n\n      // No horizontal points are specified\n\n      if ((!horizontalPoints || !horizontalPoints.length) && (0, _isFunction3.default)(horizontalCoordinatesGenerator)) {\n        horizontalPoints = horizontalCoordinatesGenerator({ yAxis: yAxis, width: chartWidth,\n          height: chartHeight, offset: offset });\n      }\n\n      // No vertical points are specified\n      if ((!verticalPoints || !verticalPoints.length) && (0, _isFunction3.default)(verticalCoordinatesGenerator)) {\n        verticalPoints = verticalCoordinatesGenerator({ xAxis: xAxis, width: chartWidth,\n          height: chartHeight, offset: offset });\n      }\n\n      return _react2.default.createElement(\n        'g',\n        { className: 'recharts-cartesian-grid' },\n        this.renderBackground(),\n        horizontal && this.renderHorizontal(horizontalPoints),\n        vertical && this.renderVertical(verticalPoints),\n        horizontal && this.renderHorizontalStripes(horizontalPoints),\n        vertical && this.renderVerticalStripes(verticalPoints)\n      );\n    }\n  }]);\n\n  return CartesianGrid;\n}(_react.Component), _class2.displayName = 'CartesianGrid', _class2.propTypes = _extends({}, _ReactUtils.PRESENTATION_ATTRIBUTES, {\n  x: _propTypes2.default.number,\n  y: _propTypes2.default.number,\n  width: _propTypes2.default.number,\n  height: _propTypes2.default.number,\n  horizontal: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.element, _propTypes2.default.func, _propTypes2.default.bool]),\n  vertical: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.element, _propTypes2.default.func, _propTypes2.default.bool]),\n  horizontalPoints: _propTypes2.default.arrayOf(_propTypes2.default.number),\n  verticalPoints: _propTypes2.default.arrayOf(_propTypes2.default.number),\n  horizontalCoordinatesGenerator: _propTypes2.default.func,\n  verticalCoordinatesGenerator: _propTypes2.default.func,\n  xAxis: _propTypes2.default.object,\n  yAxis: _propTypes2.default.object,\n  offset: _propTypes2.default.object,\n  chartWidth: _propTypes2.default.number,\n  chartHeight: _propTypes2.default.number,\n  verticalFill: _propTypes2.default.arrayOf(_propTypes2.default.string),\n  horizontalFill: _propTypes2.default.arrayOf(_propTypes2.default.string)\n}), _class2.defaultProps = {\n  horizontal: true,\n  vertical: true,\n  // The ordinates of horizontal grid lines\n  horizontalPoints: [],\n  // The abscissas of vertical grid lines\n  verticalPoints: [],\n\n  stroke: '#ccc',\n  fill: 'none',\n  // The fill of colors of grid lines\n  verticalFill: [],\n  horizontalFill: []\n}, _temp)) || _class;\n\nexports.default = CartesianGrid;"},"hash":"d10f34a71f802227defbe2a9bbaae731"}