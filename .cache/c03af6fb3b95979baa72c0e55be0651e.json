{"dependencies":[{"name":"./utils","loc":{"line":7,"column":21}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _utils = require('./utils');\n\n/**\n * 把错误的数据转正\n * strip(0.09999999999999998)=0.1\n * @param {Number} num       输入值\n * @param {Number} precision 精度\n * @return {Number} 数值\n */\nfunction strip(num) {\n  var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 12;\n\n  return +parseFloat(num.toPrecision(precision));\n}\n\n/**\n * 判断数据是否为浮点类型\n *\n * @param {Number} num 输入值\n * @return {Boolean} 是否是浮点类型\n */\n/**\n * @fileOverview 一些公用的运算方法\n * @author xile611\n * @date 2015-09-17\n */\nfunction isFloat(num) {\n  return (/^([+-]?)\\d*\\.\\d+$/.test(num)\n  );\n}\n\n/**\n * 获取数值的位数\n * 其中绝对值属于区间[0.1, 1)， 得到的值为0\n * 绝对值属于区间[0.01, 0.1)，得到的位数为 -1\n * 绝对值属于区间[0.001, 0.01)，得到的位数为 -2\n *\n * @param  {Number} value 数值\n * @return {Integer} 位数\n */\nfunction getDigitCount(value) {\n  var abs = Math.abs(value);\n  var result = void 0;\n\n  if (value === 0) {\n    result = 1;\n  } else {\n    result = Math.floor(Math.log(abs) / Math.log(10)) + 1;\n  }\n\n  return result;\n}\n/**\n * 计算数值的小数点后的位数\n * @param  {Number} a 数值，可能为整数，也可能为浮点数\n * @return {Integer}   位数\n */\nfunction getDecimalDigitCount(a) {\n  var str = a ? '' + a : '';\n\n  // scientific notation\n  if (str.indexOf('e') >= 0) {\n    return Math.abs(parseInt(str.slice(str.indexOf('e') + 1), 10));\n  }\n  var ary = str.split('.');\n\n  return ary.length > 1 ? ary[1].length : 0;\n}\n/**\n * 乘法运算，解决了js运算的精度问题\n * @param  {Number} a 被乘数\n * @param  {Number} b 乘数\n * @return {Number}   积\n */\nfunction multiply(a, b) {\n  var intA = parseInt(('' + a).replace('.', ''), 10);\n  var intB = parseInt(('' + b).replace('.', ''), 10);\n  var count = getDecimalDigitCount(a) + getDecimalDigitCount(b);\n\n  return intA * intB / Math.pow(10, count);\n}\n/**\n * 加法运算，解决了js运算的精度问题\n * @param  {Number} a 被加数\n * @param  {Number} b 加数\n * @return {Number}   和\n */\nfunction sum(a, b) {\n  var count = Math.max(getDecimalDigitCount(a), getDecimalDigitCount(b));\n\n  count = Math.pow(10, count);\n  return (multiply(a, count) + multiply(b, count)) / count;\n}\n/**\n * 减法运算，解决了js运算的精度问题\n * @param  {Number} a 被减数\n * @param  {Number} b 减数\n * @return {Number}   差\n */\nfunction minus(a, b) {\n  return sum(a, -b);\n}\n/**\n * 除法运算，解决了js运算的精度问题\n * @param  {Number} a 被除数\n * @param  {Number} b 除数\n * @return {Number}   结果\n */\nfunction divide(a, b) {\n  var ca = getDecimalDigitCount(a);\n  var cb = getDecimalDigitCount(b);\n  var intA = parseInt(('' + a).replace('.', ''), 10);\n  var intB = parseInt(('' + b).replace('.', ''), 10);\n\n  return intA / intB * Math.pow(10, cb - ca);\n}\n\nfunction modulo(a, b) {\n  var mod = Math.abs(b);\n\n  if (b <= 0) {\n    return a;\n  }\n\n  var cnt = Math.floor(a / mod);\n\n  return minus(a, multiply(mod, cnt));\n}\n\n/**\n * 按照固定的步长获取[start, end)这个区间的数据\n * 并且需要处理js计算精度的问题\n *\n * @param  {Number} start 起点\n * @param  {Number} end   终点，不包含该值\n * @param  {Number} step  步长\n * @return {Array}        若干数值\n */\nfunction rangeStep(start, end, step) {\n  var num = start;\n  var result = [];\n\n  while (num < end) {\n    result.push(num);\n\n    num = sum(num, step);\n  }\n\n  return result;\n}\n/**\n * 对数值进行线性插值\n *\n * @param  {Number} a  定义域的极点\n * @param  {Number} b  定义域的极点\n * @param  {Number} t  [0, 1]内的某个值\n * @return {Number}    定义域内的某个值\n */\nvar interpolateNumber = (0, _utils.curry)(function (a, b, t) {\n  var newA = +a;\n  var newB = +b;\n\n  return newA + t * (newB - newA);\n});\n/**\n * 线性插值的逆运算\n *\n * @param  {Number} a 定义域的极点\n * @param  {Number} b 定义域的极点\n * @param  {Number} x 可以认为是插值后的一个输出值\n * @return {Number}   当x在 a ~ b这个范围内时，返回值属于[0, 1]\n */\nvar uninterpolateNumber = (0, _utils.curry)(function (a, b, x) {\n  var diff = b - +a;\n\n  diff = diff || Infinity;\n\n  return (x - a) / diff;\n});\n/**\n * 线性插值的逆运算，并且有截断的操作\n *\n * @param  {Number} a 定义域的极点\n * @param  {Number} b 定义域的极点\n * @param  {Number} x 可以认为是插值后的一个输出值\n * @return {Number}   当x在 a ~ b这个区间内时，返回值属于[0, 1]，\n * 当x不在 a ~ b这个区间时，会截断到 a ~ b 这个区间\n */\nvar uninterpolateTruncation = (0, _utils.curry)(function (a, b, x) {\n  var diff = b - +a;\n\n  diff = diff || Infinity;\n\n  return Math.max(0, Math.min(1, (x - a) / diff));\n});\n\nexports.default = {\n  rangeStep: rangeStep,\n  isFloat: isFloat,\n  getDigitCount: getDigitCount,\n  getDecimalDigitCount: getDecimalDigitCount,\n\n  sum: sum,\n  minus: minus,\n  multiply: multiply,\n  divide: divide,\n  modulo: modulo,\n  strip: strip,\n\n  interpolateNumber: interpolateNumber,\n  uninterpolateNumber: uninterpolateNumber,\n  uninterpolateTruncation: uninterpolateTruncation\n};"},"hash":"6409c173b2639a07e407e11d5e963926"}