{"dependencies":[{"name":"react","loc":{"line":7,"column":21}},{"name":"prop-types","loc":{"line":11,"column":25}},{"name":"array-tree-filter","loc":{"line":15,"column":31}},{"name":"react-dom","loc":{"line":19,"column":24}}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _arrayTreeFilter = require('array-tree-filter');\n\nvar _arrayTreeFilter2 = _interopRequireDefault(_arrayTreeFilter);\n\nvar _reactDom = require('react-dom');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Menus = function (_React$Component) {\n  _inherits(Menus, _React$Component);\n\n  function Menus(props) {\n    _classCallCheck(this, Menus);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    _this.saveMenuItem = function (index) {\n      return function (node) {\n        _this.menuItems[index] = node;\n      };\n    };\n\n    _this.menuItems = {};\n    return _this;\n  }\n\n  Menus.prototype.componentDidMount = function componentDidMount() {\n    this.scrollActiveItemToView();\n  };\n\n  Menus.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (!prevProps.visible && this.props.visible) {\n      this.scrollActiveItemToView();\n    }\n  };\n\n  Menus.prototype.getOption = function getOption(option, menuIndex) {\n    var _props = this.props,\n        prefixCls = _props.prefixCls,\n        expandTrigger = _props.expandTrigger;\n\n    var onSelect = this.props.onSelect.bind(this, option, menuIndex);\n    var expandProps = {\n      onClick: onSelect\n    };\n    var menuItemCls = prefixCls + '-menu-item';\n    var hasChildren = option.children && option.children.length > 0;\n    if (hasChildren || option.isLeaf === false) {\n      menuItemCls += ' ' + prefixCls + '-menu-item-expand';\n    }\n    if (expandTrigger === 'hover' && hasChildren) {\n      expandProps = {\n        onMouseEnter: this.delayOnSelect.bind(this, onSelect),\n        onMouseLeave: this.delayOnSelect.bind(this),\n        onClick: onSelect\n      };\n    }\n    if (this.isActiveOption(option, menuIndex)) {\n      menuItemCls += ' ' + prefixCls + '-menu-item-active';\n      expandProps.ref = this.saveMenuItem(menuIndex);\n    }\n    if (option.disabled) {\n      menuItemCls += ' ' + prefixCls + '-menu-item-disabled';\n    }\n    if (option.loading) {\n      menuItemCls += ' ' + prefixCls + '-menu-item-loading';\n    }\n    var title = '';\n    if (option.title) {\n      title = option.title;\n    } else if (typeof option.label === 'string') {\n      title = option.label;\n    }\n    return _react2['default'].createElement(\n      'li',\n      _extends({\n        key: option.value,\n        className: menuItemCls,\n        title: title\n      }, expandProps),\n      option.label\n    );\n  };\n\n  Menus.prototype.getActiveOptions = function getActiveOptions(values) {\n    var activeValue = values || this.props.activeValue;\n    var options = this.props.options;\n    return (0, _arrayTreeFilter2['default'])(options, function (o, level) {\n      return o.value === activeValue[level];\n    });\n  };\n\n  Menus.prototype.getShowOptions = function getShowOptions() {\n    var options = this.props.options;\n\n    var result = this.getActiveOptions().map(function (activeOption) {\n      return activeOption.children;\n    }).filter(function (activeOption) {\n      return !!activeOption;\n    });\n    result.unshift(options);\n    return result;\n  };\n\n  Menus.prototype.delayOnSelect = function delayOnSelect(onSelect) {\n    var _this2 = this;\n\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (this.delayTimer) {\n      clearTimeout(this.delayTimer);\n      this.delayTimer = null;\n    }\n    if (typeof onSelect === 'function') {\n      this.delayTimer = setTimeout(function () {\n        onSelect(args);\n        _this2.delayTimer = null;\n      }, 150);\n    }\n  };\n\n  Menus.prototype.scrollActiveItemToView = function scrollActiveItemToView() {\n    // scroll into view\n    var optionsLength = this.getShowOptions().length;\n    for (var i = 0; i < optionsLength; i++) {\n      var itemComponent = this.menuItems[i];\n      if (itemComponent) {\n        var target = (0, _reactDom.findDOMNode)(itemComponent);\n        target.parentNode.scrollTop = target.offsetTop;\n      }\n    }\n  };\n\n  Menus.prototype.isActiveOption = function isActiveOption(option, menuIndex) {\n    var _props$activeValue = this.props.activeValue,\n        activeValue = _props$activeValue === undefined ? [] : _props$activeValue;\n\n    return activeValue[menuIndex] === option.value;\n  };\n\n  Menus.prototype.render = function render() {\n    var _this3 = this;\n\n    var _props2 = this.props,\n        prefixCls = _props2.prefixCls,\n        dropdownMenuColumnStyle = _props2.dropdownMenuColumnStyle;\n\n    return _react2['default'].createElement(\n      'div',\n      null,\n      this.getShowOptions().map(function (options, menuIndex) {\n        return _react2['default'].createElement(\n          'ul',\n          { className: prefixCls + '-menu', key: menuIndex, style: dropdownMenuColumnStyle },\n          options.map(function (option) {\n            return _this3.getOption(option, menuIndex);\n          })\n        );\n      })\n    );\n  };\n\n  return Menus;\n}(_react2['default'].Component);\n\nMenus.defaultProps = {\n  options: [],\n  value: [],\n  activeValue: [],\n  onSelect: function onSelect() {},\n\n  prefixCls: 'rc-cascader-menus',\n  visible: false,\n  expandTrigger: 'click'\n};\n\nMenus.propTypes = {\n  value: _propTypes2['default'].array,\n  activeValue: _propTypes2['default'].array,\n  options: _propTypes2['default'].array.isRequired,\n  prefixCls: _propTypes2['default'].string,\n  expandTrigger: _propTypes2['default'].string,\n  onSelect: _propTypes2['default'].func,\n  visible: _propTypes2['default'].bool,\n  dropdownMenuColumnStyle: _propTypes2['default'].object\n};\n\nexports['default'] = Menus;\nmodule.exports = exports['default'];"},"hash":"9a4be03eb5e6109b5af9d4e53c003b57"}