{"dependencies":[{"name":"lodash/isNil","loc":{"line":8,"column":22}},{"name":"./DataUtils","loc":{"line":14,"column":25}},{"name":"./ChartUtils","loc":{"line":16,"column":26}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.inRangeOfSector = exports.formatAngleOfSector = exports.getAngleOfPoint = exports.distanceBetweenPoints = exports.formatAxisMap = exports.getMaxRadius = exports.polarToCartesian = exports.radianToDegree = exports.degreeToRadian = exports.RADIAN = undefined;\n\nvar _isNil2 = require('lodash/isNil');\n\nvar _isNil3 = _interopRequireDefault(_isNil2);\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _DataUtils = require('./DataUtils');\n\nvar _ChartUtils = require('./ChartUtils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar RADIAN = exports.RADIAN = Math.PI / 180;\n\nvar degreeToRadian = exports.degreeToRadian = function degreeToRadian(angle) {\n  return angle * Math.PI / 180;\n};\n\nvar radianToDegree = exports.radianToDegree = function radianToDegree(angleInRadian) {\n  return angleInRadian * 180 / Math.PI;\n};\n\nvar polarToCartesian = exports.polarToCartesian = function polarToCartesian(cx, cy, radius, angle) {\n  return {\n    x: cx + Math.cos(-RADIAN * angle) * radius,\n    y: cy + Math.sin(-RADIAN * angle) * radius\n  };\n};\n\nvar getMaxRadius = exports.getMaxRadius = function getMaxRadius(width, height) {\n  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    top: 0, right: 0, bottom: 0, left: 0\n  };\n  return Math.min(Math.abs(width - (offset.left || 0) - (offset.right || 0)), Math.abs(height - (offset.top || 0) - (offset.bottom || 0))) / 2;\n};\n\n/**\n * Calculate the scale function, position, width, height of axes\n * @param  {Object} props     Latest props\n * @param  {Object} axisMap   The configuration of axes\n * @param  {Object} offset    The offset of main part in the svg element\n * @param  {Object} axisType  The type of axes, radius-axis or angle-axis\n * @param  {String} chartName The name of chart\n * @return {Object} Configuration\n */\nvar formatAxisMap = exports.formatAxisMap = function formatAxisMap(props, axisMap, offset, axisType, chartName) {\n  var width = props.width,\n      height = props.height;\n  var startAngle = props.startAngle,\n      endAngle = props.endAngle;\n\n  var cx = (0, _DataUtils.getPercentValue)(props.cx, width, width / 2);\n  var cy = (0, _DataUtils.getPercentValue)(props.cy, height, height / 2);\n  var maxRadius = getMaxRadius(width, height, offset);\n  var innerRadius = (0, _DataUtils.getPercentValue)(props.innerRadius, maxRadius, 0);\n  var outerRadius = (0, _DataUtils.getPercentValue)(props.outerRadius, maxRadius, maxRadius * 0.8);\n  var ids = Object.keys(axisMap);\n\n  return ids.reduce(function (result, id) {\n    var axis = axisMap[id];\n    var domain = axis.domain,\n        reversed = axis.reversed;\n\n    var range = void 0;\n\n    if ((0, _isNil3.default)(axis.range)) {\n      if (axisType === 'angleAxis') {\n        range = [startAngle, endAngle];\n      } else if (axisType === 'radiusAxis') {\n        range = [innerRadius, outerRadius];\n      }\n\n      if (reversed) {\n        range = [range[1], range[0]];\n      }\n    } else {\n      range = axis.range;\n      startAngle = range[0];\n      endAngle = range[1];\n    }\n\n    var _parseScale = (0, _ChartUtils.parseScale)(axis, chartName),\n        realScaleType = _parseScale.realScaleType,\n        scale = _parseScale.scale;\n\n    scale.domain(domain).range(range);\n    (0, _ChartUtils.checkDomainOfScale)(scale);\n    var ticks = (0, _ChartUtils.getTicksOfScale)(scale, _extends({}, axis, { realScaleType: realScaleType }));\n\n    var finalAxis = _extends({}, axis, ticks, {\n      range: range,\n      radius: outerRadius,\n      realScaleType: realScaleType, scale: scale, cx: cx, cy: cy, innerRadius: innerRadius, outerRadius: outerRadius, startAngle: startAngle, endAngle: endAngle\n    });\n\n    return _extends({}, result, _defineProperty({}, id, finalAxis));\n  }, {});\n};\n\nvar distanceBetweenPoints = exports.distanceBetweenPoints = function distanceBetweenPoints(point, anotherPoint) {\n  var x1 = point.x,\n      y1 = point.y;\n  var x2 = anotherPoint.x,\n      y2 = anotherPoint.y;\n\n\n  return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n};\n\nvar getAngleOfPoint = exports.getAngleOfPoint = function getAngleOfPoint(_ref, _ref2) {\n  var x = _ref.x,\n      y = _ref.y;\n  var cx = _ref2.cx,\n      cy = _ref2.cy;\n\n  var radius = distanceBetweenPoints({ x: x, y: y }, { x: cx, y: cy });\n\n  if (radius <= 0) {\n    return { radius: radius };\n  }\n\n  var cos = (x - cx) / radius;\n  var angleInRadian = Math.acos(cos);\n\n  if (y > cy) {\n    angleInRadian = 2 * Math.PI - angleInRadian;\n  }\n\n  return { radius: radius, angle: radianToDegree(angleInRadian), angleInRadian: angleInRadian };\n};\n\nvar formatAngleOfSector = exports.formatAngleOfSector = function formatAngleOfSector(_ref3) {\n  var startAngle = _ref3.startAngle,\n      endAngle = _ref3.endAngle;\n\n  var startCnt = Math.floor(startAngle / 360);\n  var endCnt = Math.floor(endAngle / 360);\n  var min = Math.min(startCnt, endCnt);\n\n  return {\n    startAngle: startAngle - min * 360,\n    endAngle: endAngle - min * 360\n  };\n};\n\nvar reverseFormatAngleOfSetor = function reverseFormatAngleOfSetor(angle, _ref4) {\n  var startAngle = _ref4.startAngle,\n      endAngle = _ref4.endAngle;\n\n  var startCnt = Math.floor(startAngle / 360);\n  var endCnt = Math.floor(endAngle / 360);\n  var min = Math.min(startCnt, endCnt);\n\n  return angle + min * 360;\n};\n\nvar inRangeOfSector = exports.inRangeOfSector = function inRangeOfSector(_ref5, sector) {\n  var x = _ref5.x,\n      y = _ref5.y;\n\n  var _getAngleOfPoint = getAngleOfPoint({ x: x, y: y }, sector),\n      radius = _getAngleOfPoint.radius,\n      angle = _getAngleOfPoint.angle;\n\n  var innerRadius = sector.innerRadius,\n      outerRadius = sector.outerRadius;\n\n\n  if (radius < innerRadius || radius > outerRadius) {\n    return false;\n  }\n\n  if (radius === 0) {\n    return true;\n  }\n\n  var _formatAngleOfSector = formatAngleOfSector(sector),\n      startAngle = _formatAngleOfSector.startAngle,\n      endAngle = _formatAngleOfSector.endAngle;\n\n  var formatAngle = angle;\n  var inRange = void 0;\n\n  if (startAngle <= endAngle) {\n    while (formatAngle > endAngle) {\n      formatAngle -= 360;\n    }\n    while (formatAngle < startAngle) {\n      formatAngle += 360;\n    }\n    inRange = formatAngle >= startAngle && formatAngle <= endAngle;\n  } else {\n    while (formatAngle > startAngle) {\n      formatAngle -= 360;\n    }\n    while (formatAngle < endAngle) {\n      formatAngle += 360;\n    }\n    inRange = formatAngle >= endAngle && formatAngle <= startAngle;\n  }\n\n  if (inRange) {\n    return _extends({}, sector, { radius: radius, angle: reverseFormatAngleOfSetor(formatAngle, sector) });\n  }\n\n  return null;\n};"},"hash":"b8778247b0465f923ed01d1923c03adb"}