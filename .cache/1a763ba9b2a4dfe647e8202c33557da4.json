{"dependencies":[{"name":"lodash/isEqual","loc":{"line":7,"column":24}},{"name":"lodash/isFunction","loc":{"line":11,"column":27}},{"name":"lodash/isNil","loc":{"line":15,"column":22}},{"name":"react","loc":{"line":28,"column":21}},{"name":"prop-types","loc":{"line":32,"column":25}},{"name":"react-smooth","loc":{"line":36,"column":27}},{"name":"classnames","loc":{"line":40,"column":26}},{"name":"../util/PureRender","loc":{"line":44,"column":26}},{"name":"../container/Layer","loc":{"line":48,"column":21}},{"name":"../component/LabelList","loc":{"line":52,"column":25}},{"name":"../util/ReactUtils","loc":{"line":56,"column":26}},{"name":"./ZAxis","loc":{"line":58,"column":21}},{"name":"../shape/Curve","loc":{"line":62,"column":21}},{"name":"../shape/Symbols","loc":{"line":66,"column":23}},{"name":"./ErrorBar","loc":{"line":70,"column":24}},{"name":"../component/Cell","loc":{"line":74,"column":20}},{"name":"../util/DataUtils","loc":{"line":78,"column":25}},{"name":"../util/ChartUtils","loc":{"line":80,"column":26}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _isEqual2 = require('lodash/isEqual');\n\nvar _isEqual3 = _interopRequireDefault(_isEqual2);\n\nvar _isFunction2 = require('lodash/isFunction');\n\nvar _isFunction3 = _interopRequireDefault(_isFunction2);\n\nvar _isNil2 = require('lodash/isNil');\n\nvar _isNil3 = _interopRequireDefault(_isNil2);\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _class2, _temp2; /**\n                              * @fileOverview Render a group of scatters\n                              */\n\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactSmooth = require('react-smooth');\n\nvar _reactSmooth2 = _interopRequireDefault(_reactSmooth);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _PureRender = require('../util/PureRender');\n\nvar _PureRender2 = _interopRequireDefault(_PureRender);\n\nvar _Layer = require('../container/Layer');\n\nvar _Layer2 = _interopRequireDefault(_Layer);\n\nvar _LabelList = require('../component/LabelList');\n\nvar _LabelList2 = _interopRequireDefault(_LabelList);\n\nvar _ReactUtils = require('../util/ReactUtils');\n\nvar _ZAxis = require('./ZAxis');\n\nvar _ZAxis2 = _interopRequireDefault(_ZAxis);\n\nvar _Curve = require('../shape/Curve');\n\nvar _Curve2 = _interopRequireDefault(_Curve);\n\nvar _Symbols = require('../shape/Symbols');\n\nvar _Symbols2 = _interopRequireDefault(_Symbols);\n\nvar _ErrorBar = require('./ErrorBar');\n\nvar _ErrorBar2 = _interopRequireDefault(_ErrorBar);\n\nvar _Cell = require('../component/Cell');\n\nvar _Cell2 = _interopRequireDefault(_Cell);\n\nvar _DataUtils = require('../util/DataUtils');\n\nvar _ChartUtils = require('../util/ChartUtils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Scatter = (0, _PureRender2.default)(_class = (_temp2 = _class2 = function (_Component) {\n  _inherits(Scatter, _Component);\n\n  function Scatter() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Scatter);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Scatter.__proto__ || Object.getPrototypeOf(Scatter)).call.apply(_ref, [this].concat(args))), _this), _this.state = { isAnimationFinished: false }, _this.cachePrevPoints = function (points) {\n      _this.setState({ prevPoints: points });\n    }, _this.handleAnimationEnd = function () {\n      _this.setState({ isAnimationFinished: true });\n    }, _this.handleAnimationStart = function () {\n      _this.setState({ isAnimationFinished: false });\n    }, _this.id = (0, _DataUtils.uniqueId)('recharts-scatter-'), _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  /**\n   * Compose the data of each group\n   * @param  {Object} xAxis   The configuration of x-axis\n   * @param  {Object} yAxis   The configuration of y-axis\n   * @param  {String} dataKey The unique key of a group\n   * @return {Array}  Composed data\n   */\n\n\n  _createClass(Scatter, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var _props = this.props,\n          animationId = _props.animationId,\n          points = _props.points;\n\n\n      if (nextProps.animationId !== animationId) {\n        this.cachePrevPoints(points);\n      }\n    }\n  }, {\n    key: 'renderSymbolItem',\n    value: function renderSymbolItem(option, props) {\n      var symbol = void 0;\n\n      if (_react2.default.isValidElement(option)) {\n        symbol = _react2.default.cloneElement(option, props);\n      } else if ((0, _isFunction3.default)(option)) {\n        symbol = option(props);\n      } else {\n        symbol = _react2.default.createElement(_Symbols2.default, _extends({}, props, { type: option }));\n      }\n\n      return symbol;\n    }\n  }, {\n    key: 'renderSymbolsStatically',\n    value: function renderSymbolsStatically(points) {\n      var _this2 = this;\n\n      var _props2 = this.props,\n          shape = _props2.shape,\n          activeShape = _props2.activeShape,\n          activeIndex = _props2.activeIndex;\n\n      var baseProps = (0, _ReactUtils.getPresentationAttributes)(this.props);\n\n      return points.map(function (entry, i) {\n        var props = _extends({ key: 'symbol-' + i }, baseProps, entry);\n\n        return _react2.default.createElement(\n          _Layer2.default,\n          _extends({\n            className: 'recharts-scatter-symbol'\n          }, (0, _ReactUtils.filterEventsOfChild)(_this2.props, entry, i), {\n            key: 'symbol-' + i\n          }),\n          _this2.renderSymbolItem(activeIndex === i ? activeShape : shape, props)\n        );\n      });\n    }\n  }, {\n    key: 'renderSymbolsWithAnimation',\n    value: function renderSymbolsWithAnimation() {\n      var _this3 = this;\n\n      var _props3 = this.props,\n          points = _props3.points,\n          isAnimationActive = _props3.isAnimationActive,\n          animationBegin = _props3.animationBegin,\n          animationDuration = _props3.animationDuration,\n          animationEasing = _props3.animationEasing,\n          animationId = _props3.animationId;\n      var prevPoints = this.state.prevPoints;\n\n\n      return _react2.default.createElement(\n        _reactSmooth2.default,\n        {\n          begin: animationBegin,\n          duration: animationDuration,\n          isActive: isAnimationActive,\n          easing: animationEasing,\n          from: { t: 0 },\n          to: { t: 1 },\n          key: 'pie-' + animationId,\n          onAnimationEnd: this.handleAnimationEnd,\n          onAnimationStart: this.handleAnimationStart\n        },\n        function (_ref2) {\n          var t = _ref2.t;\n\n          var stepData = points.map(function (entry, index) {\n            var prev = prevPoints && prevPoints[index];\n\n            if (prev) {\n              var interpolatorCx = (0, _DataUtils.interpolateNumber)(prev.cx, entry.cx);\n              var interpolatorCy = (0, _DataUtils.interpolateNumber)(prev.cy, entry.cy);\n              var interpolatorSize = (0, _DataUtils.interpolateNumber)(prev.size, entry.size);\n\n              return _extends({}, entry, {\n                cx: interpolatorCx(t),\n                cy: interpolatorCy(t),\n                size: interpolatorSize(t)\n              });\n            }\n\n            var interpolator = (0, _DataUtils.interpolateNumber)(0, entry.size);\n\n            return _extends({}, entry, { size: interpolator(t) });\n          });\n\n          return _react2.default.createElement(\n            _Layer2.default,\n            null,\n            _this3.renderSymbolsStatically(stepData)\n          );\n        }\n      );\n    }\n  }, {\n    key: 'renderSymbols',\n    value: function renderSymbols() {\n      var _props4 = this.props,\n          points = _props4.points,\n          isAnimationActive = _props4.isAnimationActive;\n      var prevPoints = this.state.prevPoints;\n\n\n      if (isAnimationActive && points && points.length && (!prevPoints || !(0, _isEqual3.default)(prevPoints, points))) {\n        return this.renderSymbolsWithAnimation();\n      }\n\n      return this.renderSymbolsStatically(points);\n    }\n  }, {\n    key: 'renderErrorBar',\n    value: function renderErrorBar() {\n      var isAnimationActive = this.props.isAnimationActive;\n\n      if (isAnimationActive && !this.state.isAnimationFinished) {\n        return null;\n      }\n\n      var _props5 = this.props,\n          points = _props5.points,\n          xAxis = _props5.xAxis,\n          yAxis = _props5.yAxis,\n          children = _props5.children;\n\n      var errorBarItems = (0, _ReactUtils.findAllByType)(children, _ErrorBar2.default);\n\n      if (!errorBarItems) {\n        return null;\n      }\n\n      function dataPointFormatterY(dataPoint, dataKey) {\n        return {\n          x: dataPoint.cx,\n          y: dataPoint.cy,\n          value: dataPoint.y,\n          errorVal: (0, _ChartUtils.getValueByDataKey)(dataPoint, dataKey)\n        };\n      }\n\n      function dataPointFormatterX(dataPoint, dataKey) {\n        return {\n          x: dataPoint.cx,\n          y: dataPoint.cy,\n          value: dataPoint.x,\n          errorVal: (0, _ChartUtils.getValueByDataKey)(dataPoint, dataKey)\n        };\n      }\n\n      return errorBarItems.map(function (item, i) {\n        var direction = item.props.direction;\n\n\n        return _react2.default.cloneElement(item, {\n          key: i,\n          data: points,\n          xAxis: xAxis,\n          yAxis: yAxis,\n          layout: direction === 'x' ? 'vertical' : 'horizontal',\n          dataPointFormatter: direction === 'x' ? dataPointFormatterX : dataPointFormatterY\n        });\n      });\n    }\n  }, {\n    key: 'renderLine',\n    value: function renderLine() {\n      var _props6 = this.props,\n          points = _props6.points,\n          line = _props6.line,\n          lineType = _props6.lineType,\n          lineJointType = _props6.lineJointType;\n\n      var scatterProps = (0, _ReactUtils.getPresentationAttributes)(this.props);\n      var customLineProps = (0, _ReactUtils.getPresentationAttributes)(line);\n      var linePoints = void 0,\n          lineItem = void 0;\n\n      if (lineType === 'joint') {\n        linePoints = points.map(function (entry) {\n          return { x: entry.cx, y: entry.cy };\n        });\n      } else if (lineType === 'fitting') {\n        var _getLinearRegression = (0, _DataUtils.getLinearRegression)(points),\n            xmin = _getLinearRegression.xmin,\n            xmax = _getLinearRegression.xmax,\n            a = _getLinearRegression.a,\n            b = _getLinearRegression.b;\n\n        var linearExp = function linearExp(x) {\n          return a * x + b;\n        };\n        linePoints = [{ x: xmin, y: linearExp(xmin) }, { x: xmax, y: linearExp(xmax) }];\n      }\n      var lineProps = _extends({}, scatterProps, {\n        fill: 'none',\n        stroke: scatterProps && scatterProps.fill\n      }, customLineProps, {\n        points: linePoints\n      });\n\n      if (_react2.default.isValidElement(line)) {\n        lineItem = _react2.default.cloneElement(line, lineProps);\n      } else if ((0, _isFunction3.default)(line)) {\n        lineItem = line(lineProps);\n      } else {\n        lineItem = _react2.default.createElement(_Curve2.default, _extends({}, lineProps, { type: lineJointType }));\n      }\n\n      return _react2.default.createElement(\n        _Layer2.default,\n        { className: 'recharts-scatter-line', key: 'recharts-scatter-line' },\n        lineItem\n      );\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props7 = this.props,\n          hide = _props7.hide,\n          points = _props7.points,\n          line = _props7.line,\n          className = _props7.className,\n          xAxis = _props7.xAxis,\n          yAxis = _props7.yAxis,\n          left = _props7.left,\n          top = _props7.top,\n          width = _props7.width,\n          height = _props7.height,\n          id = _props7.id;\n\n      if (hide || !points || !points.length) {\n        return null;\n      }\n      var _state = this.state,\n          isAnimationActive = _state.isAnimationActive,\n          isAnimationFinished = _state.isAnimationFinished;\n\n      var layerClass = (0, _classnames2.default)('recharts-scatter', className);\n      var needClip = xAxis && xAxis.allowDataOverflow || yAxis && yAxis.allowDataOverflow;\n      var clipPathId = (0, _isNil3.default)(id) ? this.id : id;\n\n      return _react2.default.createElement(\n        _Layer2.default,\n        {\n          className: layerClass,\n          clipPath: needClip ? 'url(#clipPath-' + clipPathId + ')' : null\n        },\n        needClip ? _react2.default.createElement(\n          'defs',\n          null,\n          _react2.default.createElement(\n            'clipPath',\n            { id: 'clipPath-' + clipPathId },\n            _react2.default.createElement('rect', { x: left, y: top, width: width, height: height })\n          )\n        ) : null,\n        line && this.renderLine(),\n        this.renderErrorBar(),\n        _react2.default.createElement(\n          _Layer2.default,\n          { key: 'recharts-scatter-symbols' },\n          this.renderSymbols()\n        ),\n        (!isAnimationActive || isAnimationFinished) && _LabelList2.default.renderCallByParent(this.props, points)\n      );\n    }\n  }]);\n\n  return Scatter;\n}(_react.Component), _class2.displayName = 'Scatter', _class2.propTypes = _extends({}, _ReactUtils.EVENT_ATTRIBUTES, _ReactUtils.PRESENTATION_ATTRIBUTES, {\n\n  xAxisId: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  yAxisId: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  zAxisId: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  line: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.object, _propTypes2.default.func, _propTypes2.default.element]),\n  lineType: _propTypes2.default.oneOf(['fitting', 'joint']),\n  lineJointType: _propTypes2.default.oneOfType([_propTypes2.default.oneOf(['basis', 'basisClosed', 'basisOpen', 'linear', 'linearClosed', 'natural', 'monotoneX', 'monotoneY', 'monotone', 'step', 'stepBefore', 'stepAfter']), _propTypes2.default.func]),\n  legendType: _propTypes2.default.oneOf(_ReactUtils.LEGEND_TYPES),\n  className: _propTypes2.default.string,\n  name: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n\n  activeIndex: _propTypes2.default.number,\n  activeShape: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func, _propTypes2.default.element]),\n  shape: _propTypes2.default.oneOfType([_propTypes2.default.oneOf(['circle', 'cross', 'diamond', 'square', 'star', 'triangle', 'wye']), _propTypes2.default.element, _propTypes2.default.func]),\n  points: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n    cx: _propTypes2.default.number,\n    cy: _propTypes2.default.number,\n    size: _propTypes2.default.number,\n    node: _propTypes2.default.shape({\n      x: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),\n      y: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),\n      z: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])\n    }),\n    payload: _propTypes2.default.any\n  })),\n  hide: _propTypes2.default.bool,\n\n  isAnimationActive: _propTypes2.default.bool,\n  animationId: _propTypes2.default.number,\n  animationBegin: _propTypes2.default.number,\n  animationDuration: _propTypes2.default.number,\n  animationEasing: _propTypes2.default.oneOf(['ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear'])\n}), _class2.defaultProps = {\n  xAxisId: 0,\n  yAxisId: 0,\n  zAxisId: 0,\n  legendType: 'circle',\n  lineType: 'joint',\n  lineJointType: 'linear',\n  data: [],\n  shape: 'circle',\n  hide: false,\n\n  isAnimationActive: !(0, _ReactUtils.isSsr)(),\n  animationBegin: 0,\n  animationDuration: 400,\n  animationEasing: 'linear'\n}, _class2.getComposedData = function (_ref3) {\n  var xAxis = _ref3.xAxis,\n      yAxis = _ref3.yAxis,\n      zAxis = _ref3.zAxis,\n      item = _ref3.item,\n      displayedData = _ref3.displayedData,\n      onItemMouseLeave = _ref3.onItemMouseLeave,\n      onItemMouseEnter = _ref3.onItemMouseEnter,\n      offset = _ref3.offset,\n      xAxisTicks = _ref3.xAxisTicks;\n\n  var cells = (0, _ReactUtils.findAllByType)(item.props.children, _Cell2.default);\n  var xAxisDataKey = (0, _isNil3.default)(xAxis.dataKey) ? item.props.dataKey : xAxis.dataKey;\n  var yAxisDataKey = (0, _isNil3.default)(yAxis.dataKey) ? item.props.dataKey : yAxis.dataKey;\n  var zAxisDataKey = zAxis && zAxis.dataKey;\n  var defaultRangeZ = zAxis ? zAxis.range : _ZAxis2.default.defaultProps.range;\n  var defaultZ = defaultRangeZ && defaultRangeZ[0];\n  var xBandSize = xAxis.scale.bandwidth ? xAxis.scale.bandwidth() : 0;\n  var yBandSize = yAxis.scale.bandwidth ? yAxis.scale.bandwidth() : 0;\n  var points = displayedData.map(function (entry, index) {\n    var x = entry[xAxisDataKey];\n    var y = entry[yAxisDataKey];\n    var z = !(0, _isNil3.default)(zAxisDataKey) && entry[zAxisDataKey] || '-';\n    var tooltipPayload = [{ name: xAxis.name || xAxis.dataKey, unit: xAxis.unit || '', value: x, payload: entry }, { name: yAxis.name || yAxis.dataKey, unit: yAxis.unit || '', value: y, payload: entry }];\n\n    if (z !== '-') {\n      tooltipPayload.push({\n        name: zAxis.name || zAxis.dataKey, unit: zAxis.unit || '', value: z, payload: entry\n      });\n    }\n    var cx = (0, _ChartUtils.getCateCoordinateOfLine)({\n      axis: xAxis, ticks: xAxisTicks, bandSize: xBandSize, entry: entry, index: index\n    });\n    var cy = (0, _ChartUtils.getCateCoordinateOfLine)({\n      axis: yAxis, ticks: xAxisTicks, bandSize: yBandSize, entry: entry, index: index\n    });\n    var size = z !== '-' ? zAxis.scale(z) : defaultZ;\n    var radius = Math.sqrt(Math.max(size, 0) / Math.PI);\n\n    return _extends({}, entry, { cx: cx, cy: cy,\n      x: cx - radius,\n      y: cy - radius,\n      xAxis: xAxis, yAxis: yAxis, zAxis: zAxis,\n      width: 2 * radius,\n      height: 2 * radius,\n      size: size,\n      node: { x: x, y: y, z: z },\n      tooltipPayload: tooltipPayload,\n      tooltipPosition: { x: cx, y: cy },\n      payload: entry\n    }, cells && cells[index] && cells[index].props);\n  });\n\n  return _extends({\n    onMouseLeave: onItemMouseLeave,\n    onMouseEnter: onItemMouseEnter,\n    points: points\n  }, offset);\n}, _temp2)) || _class;\n\nexports.default = Scatter;"},"hash":"96bb0718f41e5e1f3601ec57564fe662"}