{"dependencies":[{"name":"lodash/get","loc":{"line":8,"column":20}},{"name":"lodash/isArray","loc":{"line":12,"column":24}},{"name":"lodash/isNaN","loc":{"line":16,"column":22}},{"name":"lodash/isNumber","loc":{"line":20,"column":25}},{"name":"lodash/isString","loc":{"line":24,"column":25}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLinearRegression = exports.findEntryInArray = exports.interpolateNumber = exports.hasDuplicate = exports.getAnyElementOfObject = exports.getPercentValue = exports.uniqueId = exports.isNumOrStr = exports.isNumber = exports.isPercent = exports.mathSign = undefined;\n\nvar _get2 = require('lodash/get');\n\nvar _get3 = _interopRequireDefault(_get2);\n\nvar _isArray2 = require('lodash/isArray');\n\nvar _isArray3 = _interopRequireDefault(_isArray2);\n\nvar _isNaN2 = require('lodash/isNaN');\n\nvar _isNaN3 = _interopRequireDefault(_isNaN2);\n\nvar _isNumber2 = require('lodash/isNumber');\n\nvar _isNumber3 = _interopRequireDefault(_isNumber2);\n\nvar _isString2 = require('lodash/isString');\n\nvar _isString3 = _interopRequireDefault(_isString2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar mathSign = exports.mathSign = function mathSign(value) {\n  if (value === 0) {\n    return 0;\n  }\n  if (value > 0) {\n    return 1;\n  }\n\n  return -1;\n};\n\nvar isPercent = exports.isPercent = function isPercent(value) {\n  return (0, _isString3.default)(value) && value.indexOf('%') === value.length - 1;\n};\n\nvar isNumber = exports.isNumber = function isNumber(value) {\n  return (0, _isNumber3.default)(value) && !(0, _isNaN3.default)(value);\n};\n\nvar isNumOrStr = exports.isNumOrStr = function isNumOrStr(value) {\n  return isNumber(value) || (0, _isString3.default)(value);\n};\n\nvar idCounter = 0;\nvar uniqueId = exports.uniqueId = function uniqueId(prefix) {\n  var id = ++idCounter;\n\n  return '' + (prefix || '') + id;\n};\n/**\n * Get percent value of a total value\n * @param {Number|String} percent A percent\n * @param {Number} totalValue     Total value\n * @param {NUmber} defaultValue   The value returned when percent is undefined or invalid\n * @param {Boolean} validate      If set to be true, the result will be validated\n * @return {Number} value\n */\nvar getPercentValue = exports.getPercentValue = function getPercentValue(percent, totalValue) {\n  var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var validate = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  if (!isNumber(percent) && !(0, _isString3.default)(percent)) {\n    return defaultValue;\n  }\n\n  var value = void 0;\n\n  if (isPercent(percent)) {\n    var index = percent.indexOf('%');\n    value = totalValue * parseFloat(percent.slice(0, index)) / 100;\n  } else {\n    value = +percent;\n  }\n\n  if ((0, _isNaN3.default)(value)) {\n    value = defaultValue;\n  }\n\n  if (validate && value > totalValue) {\n    value = totalValue;\n  }\n\n  return value;\n};\n\nvar getAnyElementOfObject = exports.getAnyElementOfObject = function getAnyElementOfObject(obj) {\n  if (!obj) {\n    return null;\n  }\n\n  var keys = Object.keys(obj);\n\n  if (keys && keys.length) {\n    return obj[keys[0]];\n  }\n\n  return null;\n};\n\nvar hasDuplicate = exports.hasDuplicate = function hasDuplicate(ary) {\n  if (!(0, _isArray3.default)(ary)) {\n    return false;\n  }\n\n  var len = ary.length;\n  var cache = {};\n\n  for (var i = 0; i < len; i++) {\n    if (!cache[ary[i]]) {\n      cache[ary[i]] = true;\n    } else {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nvar interpolateNumber = exports.interpolateNumber = function interpolateNumber(numberA, numberB) {\n  if (isNumber(numberA) && isNumber(numberB)) {\n    return function (t) {\n      return numberA + t * (numberB - numberA);\n    };\n  }\n\n  return function () {\n    return numberB;\n  };\n};\n\nvar findEntryInArray = exports.findEntryInArray = function findEntryInArray(ary, specifiedKey, specifiedValue) {\n  if (!ary || !ary.length) {\n    return null;\n  }\n\n  return ary.find(function (entry) {\n    return entry && (0, _get3.default)(entry, specifiedKey) === specifiedValue;\n  });\n};\n\n/**\n * The least square linear regression\n * @param {Array} data The array of points\n * @returns {Object} The domain of x, and the parameter of linear function\n */\nvar getLinearRegression = exports.getLinearRegression = function getLinearRegression(data) {\n  if (!data || !data.length) {\n    return null;\n  }\n\n  var len = data.length;\n  var xsum = 0;\n  var ysum = 0;\n  var xysum = 0;\n  var xxsum = 0;\n  var xmin = Infinity;\n  var xmax = -Infinity;\n\n  for (var i = 0; i < len; i++) {\n    xsum += data[i].cx;\n    ysum += data[i].cy;\n    xysum += data[i].cx * data[i].cy;\n    xxsum += data[i].cx * data[i].cx;\n    xmin = Math.min(xmin, data[i].cx);\n    xmax = Math.max(xmax, data[i].cx);\n  }\n\n  var a = len * xxsum !== xsum * xsum ? (len * xysum - xsum * ysum) / (len * xxsum - xsum * xsum) : 0;\n\n  return {\n    xmin: xmin,\n    xmax: xmax,\n    a: a,\n    b: (ysum - a * xsum) / len\n  };\n};"},"hash":"4ee840e25147fde0ceb7b43bf9697c03"}