{"dependencies":[{"name":"lodash/isEqual","loc":{"line":7,"column":24}},{"name":"lodash/isFunction","loc":{"line":11,"column":27}},{"name":"lodash/isNil","loc":{"line":15,"column":22}},{"name":"react","loc":{"line":28,"column":21}},{"name":"prop-types","loc":{"line":32,"column":25}},{"name":"react-smooth","loc":{"line":36,"column":27}},{"name":"classnames","loc":{"line":40,"column":26}},{"name":"../util/PureRender","loc":{"line":44,"column":26}},{"name":"../shape/Curve","loc":{"line":48,"column":21}},{"name":"../shape/Dot","loc":{"line":52,"column":19}},{"name":"../container/Layer","loc":{"line":56,"column":21}},{"name":"../component/LabelList","loc":{"line":60,"column":25}},{"name":"./ErrorBar","loc":{"line":64,"column":24}},{"name":"../util/DataUtils","loc":{"line":68,"column":25}},{"name":"../util/ReactUtils","loc":{"line":70,"column":26}},{"name":"../util/ChartUtils","loc":{"line":72,"column":26}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _isEqual2 = require('lodash/isEqual');\n\nvar _isEqual3 = _interopRequireDefault(_isEqual2);\n\nvar _isFunction2 = require('lodash/isFunction');\n\nvar _isFunction3 = _interopRequireDefault(_isFunction2);\n\nvar _isNil2 = require('lodash/isNil');\n\nvar _isNil3 = _interopRequireDefault(_isNil2);\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _class2, _temp2; /**\n                              * @fileOverview Line\n                              */\n\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactSmooth = require('react-smooth');\n\nvar _reactSmooth2 = _interopRequireDefault(_reactSmooth);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _PureRender = require('../util/PureRender');\n\nvar _PureRender2 = _interopRequireDefault(_PureRender);\n\nvar _Curve = require('../shape/Curve');\n\nvar _Curve2 = _interopRequireDefault(_Curve);\n\nvar _Dot = require('../shape/Dot');\n\nvar _Dot2 = _interopRequireDefault(_Dot);\n\nvar _Layer = require('../container/Layer');\n\nvar _Layer2 = _interopRequireDefault(_Layer);\n\nvar _LabelList = require('../component/LabelList');\n\nvar _LabelList2 = _interopRequireDefault(_LabelList);\n\nvar _ErrorBar = require('./ErrorBar');\n\nvar _ErrorBar2 = _interopRequireDefault(_ErrorBar);\n\nvar _DataUtils = require('../util/DataUtils');\n\nvar _ReactUtils = require('../util/ReactUtils');\n\nvar _ChartUtils = require('../util/ChartUtils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Line = (0, _PureRender2.default)(_class = (_temp2 = _class2 = function (_Component) {\n  _inherits(Line, _Component);\n\n  function Line() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Line);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Line.__proto__ || Object.getPrototypeOf(Line)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      isAnimationFinished: true,\n      totalLength: 0\n    }, _this.id = (0, _DataUtils.uniqueId)('recharts-line-'), _this.cachePrevData = function (points) {\n      _this.setState({ prevPoints: points });\n    }, _this.pathRef = function (node) {\n      _this.mainCurve = node;\n    }, _this.handleAnimationEnd = function () {\n      _this.setState({ isAnimationFinished: true });\n      _this.props.onAnimationEnd();\n    }, _this.handleAnimationStart = function () {\n      _this.setState({ isAnimationFinished: false });\n      _this.props.onAnimationStart();\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  /**\n   * Compose the data of each group\n   * @param {Object} props The props from the component\n   * @param  {Object} xAxis   The configuration of x-axis\n   * @param  {Object} yAxis   The configuration of y-axis\n   * @param  {String} dataKey The unique key of a group\n   * @return {Array}  Composed data\n   */\n\n\n  _createClass(Line, [{\n    key: 'componentDidMount',\n\n\n    /* eslint-disable  react/no-did-mount-set-state */\n    value: function componentDidMount() {\n      if (!this.props.isAnimationActive) {\n        return;\n      }\n\n      var totalLength = this.getTotalLength();\n      this.setState({ totalLength: totalLength });\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var _props = this.props,\n          animationId = _props.animationId,\n          points = _props.points;\n\n\n      if (nextProps.animationId !== animationId) {\n        this.cachePrevData(points);\n      }\n    }\n  }, {\n    key: 'getTotalLength',\n    value: function getTotalLength() {\n      var curveDom = this.mainCurve;\n\n      try {\n        return curveDom && curveDom.getTotalLength && curveDom.getTotalLength() || 0;\n      } catch (err) {\n        return 0;\n      }\n    }\n  }, {\n    key: 'getStrokeDasharray',\n    value: function getStrokeDasharray(length, totalLength, lines) {\n      var lineLength = lines.reduce(function (pre, next) {\n        return pre + next;\n      });\n\n      var count = parseInt(length / lineLength, 10);\n      var remainLength = length % lineLength;\n      var restLength = totalLength - length;\n\n      var remainLines = [];\n      for (var i = 0, sum = 0;; sum += lines[i], ++i) {\n        if (sum + lines[i] > remainLength) {\n          remainLines = [].concat(_toConsumableArray(lines.slice(0, i)), [remainLength - sum]);\n          break;\n        }\n      }\n\n      var emptyLines = remainLines.length % 2 === 0 ? [0, restLength] : [restLength];\n\n      return [].concat(_toConsumableArray(this.repeat(lines, count)), _toConsumableArray(remainLines), emptyLines).map(function (line) {\n        return line + 'px';\n      }).join(', ');\n    }\n  }, {\n    key: 'repeat',\n    value: function repeat(lines, count) {\n      var linesUnit = lines.length % 2 !== 0 ? [].concat(_toConsumableArray(lines), [0]) : lines;\n      var result = [];\n\n      for (var i = 0; i < count; ++i) {\n        result = [].concat(_toConsumableArray(result), _toConsumableArray(linesUnit));\n      }\n\n      return result;\n    }\n  }, {\n    key: 'renderErrorBar',\n    value: function renderErrorBar() {\n      if (this.props.isAnimationActive && !this.state.isAnimationFinished) {\n        return null;\n      }\n\n      var _props2 = this.props,\n          points = _props2.points,\n          xAxis = _props2.xAxis,\n          yAxis = _props2.yAxis,\n          layout = _props2.layout,\n          children = _props2.children;\n\n      var errorBarItems = (0, _ReactUtils.findAllByType)(children, _ErrorBar2.default);\n\n      if (!errorBarItems) {\n        return null;\n      }\n\n      function dataPointFormatter(dataPoint, dataKey) {\n        return {\n          x: dataPoint.x,\n          y: dataPoint.y,\n          value: dataPoint.value,\n          errorVal: (0, _ChartUtils.getValueByDataKey)(dataPoint.payload, dataKey)\n        };\n      }\n\n      return errorBarItems.map(function (item, i) {\n        return _react2.default.cloneElement(item, {\n          key: i,\n          data: points,\n          xAxis: xAxis,\n          yAxis: yAxis,\n          layout: layout,\n          dataPointFormatter: dataPointFormatter\n        });\n      });\n    }\n  }, {\n    key: 'renderDotItem',\n    value: function renderDotItem(option, props) {\n      var dotItem = void 0;\n\n      if (_react2.default.isValidElement(option)) {\n        dotItem = _react2.default.cloneElement(option, props);\n      } else if ((0, _isFunction3.default)(option)) {\n        dotItem = option(props);\n      } else {\n        var className = (0, _classnames2.default)('recharts-line-dot', option ? option.className : '');\n        dotItem = _react2.default.createElement(_Dot2.default, _extends({}, props, { className: className }));\n      }\n\n      return dotItem;\n    }\n  }, {\n    key: 'renderDots',\n    value: function renderDots() {\n      var _this2 = this;\n\n      var isAnimationActive = this.props.isAnimationActive;\n\n\n      if (isAnimationActive && !this.state.isAnimationFinished) {\n        return null;\n      }\n      var _props3 = this.props,\n          dot = _props3.dot,\n          points = _props3.points,\n          dataKey = _props3.dataKey;\n\n      var lineProps = (0, _ReactUtils.getPresentationAttributes)(this.props);\n      var customDotProps = (0, _ReactUtils.getPresentationAttributes)(dot);\n      var dotEvents = (0, _ReactUtils.filterEventAttributes)(dot);\n      var dots = points.map(function (entry, i) {\n        var dotProps = _extends({\n          key: 'dot-' + i,\n          r: 3\n        }, lineProps, customDotProps, dotEvents, {\n          value: entry.value,\n          dataKey: dataKey,\n          cx: entry.x, cy: entry.y, index: i, payload: entry.payload\n        });\n\n        return _this2.renderDotItem(dot, dotProps);\n      });\n\n      return _react2.default.createElement(\n        _Layer2.default,\n        { className: 'recharts-line-dots', key: 'dots' },\n        dots\n      );\n    }\n  }, {\n    key: 'renderCurveStatically',\n    value: function renderCurveStatically(points, needClip, props) {\n      var _props4 = this.props,\n          type = _props4.type,\n          layout = _props4.layout,\n          connectNulls = _props4.connectNulls,\n          id = _props4.id;\n\n      var clipPathId = (0, _isNil3.default)(id) ? this.id : id;\n      var curveProps = _extends({}, (0, _ReactUtils.getPresentationAttributes)(this.props), (0, _ReactUtils.filterEventAttributes)(this.props), {\n        fill: 'none',\n        className: 'recharts-line-curve',\n        clipPath: needClip ? 'url(#clipPath-' + clipPathId + ')' : null,\n        points: points\n      }, props, {\n        type: type, layout: layout, connectNulls: connectNulls\n      });\n\n      return _react2.default.createElement(_Curve2.default, _extends({}, curveProps, { pathRef: this.pathRef }));\n    }\n  }, {\n    key: 'renderCurveWithAnimation',\n    value: function renderCurveWithAnimation(needClip) {\n      var _this3 = this;\n\n      var _props5 = this.props,\n          points = _props5.points,\n          strokeDasharray = _props5.strokeDasharray,\n          isAnimationActive = _props5.isAnimationActive,\n          animationBegin = _props5.animationBegin,\n          animationDuration = _props5.animationDuration,\n          animationEasing = _props5.animationEasing,\n          animationId = _props5.animationId,\n          width = _props5.width,\n          height = _props5.height,\n          other = _objectWithoutProperties(_props5, ['points', 'strokeDasharray', 'isAnimationActive', 'animationBegin', 'animationDuration', 'animationEasing', 'animationId', 'width', 'height']);\n\n      var _state = this.state,\n          prevPoints = _state.prevPoints,\n          totalLength = _state.totalLength;\n\n\n      return _react2.default.createElement(\n        _reactSmooth2.default,\n        {\n          begin: animationBegin,\n          duration: animationDuration,\n          isActive: isAnimationActive,\n          easing: animationEasing,\n          from: { t: 0 },\n          to: { t: 1 },\n          key: 'line-' + animationId,\n          onAnimationEnd: this.handleAnimationEnd,\n          onAnimationStart: this.handleAnimationStart\n        },\n        function (_ref2) {\n          var t = _ref2.t;\n\n          if (prevPoints) {\n            var stepData = points.map(function (entry, index) {\n              if (prevPoints[index]) {\n                var prev = prevPoints[index];\n                var _interpolatorX = (0, _DataUtils.interpolateNumber)(prev.x, entry.x);\n                var _interpolatorY = (0, _DataUtils.interpolateNumber)(prev.y, entry.y);\n\n                return _extends({}, entry, { x: _interpolatorX(t), y: _interpolatorY(t) });\n              }\n\n              // magic number of faking previous x and y location\n              var interpolatorX = (0, _DataUtils.interpolateNumber)(width * 2, entry.x);\n              var interpolatorY = (0, _DataUtils.interpolateNumber)(height / 2, entry.y);\n              return _extends({}, entry, { x: interpolatorX(t), y: interpolatorY(t) });\n            });\n            return _this3.renderCurveStatically(stepData, needClip);\n          }\n          var interpolator = (0, _DataUtils.interpolateNumber)(0, totalLength);\n          var curLength = interpolator(t);\n          var currentStrokeDasharray = void 0;\n\n          if (strokeDasharray) {\n            var lines = strokeDasharray.split(/[,\\s]+/gim).map(function (num) {\n              return parseFloat(num);\n            });\n            currentStrokeDasharray = _this3.getStrokeDasharray(curLength, totalLength, lines);\n          } else {\n            currentStrokeDasharray = curLength + 'px ' + (totalLength - curLength) + 'px';\n          }\n\n          return _this3.renderCurveStatically(points, needClip, {\n            strokeDasharray: currentStrokeDasharray\n          });\n        }\n      );\n    }\n  }, {\n    key: 'renderCurve',\n    value: function renderCurve(needClip) {\n      var _props6 = this.props,\n          points = _props6.points,\n          isAnimationActive = _props6.isAnimationActive;\n      var _state2 = this.state,\n          prevPoints = _state2.prevPoints,\n          totalLength = _state2.totalLength;\n\n\n      if (isAnimationActive && points && points.length && (!prevPoints && totalLength > 0 || !(0, _isEqual3.default)(prevPoints, points))) {\n        return this.renderCurveWithAnimation(needClip);\n      }\n\n      return this.renderCurveStatically(points, needClip);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props7 = this.props,\n          hide = _props7.hide,\n          dot = _props7.dot,\n          points = _props7.points,\n          className = _props7.className,\n          xAxis = _props7.xAxis,\n          yAxis = _props7.yAxis,\n          top = _props7.top,\n          left = _props7.left,\n          width = _props7.width,\n          height = _props7.height,\n          isAnimationActive = _props7.isAnimationActive,\n          id = _props7.id;\n\n\n      if (hide || !points || !points.length) {\n        return null;\n      }\n\n      var isAnimationFinished = this.state.isAnimationFinished;\n\n      var hasSinglePoint = points.length === 1;\n      var layerClass = (0, _classnames2.default)('recharts-line', className);\n      var needClip = xAxis && xAxis.allowDataOverflow || yAxis && yAxis.allowDataOverflow;\n      var clipPathId = (0, _isNil3.default)(id) ? this.id : id;\n\n      return _react2.default.createElement(\n        _Layer2.default,\n        { className: layerClass },\n        needClip ? _react2.default.createElement(\n          'defs',\n          null,\n          _react2.default.createElement(\n            'clipPath',\n            { id: 'clipPath-' + clipPathId },\n            _react2.default.createElement('rect', { x: left, y: top, width: width, height: height })\n          )\n        ) : null,\n        !hasSinglePoint && this.renderCurve(needClip),\n        this.renderErrorBar(),\n        (hasSinglePoint || dot) && this.renderDots(),\n        (!isAnimationActive || isAnimationFinished) && _LabelList2.default.renderCallByParent(this.props, points)\n      );\n    }\n  }]);\n\n  return Line;\n}(_react.Component), _class2.displayName = 'Line', _class2.propTypes = _extends({}, _ReactUtils.PRESENTATION_ATTRIBUTES, _ReactUtils.EVENT_ATTRIBUTES, {\n  className: _propTypes2.default.string,\n  type: _propTypes2.default.oneOfType([_propTypes2.default.oneOf(['basis', 'basisClosed', 'basisOpen', 'linear', 'linearClosed', 'natural', 'monotoneX', 'monotoneY', 'monotone', 'step', 'stepBefore', 'stepAfter']), _propTypes2.default.func]),\n  unit: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  name: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  yAxisId: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  xAxisId: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  yAxis: _propTypes2.default.object,\n  xAxis: _propTypes2.default.object,\n  legendType: _propTypes2.default.oneOf(_ReactUtils.LEGEND_TYPES),\n  layout: _propTypes2.default.oneOf(['horizontal', 'vertical']),\n  connectNulls: _propTypes2.default.bool,\n  hide: _propTypes2.default.bool,\n\n  // whether have dot in line\n  activeDot: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.element, _propTypes2.default.func, _propTypes2.default.bool]),\n  dot: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.element, _propTypes2.default.func, _propTypes2.default.bool]),\n\n  top: _propTypes2.default.number,\n  left: _propTypes2.default.number,\n  width: _propTypes2.default.number,\n  height: _propTypes2.default.number,\n  points: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n    x: _propTypes2.default.number,\n    y: _propTypes2.default.number,\n    value: _propTypes2.default.value\n  })),\n  onAnimationStart: _propTypes2.default.func,\n  onAnimationEnd: _propTypes2.default.func,\n\n  isAnimationActive: _propTypes2.default.bool,\n  animationBegin: _propTypes2.default.number,\n  animationDuration: _propTypes2.default.number,\n  animationEasing: _propTypes2.default.oneOf(['ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear']),\n  animationId: _propTypes2.default.number,\n  id: _propTypes2.default.string\n}), _class2.defaultProps = {\n  xAxisId: 0,\n  yAxisId: 0,\n  connectNulls: false,\n  activeDot: true,\n  dot: true,\n  legendType: 'line',\n  stroke: '#3182bd',\n  strokeWidth: 1,\n  fill: '#fff',\n  points: [],\n  isAnimationActive: !(0, _ReactUtils.isSsr)(),\n  animationBegin: 0,\n  animationDuration: 1500,\n  animationEasing: 'ease',\n  hide: false,\n\n  onAnimationStart: function onAnimationStart() {},\n  onAnimationEnd: function onAnimationEnd() {}\n}, _class2.getComposedData = function (_ref3) {\n  var props = _ref3.props,\n      xAxis = _ref3.xAxis,\n      yAxis = _ref3.yAxis,\n      xAxisTicks = _ref3.xAxisTicks,\n      yAxisTicks = _ref3.yAxisTicks,\n      dataKey = _ref3.dataKey,\n      bandSize = _ref3.bandSize,\n      displayedData = _ref3.displayedData,\n      offset = _ref3.offset;\n  var layout = props.layout;\n\n\n  var points = displayedData.map(function (entry, index) {\n    var value = (0, _ChartUtils.getValueByDataKey)(entry, dataKey);\n\n    if (layout === 'horizontal') {\n      return {\n        x: (0, _ChartUtils.getCateCoordinateOfLine)({ axis: xAxis, ticks: xAxisTicks, bandSize: bandSize, entry: entry, index: index }),\n        y: (0, _isNil3.default)(value) ? null : yAxis.scale(value),\n        value: value,\n        payload: entry\n      };\n    }\n\n    return {\n      x: (0, _isNil3.default)(value) ? null : xAxis.scale(value),\n      y: (0, _ChartUtils.getCateCoordinateOfLine)({ axis: yAxis, ticks: yAxisTicks, bandSize: bandSize, entry: entry, index: index }),\n      value: value,\n      payload: entry\n    };\n  });\n\n  return _extends({ points: points, layout: layout }, offset);\n}, _temp2)) || _class;\n\nexports.default = Line;"},"hash":"9cfbe311529a9797fab3a5133fcb325c"}