{"dependencies":[{"name":"babel-runtime/helpers/defineProperty","loc":{"line":7,"column":31}},{"name":"babel-runtime/helpers/extends","loc":{"line":11,"column":24}},{"name":"babel-runtime/helpers/classCallCheck","loc":{"line":15,"column":31}},{"name":"babel-runtime/helpers/createClass","loc":{"line":19,"column":28}},{"name":"babel-runtime/helpers/possibleConstructorReturn","loc":{"line":23,"column":42}},{"name":"babel-runtime/helpers/inherits","loc":{"line":27,"column":25}},{"name":"react","loc":{"line":31,"column":21}},{"name":"react-dom","loc":{"line":35,"column":24}},{"name":"rc-menu","loc":{"line":37,"column":22}},{"name":"prop-types","loc":{"line":41,"column":25}},{"name":"classnames","loc":{"line":45,"column":26}},{"name":"../_util/openAnimation","loc":{"line":49,"column":29}},{"name":"../_util/warning","loc":{"line":53,"column":23}},{"name":"./SubMenu","loc":{"line":57,"column":23}},{"name":"./MenuItem","loc":{"line":61,"column":24}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar React = _interopRequireWildcard(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _rcMenu = require('rc-menu');\n\nvar _rcMenu2 = _interopRequireDefault(_rcMenu);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _openAnimation = require('../_util/openAnimation');\n\nvar _openAnimation2 = _interopRequireDefault(_openAnimation);\n\nvar _warning = require('../_util/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _SubMenu = require('./SubMenu');\n\nvar _SubMenu2 = _interopRequireDefault(_SubMenu);\n\nvar _MenuItem = require('./MenuItem');\n\nvar _MenuItem2 = _interopRequireDefault(_MenuItem);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar Menu = function (_React$Component) {\n    (0, _inherits3['default'])(Menu, _React$Component);\n\n    function Menu(props) {\n        (0, _classCallCheck3['default'])(this, Menu);\n\n        var _this = (0, _possibleConstructorReturn3['default'])(this, (Menu.__proto__ || Object.getPrototypeOf(Menu)).call(this, props));\n\n        _this.inlineOpenKeys = [];\n        _this.handleClick = function (e) {\n            _this.handleOpenChange([]);\n            var onClick = _this.props.onClick;\n\n            if (onClick) {\n                onClick(e);\n            }\n        };\n        _this.handleOpenChange = function (openKeys) {\n            _this.setOpenKeys(openKeys);\n            var onOpenChange = _this.props.onOpenChange;\n\n            if (onOpenChange) {\n                onOpenChange(openKeys);\n            }\n        };\n        (0, _warning2['default'])(!('onOpen' in props || 'onClose' in props), '`onOpen` and `onClose` are removed, please use `onOpenChange` instead, ' + 'see: https://u.ant.design/menu-on-open-change.');\n        (0, _warning2['default'])(!('inlineCollapsed' in props && props.mode !== 'inline'), '`inlineCollapsed` should only be used when Menu\\'s `mode` is inline.');\n        var openKeys = void 0;\n        if ('defaultOpenKeys' in props) {\n            openKeys = props.defaultOpenKeys;\n        } else if ('openKeys' in props) {\n            openKeys = props.openKeys;\n        }\n        _this.state = {\n            openKeys: openKeys || []\n        };\n        return _this;\n    }\n\n    (0, _createClass3['default'])(Menu, [{\n        key: 'getChildContext',\n        value: function getChildContext() {\n            return {\n                inlineCollapsed: this.getInlineCollapsed(),\n                antdMenuTheme: this.props.theme\n            };\n        }\n    }, {\n        key: 'componentWillReceiveProps',\n        value: function componentWillReceiveProps(nextProps, nextContext) {\n            var prefixCls = this.props.prefixCls;\n\n            if (this.props.mode === 'inline' && nextProps.mode !== 'inline') {\n                this.switchModeFromInline = true;\n            }\n            if ('openKeys' in nextProps) {\n                this.setState({ openKeys: nextProps.openKeys });\n                return;\n            }\n            if (nextProps.inlineCollapsed && !this.props.inlineCollapsed || nextContext.siderCollapsed && !this.context.siderCollapsed) {\n                this.switchModeFromInline = !!this.state.openKeys.length && !!(0, _reactDom.findDOMNode)(this).querySelectorAll('.' + prefixCls + '-submenu-open').length;\n                this.inlineOpenKeys = this.state.openKeys;\n                this.setState({ openKeys: [] });\n            }\n            if (!nextProps.inlineCollapsed && this.props.inlineCollapsed || !nextContext.siderCollapsed && this.context.siderCollapsed) {\n                this.setState({ openKeys: this.inlineOpenKeys });\n                this.inlineOpenKeys = [];\n            }\n        }\n    }, {\n        key: 'setOpenKeys',\n        value: function setOpenKeys(openKeys) {\n            if (!('openKeys' in this.props)) {\n                this.setState({ openKeys: openKeys });\n            }\n        }\n    }, {\n        key: 'getRealMenuMode',\n        value: function getRealMenuMode() {\n            var inlineCollapsed = this.getInlineCollapsed();\n            if (this.switchModeFromInline && inlineCollapsed) {\n                return 'inline';\n            }\n            var mode = this.props.mode;\n\n            return inlineCollapsed ? 'vertical' : mode;\n        }\n    }, {\n        key: 'getInlineCollapsed',\n        value: function getInlineCollapsed() {\n            var inlineCollapsed = this.props.inlineCollapsed;\n\n            if (this.context.siderCollapsed !== undefined) {\n                return this.context.siderCollapsed;\n            }\n            return inlineCollapsed;\n        }\n    }, {\n        key: 'getMenuOpenAnimation',\n        value: function getMenuOpenAnimation(menuMode) {\n            var _this2 = this;\n\n            var _props = this.props,\n                openAnimation = _props.openAnimation,\n                openTransitionName = _props.openTransitionName;\n\n            var menuOpenAnimation = openAnimation || openTransitionName;\n            if (openAnimation === undefined && openTransitionName === undefined) {\n                switch (menuMode) {\n                    case 'horizontal':\n                        menuOpenAnimation = 'slide-up';\n                        break;\n                    case 'vertical':\n                    case 'vertical-left':\n                    case 'vertical-right':\n                        // When mode switch from inline\n                        // submenu should hide without animation\n                        if (this.switchModeFromInline) {\n                            menuOpenAnimation = '';\n                            this.switchModeFromInline = false;\n                        } else {\n                            menuOpenAnimation = 'zoom-big';\n                        }\n                        break;\n                    case 'inline':\n                        menuOpenAnimation = (0, _extends3['default'])({}, _openAnimation2['default'], { leave: function leave(node, done) {\n                                return _openAnimation2['default'].leave(node, function () {\n                                    // Make sure inline menu leave animation finished before mode is switched\n                                    _this2.switchModeFromInline = false;\n                                    _this2.setState({});\n                                    // when inlineCollapsed change false to true, all submenu will be unmounted,\n                                    // so that we don't need handle animation leaving.\n                                    if (_this2.getRealMenuMode() === 'vertical') {\n                                        return;\n                                    }\n                                    done();\n                                });\n                            } });\n                        break;\n                    default:\n                }\n            }\n            return menuOpenAnimation;\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var _props2 = this.props,\n                prefixCls = _props2.prefixCls,\n                className = _props2.className,\n                theme = _props2.theme;\n\n            var menuMode = this.getRealMenuMode();\n            var menuOpenAnimation = this.getMenuOpenAnimation(menuMode);\n            var menuClassName = (0, _classnames2['default'])(className, prefixCls + '-' + theme, (0, _defineProperty3['default'])({}, prefixCls + '-inline-collapsed', this.getInlineCollapsed()));\n            var menuProps = {\n                openKeys: this.state.openKeys,\n                onOpenChange: this.handleOpenChange,\n                className: menuClassName,\n                mode: menuMode\n            };\n            if (menuMode !== 'inline') {\n                // closing vertical popup submenu after click it\n                menuProps.onClick = this.handleClick;\n                menuProps.openTransitionName = menuOpenAnimation;\n            } else {\n                menuProps.openAnimation = menuOpenAnimation;\n            }\n            // https://github.com/ant-design/ant-design/issues/8587\n            var collapsedWidth = this.context.collapsedWidth;\n\n            if (this.getInlineCollapsed() && (collapsedWidth === 0 || collapsedWidth === '0' || collapsedWidth === '0px')) {\n                return null;\n            }\n            return React.createElement(_rcMenu2['default'], (0, _extends3['default'])({}, this.props, menuProps));\n        }\n    }]);\n    return Menu;\n}(React.Component);\n\nexports['default'] = Menu;\n\nMenu.Divider = _rcMenu.Divider;\nMenu.Item = _MenuItem2['default'];\nMenu.SubMenu = _SubMenu2['default'];\nMenu.ItemGroup = _rcMenu.ItemGroup;\nMenu.defaultProps = {\n    prefixCls: 'ant-menu',\n    className: '',\n    theme: 'light'\n};\nMenu.childContextTypes = {\n    inlineCollapsed: _propTypes2['default'].bool,\n    antdMenuTheme: _propTypes2['default'].string\n};\nMenu.contextTypes = {\n    siderCollapsed: _propTypes2['default'].bool,\n    collapsedWidth: _propTypes2['default'].oneOfType([_propTypes2['default'].number, _propTypes2['default'].string])\n};\nmodule.exports = exports['default'];"},"hash":"20af32dbddddc2872346ccd51422f943"}