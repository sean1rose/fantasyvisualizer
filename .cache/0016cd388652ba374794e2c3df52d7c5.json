{"dependencies":[{"name":"babel-runtime/helpers/extends","loc":{"line":5,"column":24}},{"name":"react","loc":{"line":11,"column":21}},{"name":"prop-types","loc":{"line":15,"column":25}},{"name":"./utils","loc":{"line":19,"column":21}},{"name":"./BaseTable","loc":{"line":21,"column":25}}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nexports['default'] = BodyTable;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _utils = require('./utils');\n\nvar _BaseTable = require('./BaseTable');\n\nvar _BaseTable2 = _interopRequireDefault(_BaseTable);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction BodyTable(props, _ref) {\n  var table = _ref.table;\n  var _table$props = table.props,\n      prefixCls = _table$props.prefixCls,\n      scroll = _table$props.scroll;\n  var columns = props.columns,\n      fixed = props.fixed,\n      tableClassName = props.tableClassName,\n      getRowKey = props.getRowKey,\n      handleBodyScroll = props.handleBodyScroll,\n      expander = props.expander;\n  var saveRef = table.saveRef;\n  var useFixedHeader = table.props.useFixedHeader;\n\n  var bodyStyle = (0, _extends3['default'])({}, table.props.bodyStyle);\n  var innerBodyStyle = {};\n\n  if (scroll.x || fixed) {\n    bodyStyle.overflowX = bodyStyle.overflowX || 'auto';\n    // Fix weired webkit render bug\n    // https://github.com/ant-design/ant-design/issues/7783\n    bodyStyle.WebkitTransform = 'translate3d (0, 0, 0)';\n  }\n\n  if (scroll.y) {\n    // maxHeight will make fixed-Table scrolling not working\n    // so we only set maxHeight to body-Table here\n    if (fixed) {\n      innerBodyStyle.maxHeight = bodyStyle.maxHeight || scroll.y;\n      innerBodyStyle.overflowY = bodyStyle.overflowY || 'scroll';\n    } else {\n      bodyStyle.maxHeight = bodyStyle.maxHeight || scroll.y;\n    }\n    bodyStyle.overflowY = bodyStyle.overflowY || 'scroll';\n    useFixedHeader = true;\n\n    // Add negative margin bottom for scroll bar overflow bug\n    var scrollbarWidth = (0, _utils.measureScrollbar)();\n    if (scrollbarWidth > 0 && fixed) {\n      bodyStyle.marginBottom = '-' + scrollbarWidth + 'px';\n      bodyStyle.paddingBottom = '0px';\n    }\n  }\n\n  var baseTable = _react2['default'].createElement(_BaseTable2['default'], {\n    tableClassName: tableClassName,\n    hasHead: !useFixedHeader,\n    hasBody: true,\n    fixed: fixed,\n    columns: columns,\n    expander: expander,\n    getRowKey: getRowKey\n  });\n\n  if (fixed && columns.length) {\n    var refName = void 0;\n    if (columns[0].fixed === 'left' || columns[0].fixed === true) {\n      refName = 'fixedColumnsBodyLeft';\n    } else if (columns[0].fixed === 'right') {\n      refName = 'fixedColumnsBodyRight';\n    }\n    delete bodyStyle.overflowX;\n    delete bodyStyle.overflowY;\n    return _react2['default'].createElement(\n      'div',\n      {\n        key: 'bodyTable',\n        className: prefixCls + '-body-outer',\n        style: (0, _extends3['default'])({}, bodyStyle)\n      },\n      _react2['default'].createElement(\n        'div',\n        {\n          className: prefixCls + '-body-inner',\n          style: innerBodyStyle,\n          ref: saveRef(refName),\n          onScroll: handleBodyScroll\n        },\n        baseTable\n      )\n    );\n  }\n\n  return _react2['default'].createElement(\n    'div',\n    {\n      key: 'bodyTable',\n      className: prefixCls + '-body',\n      style: bodyStyle,\n      ref: saveRef('bodyTable'),\n      onScroll: handleBodyScroll\n    },\n    baseTable\n  );\n}\n\nBodyTable.propTypes = {\n  fixed: _propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].bool]),\n  columns: _propTypes2['default'].array.isRequired,\n  tableClassName: _propTypes2['default'].string.isRequired,\n  handleBodyScroll: _propTypes2['default'].func.isRequired,\n  getRowKey: _propTypes2['default'].func.isRequired,\n  expander: _propTypes2['default'].object.isRequired\n};\n\nBodyTable.contextTypes = {\n  table: _propTypes2['default'].any\n};\nmodule.exports = exports['default'];"},"hash":"0fe0c83e133f32d9c1631efcd037d46b"}