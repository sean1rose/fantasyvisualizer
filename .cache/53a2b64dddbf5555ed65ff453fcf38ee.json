{"dependencies":[{"name":"react","loc":{"line":7,"column":21}},{"name":"prop-types","loc":{"line":11,"column":25}},{"name":"react-dom","loc":{"line":15,"column":24}},{"name":"rc-trigger","loc":{"line":19,"column":25}},{"name":"./placements","loc":{"line":23,"column":26}}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _rcTrigger = require('rc-trigger');\n\nvar _rcTrigger2 = _interopRequireDefault(_rcTrigger);\n\nvar _placements = require('./placements');\n\nvar _placements2 = _interopRequireDefault(_placements);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Dropdown = function (_Component) {\n  _inherits(Dropdown, _Component);\n\n  function Dropdown(props) {\n    _classCallCheck(this, Dropdown);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _initialiseProps.call(_this);\n\n    if ('visible' in props) {\n      _this.state = {\n        visible: props.visible\n      };\n    } else {\n      _this.state = {\n        visible: props.defaultVisible\n      };\n    }\n    return _this;\n  }\n\n  Dropdown.prototype.componentWillReceiveProps = function componentWillReceiveProps(_ref) {\n    var visible = _ref.visible;\n\n    if (visible !== undefined) {\n      this.setState({\n        visible: visible\n      });\n    }\n  };\n\n  Dropdown.prototype.getMenuElement = function getMenuElement() {\n    var _props = this.props,\n        overlay = _props.overlay,\n        prefixCls = _props.prefixCls;\n\n    var extraOverlayProps = {\n      prefixCls: prefixCls + '-menu',\n      onClick: this.onClick\n    };\n    if (typeof overlay.type === 'string') {\n      delete extraOverlayProps.prefixCls;\n    }\n    return _react2['default'].cloneElement(overlay, extraOverlayProps);\n  };\n\n  Dropdown.prototype.getPopupDomNode = function getPopupDomNode() {\n    return this.trigger.getPopupDomNode();\n  };\n\n  Dropdown.prototype.render = function render() {\n    var _props2 = this.props,\n        prefixCls = _props2.prefixCls,\n        children = _props2.children,\n        transitionName = _props2.transitionName,\n        animation = _props2.animation,\n        align = _props2.align,\n        placement = _props2.placement,\n        getPopupContainer = _props2.getPopupContainer,\n        showAction = _props2.showAction,\n        hideAction = _props2.hideAction,\n        overlayClassName = _props2.overlayClassName,\n        overlayStyle = _props2.overlayStyle,\n        trigger = _props2.trigger,\n        otherProps = _objectWithoutProperties(_props2, ['prefixCls', 'children', 'transitionName', 'animation', 'align', 'placement', 'getPopupContainer', 'showAction', 'hideAction', 'overlayClassName', 'overlayStyle', 'trigger']);\n\n    return _react2['default'].createElement(\n      _rcTrigger2['default'],\n      _extends({}, otherProps, {\n        prefixCls: prefixCls,\n        ref: this.saveTrigger,\n        popupClassName: overlayClassName,\n        popupStyle: overlayStyle,\n        builtinPlacements: _placements2['default'],\n        action: trigger,\n        showAction: showAction,\n        hideAction: hideAction,\n        popupPlacement: placement,\n        popupAlign: align,\n        popupTransitionName: transitionName,\n        popupAnimation: animation,\n        popupVisible: this.state.visible,\n        afterPopupVisibleChange: this.afterVisibleChange,\n        popup: this.getMenuElement(),\n        onPopupVisibleChange: this.onVisibleChange,\n        getPopupContainer: getPopupContainer\n      }),\n      children\n    );\n  };\n\n  return Dropdown;\n}(_react.Component);\n\nDropdown.propTypes = {\n  minOverlayWidthMatchTrigger: _propTypes2['default'].bool,\n  onVisibleChange: _propTypes2['default'].func,\n  onOverlayClick: _propTypes2['default'].func,\n  prefixCls: _propTypes2['default'].string,\n  children: _propTypes2['default'].any,\n  transitionName: _propTypes2['default'].string,\n  overlayClassName: _propTypes2['default'].string,\n  animation: _propTypes2['default'].any,\n  align: _propTypes2['default'].object,\n  overlayStyle: _propTypes2['default'].object,\n  placement: _propTypes2['default'].string,\n  overlay: _propTypes2['default'].node,\n  trigger: _propTypes2['default'].array,\n  showAction: _propTypes2['default'].array,\n  hideAction: _propTypes2['default'].array,\n  getPopupContainer: _propTypes2['default'].func,\n  visible: _propTypes2['default'].bool,\n  defaultVisible: _propTypes2['default'].bool\n};\nDropdown.defaultProps = {\n  minOverlayWidthMatchTrigger: true,\n  prefixCls: 'rc-dropdown',\n  trigger: ['hover'],\n  showAction: [],\n  hideAction: [],\n  overlayClassName: '',\n  overlayStyle: {},\n  defaultVisible: false,\n  onVisibleChange: function onVisibleChange() {},\n\n  placement: 'bottomLeft'\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this2 = this;\n\n  this.onClick = function (e) {\n    var props = _this2.props;\n    var overlayProps = props.overlay.props;\n    // do no call onVisibleChange, if you need click to hide, use onClick and control visible\n    if (!('visible' in props)) {\n      _this2.setState({\n        visible: false\n      });\n    }\n    if (props.onOverlayClick) {\n      props.onOverlayClick(e);\n    }\n    if (overlayProps.onClick) {\n      overlayProps.onClick(e);\n    }\n  };\n\n  this.onVisibleChange = function (visible) {\n    var props = _this2.props;\n    if (!('visible' in props)) {\n      _this2.setState({\n        visible: visible\n      });\n    }\n    props.onVisibleChange(visible);\n  };\n\n  this.afterVisibleChange = function (visible) {\n    if (visible && _this2.props.minOverlayWidthMatchTrigger) {\n      var overlayNode = _this2.getPopupDomNode();\n      var rootNode = _reactDom2['default'].findDOMNode(_this2);\n      if (rootNode && overlayNode && rootNode.offsetWidth > overlayNode.offsetWidth) {\n        overlayNode.style.width = rootNode.offsetWidth + 'px';\n        if (_this2.trigger && _this2.trigger._component && _this2.trigger._component.alignInstance) {\n          _this2.trigger._component.alignInstance.forceAlign();\n        }\n      }\n    }\n  };\n\n  this.saveTrigger = function (node) {\n    _this2.trigger = node;\n  };\n};\n\nexports['default'] = Dropdown;\nmodule.exports = exports['default'];"},"hash":"358dffb3fc7e0ca2939f8a6cbdabfa17"}