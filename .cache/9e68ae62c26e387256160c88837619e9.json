{"dependencies":[{"name":"babel-runtime/helpers/extends","loc":{"line":5,"column":24}},{"name":"babel-runtime/helpers/classCallCheck","loc":{"line":9,"column":31}},{"name":"babel-runtime/helpers/possibleConstructorReturn","loc":{"line":13,"column":42}},{"name":"babel-runtime/helpers/inherits","loc":{"line":17,"column":25}},{"name":"react","loc":{"line":21,"column":21}},{"name":"prop-types","loc":{"line":25,"column":25}},{"name":"react-dom","loc":{"line":29,"column":24}},{"name":"classnames","loc":{"line":33,"column":26}},{"name":"rc-trigger","loc":{"line":37,"column":25}},{"name":"rc-tree","loc":{"line":41,"column":22}},{"name":"./util","loc":{"line":45,"column":20}},{"name":"rc-util/lib/Children/toArray","loc":{"line":47,"column":23}}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _rcTrigger = require('rc-trigger');\n\nvar _rcTrigger2 = _interopRequireDefault(_rcTrigger);\n\nvar _rcTree = require('rc-tree');\n\nvar _rcTree2 = _interopRequireDefault(_rcTree);\n\nvar _util = require('./util');\n\nvar _toArray = require('rc-util/lib/Children/toArray');\n\nvar _toArray2 = _interopRequireDefault(_toArray);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar BUILT_IN_PLACEMENTS = {\n  bottomLeft: {\n    points: ['tl', 'bl'],\n    offset: [0, 4],\n    overflow: {\n      adjustX: 0,\n      adjustY: 1\n    }\n  },\n  topLeft: {\n    points: ['bl', 'tl'],\n    offset: [0, -4],\n    overflow: {\n      adjustX: 0,\n      adjustY: 1\n    }\n  }\n};\n\nvar SelectTrigger = function (_Component) {\n  (0, _inherits3['default'])(SelectTrigger, _Component);\n\n  function SelectTrigger() {\n    var _temp, _this, _ret;\n\n    (0, _classCallCheck3['default'])(this, SelectTrigger);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3['default'])(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {\n      _expandedKeys: [],\n      fireOnExpand: false,\n      dropdownWidth: null\n    }, _this.onExpand = function (expandedKeys) {\n      // rerender\n      _this.setState({\n        _expandedKeys: expandedKeys,\n        fireOnExpand: true\n      }, function () {\n        // Fix https://github.com/ant-design/ant-design/issues/5689\n        if (_this.trigger && _this.trigger.forcePopupAlign) {\n          _this.trigger.forcePopupAlign();\n        }\n      });\n    }, _this.highlightTreeNode = function (treeNode) {\n      var props = _this.props;\n      var filterVal = treeNode.props[(0, _util.labelCompatible)(props.treeNodeFilterProp)];\n      if (typeof filterVal === 'string') {\n        return props.inputValue && filterVal.indexOf(props.inputValue) > -1;\n      }\n      return false;\n    }, _this.filterTreeNode = function (input, child) {\n      if (!input) {\n        return true;\n      }\n      var filterTreeNode = _this.props.filterTreeNode;\n      if (!filterTreeNode) {\n        return true;\n      }\n      if (child.props.disabled) {\n        return false;\n      }\n      return filterTreeNode.call(_this, input, child);\n    }, _temp), (0, _possibleConstructorReturn3['default'])(_this, _ret);\n  }\n\n  SelectTrigger.prototype.componentDidMount = function componentDidMount() {\n    this.setDropdownWidth();\n  };\n\n  SelectTrigger.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if (nextProps.inputValue && nextProps.inputValue !== this.props.inputValue) {\n      // set autoExpandParent to true\n      this.setState({\n        _expandedKeys: [],\n        fireOnExpand: false\n      });\n    }\n  };\n\n  SelectTrigger.prototype.componentDidUpdate = function componentDidUpdate() {\n    this.setDropdownWidth();\n  };\n\n  SelectTrigger.prototype.setDropdownWidth = function setDropdownWidth() {\n    var width = _reactDom2['default'].findDOMNode(this).offsetWidth;\n    if (width !== this.state.dropdownWidth) {\n      this.setState({ dropdownWidth: width });\n    }\n  };\n\n  SelectTrigger.prototype.getPopupEleRefs = function getPopupEleRefs() {\n    return this.popupEle;\n  };\n\n  SelectTrigger.prototype.getPopupDOMNode = function getPopupDOMNode() {\n    return this.trigger.getPopupDomNode();\n  };\n\n  SelectTrigger.prototype.getDropdownTransitionName = function getDropdownTransitionName() {\n    var props = this.props;\n    var transitionName = props.transitionName;\n    if (!transitionName && props.animation) {\n      transitionName = this.getDropdownPrefixCls() + '-' + props.animation;\n    }\n    return transitionName;\n  };\n\n  SelectTrigger.prototype.getDropdownPrefixCls = function getDropdownPrefixCls() {\n    return this.props.prefixCls + '-dropdown';\n  };\n\n  SelectTrigger.prototype.processTreeNode = function processTreeNode(treeNodes) {\n    var _this2 = this;\n\n    var filterPoss = [];\n    this._expandedKeys = [];\n    (0, _util.loopAllChildren)(treeNodes, function (child, index, pos) {\n      if (_this2.filterTreeNode(_this2.props.inputValue, child)) {\n        filterPoss.push(pos);\n        _this2._expandedKeys.push(child.key);\n      }\n    });\n\n    // Include the filtered nodes's ancestral nodes.\n    var processedPoss = [];\n    filterPoss.forEach(function (pos) {\n      var arr = pos.split('-');\n      arr.reduce(function (pre, cur) {\n        var res = pre + '-' + cur;\n        if (processedPoss.indexOf(res) < 0) {\n          processedPoss.push(res);\n        }\n        return res;\n      });\n    });\n    var filterNodesPositions = [];\n    (0, _util.loopAllChildren)(treeNodes, function (child, index, pos) {\n      if (processedPoss.indexOf(pos) > -1) {\n        filterNodesPositions.push({ node: child, pos: pos });\n      }\n    });\n\n    var hierarchyNodes = (0, _util.flatToHierarchy)(filterNodesPositions);\n\n    var recursive = function recursive(children) {\n      return children.map(function (child) {\n        if (child.children) {\n          return _react2['default'].cloneElement(child.node, {}, recursive(child.children));\n        }\n        return child.node;\n      });\n    };\n    return recursive(hierarchyNodes);\n  };\n\n  SelectTrigger.prototype.renderTree = function renderTree(keys, halfCheckedKeys, newTreeNodes, multiple) {\n    var props = this.props;\n\n    var trProps = {\n      multiple: multiple,\n      prefixCls: props.prefixCls + '-tree',\n      showIcon: props.treeIcon,\n      showLine: props.treeLine,\n      defaultExpandAll: props.treeDefaultExpandAll,\n      defaultExpandedKeys: props.treeDefaultExpandedKeys,\n      filterTreeNode: this.highlightTreeNode\n    };\n\n    if (props.treeCheckable) {\n      trProps.selectable = false;\n      trProps.checkable = props.treeCheckable;\n      trProps.onCheck = props.onSelect;\n      trProps.checkStrictly = props.treeCheckStrictly;\n      if (props.inputValue) {\n        // enable checkStrictly when search tree.\n        trProps.checkStrictly = true;\n      } else {\n        trProps._treeNodesStates = props._treeNodesStates;\n      }\n      if (trProps.treeCheckStrictly && halfCheckedKeys.length) {\n        trProps.checkedKeys = { checked: keys, halfChecked: halfCheckedKeys };\n      } else {\n        trProps.checkedKeys = keys;\n      }\n    } else {\n      trProps.selectedKeys = keys;\n      trProps.onSelect = props.onSelect;\n    }\n\n    // expand keys\n    if (!trProps.defaultExpandAll && !trProps.defaultExpandedKeys && !props.loadData) {\n      trProps.expandedKeys = keys;\n    }\n    trProps.autoExpandParent = true;\n    trProps.onExpand = this.onExpand;\n    if (this._expandedKeys && this._expandedKeys.length) {\n      trProps.expandedKeys = this._expandedKeys;\n    }\n    if (this.state.fireOnExpand) {\n      trProps.expandedKeys = this.state._expandedKeys;\n      trProps.autoExpandParent = false;\n    }\n\n    // async loadData\n    if (props.loadData) {\n      trProps.loadData = props.loadData;\n    }\n\n    return _react2['default'].createElement(\n      _rcTree2['default'],\n      (0, _extends3['default'])({ ref: (0, _util.saveRef)(this, 'popupEle') }, trProps),\n      newTreeNodes\n    );\n  };\n\n  SelectTrigger.prototype.render = function render() {\n    var _popupClassName;\n\n    var props = this.props;\n    var multiple = props.multiple;\n    var dropdownPrefixCls = this.getDropdownPrefixCls();\n    var popupClassName = (_popupClassName = {}, _popupClassName[props.dropdownClassName] = !!props.dropdownClassName, _popupClassName[dropdownPrefixCls + '--' + (multiple ? 'multiple' : 'single')] = 1, _popupClassName);\n    var visible = props.visible;\n    var search = multiple || props.combobox || !props.showSearch ? null : _react2['default'].createElement(\n      'span',\n      { className: dropdownPrefixCls + '-search' },\n      props.inputElement\n    );\n\n    var recursive = function recursive(children) {\n      // Note: if use `React.Children.map`, the node's key will be modified.\n      return (0, _toArray2['default'])(children).map(function handler(child) {\n        // eslint-disable-line\n        if (!child) {\n          return null;\n        }\n        if (child && child.props.children) {\n          // null or String has no Prop\n          return _react2['default'].createElement(\n            _rcTree.TreeNode,\n            (0, _extends3['default'])({}, child.props, { key: child.key }),\n            recursive(child.props.children)\n          );\n        }\n        return _react2['default'].createElement(_rcTree.TreeNode, (0, _extends3['default'])({}, child.props, { key: child.key }));\n      });\n    };\n    // const s = Date.now();\n    var treeNodes = void 0;\n    if (props._cachetreeData && this.treeNodes) {\n      treeNodes = this.treeNodes;\n    } else {\n      treeNodes = recursive(props.treeData || props.treeNodes);\n      this.treeNodes = treeNodes;\n    }\n    // console.log(Date.now()-s);\n\n    if (props.inputValue) {\n      treeNodes = this.processTreeNode(treeNodes);\n    }\n\n    var keys = [];\n    var halfCheckedKeys = [];\n    (0, _util.loopAllChildren)(treeNodes, function (child) {\n      if (props.value.some(function (item) {\n        return item.value === (0, _util.getValuePropValue)(child);\n      })) {\n        keys.push(child.key);\n      }\n      if (props.halfCheckedValues && props.halfCheckedValues.some(function (item) {\n        return item.value === (0, _util.getValuePropValue)(child);\n      })) {\n        halfCheckedKeys.push(child.key);\n      }\n    });\n\n    var notFoundContent = void 0;\n    if (!treeNodes.length) {\n      if (props.notFoundContent) {\n        notFoundContent = _react2['default'].createElement(\n          'span',\n          { className: props.prefixCls + '-not-found' },\n          props.notFoundContent\n        );\n      } else if (!search) {\n        visible = false;\n      }\n    }\n    var popupElement = _react2['default'].createElement(\n      'div',\n      null,\n      search,\n      notFoundContent || this.renderTree(keys, halfCheckedKeys, treeNodes, multiple)\n    );\n\n    var popupStyle = (0, _extends3['default'])({}, props.dropdownStyle);\n    var widthProp = props.dropdownMatchSelectWidth ? 'width' : 'minWidth';\n    if (this.state.dropdownWidth) {\n      popupStyle[widthProp] = this.state.dropdownWidth + 'px';\n    }\n\n    return _react2['default'].createElement(\n      _rcTrigger2['default'],\n      {\n        action: props.disabled ? [] : ['click'],\n        ref: (0, _util.saveRef)(this, 'trigger'),\n        popupPlacement: 'bottomLeft',\n        builtinPlacements: BUILT_IN_PLACEMENTS,\n        popupAlign: props.dropdownPopupAlign,\n        prefixCls: dropdownPrefixCls,\n        popupTransitionName: this.getDropdownTransitionName(),\n        onPopupVisibleChange: props.onDropdownVisibleChange,\n        popup: popupElement,\n        popupVisible: visible,\n        getPopupContainer: props.getPopupContainer,\n        popupClassName: (0, _classnames2['default'])(popupClassName),\n        popupStyle: popupStyle\n      },\n      this.props.children\n    );\n  };\n\n  return SelectTrigger;\n}(_react.Component);\n\nSelectTrigger.propTypes = {\n  dropdownMatchSelectWidth: _propTypes2['default'].bool,\n  dropdownPopupAlign: _propTypes2['default'].object,\n  visible: _propTypes2['default'].bool,\n  filterTreeNode: _propTypes2['default'].any,\n  treeNodes: _propTypes2['default'].any,\n  inputValue: _propTypes2['default'].string,\n  prefixCls: _propTypes2['default'].string,\n  popupClassName: _propTypes2['default'].string,\n  children: _propTypes2['default'].any\n};\nexports['default'] = SelectTrigger;\nmodule.exports = exports['default'];"},"hash":"a6ddca0b546ad2269f96cf3a140c1237"}