{"dependencies":[{"name":"lodash/isEqual","loc":{"line":7,"column":24}},{"name":"lodash/isNaN","loc":{"line":11,"column":22}},{"name":"lodash/isFunction","loc":{"line":15,"column":27}},{"name":"lodash/isNil","loc":{"line":19,"column":22}},{"name":"lodash/isArray","loc":{"line":23,"column":24}},{"name":"react","loc":{"line":36,"column":21}},{"name":"prop-types","loc":{"line":40,"column":25}},{"name":"classnames","loc":{"line":44,"column":26}},{"name":"react-smooth","loc":{"line":48,"column":27}},{"name":"../shape/Curve","loc":{"line":52,"column":21}},{"name":"../shape/Dot","loc":{"line":56,"column":19}},{"name":"../container/Layer","loc":{"line":60,"column":21}},{"name":"../component/LabelList","loc":{"line":64,"column":25}},{"name":"../util/PureRender","loc":{"line":68,"column":26}},{"name":"../util/ReactUtils","loc":{"line":72,"column":26}},{"name":"../util/DataUtils","loc":{"line":74,"column":25}},{"name":"../util/ChartUtils","loc":{"line":76,"column":26}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _isEqual2 = require('lodash/isEqual');\n\nvar _isEqual3 = _interopRequireDefault(_isEqual2);\n\nvar _isNaN2 = require('lodash/isNaN');\n\nvar _isNaN3 = _interopRequireDefault(_isNaN2);\n\nvar _isFunction2 = require('lodash/isFunction');\n\nvar _isFunction3 = _interopRequireDefault(_isFunction2);\n\nvar _isNil2 = require('lodash/isNil');\n\nvar _isNil3 = _interopRequireDefault(_isNil2);\n\nvar _isArray2 = require('lodash/isArray');\n\nvar _isArray3 = _interopRequireDefault(_isArray2);\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _class2, _temp2; /**\n                              * @fileOverview Area\n                              */\n\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _reactSmooth = require('react-smooth');\n\nvar _reactSmooth2 = _interopRequireDefault(_reactSmooth);\n\nvar _Curve = require('../shape/Curve');\n\nvar _Curve2 = _interopRequireDefault(_Curve);\n\nvar _Dot = require('../shape/Dot');\n\nvar _Dot2 = _interopRequireDefault(_Dot);\n\nvar _Layer = require('../container/Layer');\n\nvar _Layer2 = _interopRequireDefault(_Layer);\n\nvar _LabelList = require('../component/LabelList');\n\nvar _LabelList2 = _interopRequireDefault(_LabelList);\n\nvar _PureRender = require('../util/PureRender');\n\nvar _PureRender2 = _interopRequireDefault(_PureRender);\n\nvar _ReactUtils = require('../util/ReactUtils');\n\nvar _DataUtils = require('../util/DataUtils');\n\nvar _ChartUtils = require('../util/ChartUtils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Area = (0, _PureRender2.default)(_class = (_temp2 = _class2 = function (_Component) {\n  _inherits(Area, _Component);\n\n  function Area() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Area);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Area.__proto__ || Object.getPrototypeOf(Area)).call.apply(_ref, [this].concat(args))), _this), _this.state = { isAnimationFinished: true }, _this.id = (0, _DataUtils.uniqueId)('recharts-area-'), _this.cachePrevData = function (points, baseLine) {\n      _this.setState({\n        prevPoints: points,\n        prevBaseLine: baseLine\n      });\n    }, _this.handleAnimationEnd = function () {\n      var onAnimationEnd = _this.props.onAnimationEnd;\n\n\n      _this.setState({ isAnimationFinished: true });\n\n      if ((0, _isFunction3.default)(onAnimationEnd)) {\n        onAnimationEnd();\n      }\n    }, _this.handleAnimationStart = function () {\n      var onAnimationStart = _this.props.onAnimationStart;\n\n      _this.setState({ isAnimationFinished: false });\n\n      if ((0, _isFunction3.default)(onAnimationStart)) {\n        onAnimationStart();\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(Area, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var _props = this.props,\n          animationId = _props.animationId,\n          points = _props.points,\n          baseLine = _props.baseLine;\n\n\n      if (nextProps.animationId !== animationId) {\n        this.cachePrevData(points, baseLine);\n      }\n    }\n  }, {\n    key: 'renderDots',\n    value: function renderDots() {\n      var _this2 = this;\n\n      var isAnimationActive = this.props.isAnimationActive;\n\n\n      if (isAnimationActive && !this.state.isAnimationFinished) {\n        return null;\n      }\n\n      var _props2 = this.props,\n          dot = _props2.dot,\n          points = _props2.points,\n          dataKey = _props2.dataKey;\n\n      var areaProps = (0, _ReactUtils.getPresentationAttributes)(this.props);\n      var customDotProps = (0, _ReactUtils.getPresentationAttributes)(dot);\n      var dotEvents = (0, _ReactUtils.filterEventAttributes)(dot);\n\n      var dots = points.map(function (entry, i) {\n        var dotProps = _extends({\n          key: 'dot-' + i,\n          r: 3\n        }, areaProps, customDotProps, dotEvents, {\n          dataKey: dataKey,\n          cx: entry.x,\n          cy: entry.y,\n          index: i,\n          value: entry.value,\n          payload: entry.payload\n        });\n\n        return _this2.constructor.renderDotItem(dot, dotProps);\n      });\n\n      return _react2.default.createElement(\n        _Layer2.default,\n        { className: 'recharts-area-dots' },\n        dots\n      );\n    }\n  }, {\n    key: 'renderHorizontalRect',\n    value: function renderHorizontalRect(alpha) {\n      var _props3 = this.props,\n          baseLine = _props3.baseLine,\n          points = _props3.points,\n          strokeWidth = _props3.strokeWidth;\n\n      var startX = points[0].x;\n      var endX = points[points.length - 1].x;\n      var width = alpha * Math.abs(startX - endX);\n      var maxY = Math.max.apply(null, points.map(function (entry) {\n        return entry.y || 0;\n      }));\n\n      if ((0, _DataUtils.isNumber)(baseLine)) {\n        maxY = Math.max(baseLine, maxY);\n      } else if (baseLine && (0, _isArray3.default)(baseLine) && baseLine.length) {\n        maxY = Math.max(Math.max.apply(null, baseLine.map(function (entry) {\n          return entry.y || 0;\n        })), maxY);\n      }\n\n      if ((0, _DataUtils.isNumber)(maxY)) {\n        return _react2.default.createElement('rect', {\n          x: startX < endX ? startX : startX - width,\n          y: 0,\n          width: width,\n          height: maxY + (strokeWidth || 1)\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: 'renderVerticalRect',\n    value: function renderVerticalRect(alpha) {\n      var _props4 = this.props,\n          baseLine = _props4.baseLine,\n          points = _props4.points,\n          strokeWidth = _props4.strokeWidth;\n\n      var startY = points[0].y;\n      var endY = points[points.length - 1].y;\n      var height = alpha * Math.abs(startY - endY);\n      var maxX = Math.max.apply(null, points.map(function (entry) {\n        return entry.x || 0;\n      }));\n\n      if ((0, _DataUtils.isNumber)(baseLine)) {\n        maxX = Math.max(baseLine, maxX);\n      } else if (baseLine && (0, _isArray3.default)(baseLine) && baseLine.length) {\n        maxX = Math.max(Math.max.apply(null, baseLine.map(function (entry) {\n          return entry.x || 0;\n        })), maxX);\n      }\n\n      if ((0, _DataUtils.isNumber)(maxX)) {\n        return _react2.default.createElement('rect', {\n          x: 0,\n          y: startY < endY ? startY : startY - height,\n          width: maxX + (strokeWidth || 1),\n          height: height\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: 'renderClipRect',\n    value: function renderClipRect(alpha) {\n      var layout = this.props.layout;\n\n\n      if (layout === 'vertical') {\n        return this.renderVerticalRect(alpha);\n      }\n\n      return this.renderHorizontalRect(alpha);\n    }\n  }, {\n    key: 'renderAreaStatically',\n    value: function renderAreaStatically(points, baseLine, needClip) {\n      var _props5 = this.props,\n          layout = _props5.layout,\n          type = _props5.type,\n          stroke = _props5.stroke,\n          connectNulls = _props5.connectNulls,\n          isRange = _props5.isRange;\n\n\n      return _react2.default.createElement(\n        _Layer2.default,\n        { clipPath: needClip ? 'url(#clipPath-' + this.id + ')' : null },\n        _react2.default.createElement(_Curve2.default, _extends({}, this.props, {\n          points: points,\n          baseLine: baseLine,\n          stroke: 'none',\n          className: 'recharts-area-area'\n        })),\n        stroke !== 'none' && _react2.default.createElement(_Curve2.default, _extends({}, (0, _ReactUtils.getPresentationAttributes)(this.props), {\n          className: 'recharts-area-curve',\n          layout: layout,\n          type: type,\n          connectNulls: connectNulls,\n          fill: 'none',\n          points: points\n        })),\n        stroke !== 'none' && isRange && _react2.default.createElement(_Curve2.default, _extends({}, (0, _ReactUtils.getPresentationAttributes)(this.props), {\n          className: 'recharts-area-curve',\n          layout: layout,\n          type: type,\n          connectNulls: connectNulls,\n          fill: 'none',\n          points: baseLine\n        }))\n      );\n    }\n  }, {\n    key: 'renderAreaWithAnimation',\n    value: function renderAreaWithAnimation(needClip) {\n      var _this3 = this;\n\n      var _props6 = this.props,\n          points = _props6.points,\n          baseLine = _props6.baseLine,\n          isAnimationActive = _props6.isAnimationActive,\n          animationBegin = _props6.animationBegin,\n          animationDuration = _props6.animationDuration,\n          animationEasing = _props6.animationEasing,\n          animationId = _props6.animationId,\n          id = _props6.id;\n      var _state = this.state,\n          prevPoints = _state.prevPoints,\n          prevBaseLine = _state.prevBaseLine;\n\n      var clipPathId = (0, _isNil3.default)(id) ? this.id : id;\n\n      return _react2.default.createElement(\n        _reactSmooth2.default,\n        {\n          begin: animationBegin,\n          duration: animationDuration,\n          isActive: isAnimationActive,\n          easing: animationEasing,\n          from: { t: 0 },\n          to: { t: 1 },\n          key: 'area-' + animationId,\n          onAnimationEnd: this.handleAnimationEnd,\n          onAnimationStart: this.handleAnimationStart\n        },\n        function (_ref2) {\n          var t = _ref2.t;\n\n          if (prevPoints) {\n            // update animtaion\n            var stepPoints = points.map(function (entry, index) {\n              if (prevPoints[index]) {\n                var prev = prevPoints[index];\n                var interpolatorX = (0, _DataUtils.interpolateNumber)(prev.x, entry.x);\n                var interpolatorY = (0, _DataUtils.interpolateNumber)(prev.y, entry.y);\n\n                return _extends({}, entry, { x: interpolatorX(t), y: interpolatorY(t) });\n              }\n\n              return entry;\n            });\n            var stepBaseLine = void 0;\n\n            if ((0, _DataUtils.isNumber)(baseLine)) {\n              var interpolator = (0, _DataUtils.interpolateNumber)(prevBaseLine, baseLine);\n              stepBaseLine = interpolator(t);\n            } else if ((0, _isNil3.default)(baseLine) || (0, _isNaN3.default)(baseLine)) {\n              var _interpolator = (0, _DataUtils.interpolateNumber)(prevBaseLine, 0);\n              stepBaseLine = _interpolator(t);\n            } else {\n              stepBaseLine = baseLine.map(function (entry, index) {\n                if (prevBaseLine[index]) {\n                  var prev = prevBaseLine[index];\n                  var interpolatorX = (0, _DataUtils.interpolateNumber)(prev.x, entry.x);\n                  var interpolatorY = (0, _DataUtils.interpolateNumber)(prev.y, entry.y);\n\n                  return _extends({}, entry, { x: interpolatorX(t), y: interpolatorY(t) });\n                }\n\n                return entry;\n              });\n            }\n\n            return _this3.renderAreaStatically(stepPoints, stepBaseLine, needClip);\n          }\n\n          return _react2.default.createElement(\n            _Layer2.default,\n            null,\n            _react2.default.createElement(\n              'defs',\n              null,\n              _react2.default.createElement(\n                'clipPath',\n                { id: 'animationClipPath-' + clipPathId },\n                _this3.renderClipRect(t)\n              )\n            ),\n            _react2.default.createElement(\n              _Layer2.default,\n              { clipPath: 'url(#animationClipPath-' + clipPathId + ')' },\n              _this3.renderAreaStatically(points, baseLine, needClip)\n            )\n          );\n        }\n      );\n    }\n  }, {\n    key: 'renderArea',\n    value: function renderArea(needClip) {\n      var _props7 = this.props,\n          points = _props7.points,\n          baseLine = _props7.baseLine,\n          isAnimationActive = _props7.isAnimationActive;\n      var _state2 = this.state,\n          prevPoints = _state2.prevPoints,\n          prevBaseLine = _state2.prevBaseLine,\n          totalLength = _state2.totalLength;\n\n\n      if (isAnimationActive && points && points.length && (!prevPoints && totalLength > 0 || !(0, _isEqual3.default)(prevPoints, points) || !(0, _isEqual3.default)(prevBaseLine, baseLine))) {\n        return this.renderAreaWithAnimation(needClip);\n      }\n\n      return this.renderAreaStatically(points, baseLine, needClip);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props8 = this.props,\n          hide = _props8.hide,\n          dot = _props8.dot,\n          points = _props8.points,\n          className = _props8.className,\n          top = _props8.top,\n          left = _props8.left,\n          xAxis = _props8.xAxis,\n          yAxis = _props8.yAxis,\n          width = _props8.width,\n          height = _props8.height,\n          isAnimationActive = _props8.isAnimationActive,\n          id = _props8.id;\n\n\n      if (hide || !points || !points.length) {\n        return null;\n      }\n\n      var isAnimationFinished = this.state.isAnimationFinished;\n\n      var hasSinglePoint = points.length === 1;\n      var layerClass = (0, _classnames2.default)('recharts-area', className);\n      var needClip = xAxis && xAxis.allowDataOverflow || yAxis && yAxis.allowDataOverflow;\n      var clipPathId = (0, _isNil3.default)(id) ? this.id : id;\n\n      return _react2.default.createElement(\n        _Layer2.default,\n        { className: layerClass },\n        needClip ? _react2.default.createElement(\n          'defs',\n          null,\n          _react2.default.createElement(\n            'clipPath',\n            { id: 'clipPath-' + clipPathId },\n            _react2.default.createElement('rect', { x: left, y: top, width: width, height: height })\n          )\n        ) : null,\n        !hasSinglePoint ? this.renderArea(needClip) : null,\n        (dot || hasSinglePoint) && this.renderDots(),\n        (!isAnimationActive || isAnimationFinished) && _LabelList2.default.renderCallByParent(this.props, points)\n      );\n    }\n  }]);\n\n  return Area;\n}(_react.Component), _class2.displayName = 'Area', _class2.propTypes = _extends({}, _ReactUtils.PRESENTATION_ATTRIBUTES, _ReactUtils.EVENT_ATTRIBUTES, {\n  className: _propTypes2.default.string,\n  dataKey: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.func]).isRequired,\n  type: _propTypes2.default.oneOfType([_propTypes2.default.oneOf(['basis', 'basisClosed', 'basisOpen', 'linear', 'linearClosed', 'natural', 'monotoneX', 'monotoneY', 'monotone', 'step', 'stepBefore', 'stepAfter']), _propTypes2.default.func]),\n  unit: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  name: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  yAxisId: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  xAxisId: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  yAxis: _propTypes2.default.object,\n  xAxis: _propTypes2.default.object,\n  stackId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),\n  legendType: _propTypes2.default.oneOf(_ReactUtils.LEGEND_TYPES),\n  connectNulls: _propTypes2.default.bool,\n\n  activeDot: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.element, _propTypes2.default.func, _propTypes2.default.bool]),\n  // dot configuration\n  dot: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.element, _propTypes2.default.object, _propTypes2.default.bool]),\n  label: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.element, _propTypes2.default.object, _propTypes2.default.bool]),\n  hide: _propTypes2.default.bool,\n  // have curve configuration\n  layout: _propTypes2.default.oneOf(['horizontal', 'vertical']),\n  baseLine: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.array]),\n  isRange: _propTypes2.default.bool,\n  points: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n    x: _propTypes2.default.number,\n    y: _propTypes2.default.number,\n    value: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.array])\n  })),\n\n  onAnimationStart: _propTypes2.default.func,\n  onAnimationEnd: _propTypes2.default.func,\n  animationId: _propTypes2.default.number,\n  isAnimationActive: _propTypes2.default.bool,\n  animationBegin: _propTypes2.default.number,\n  animationDuration: _propTypes2.default.number,\n  animationEasing: _propTypes2.default.oneOf(['ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear']),\n\n  id: _propTypes2.default.string\n}), _class2.defaultProps = {\n  stroke: '#3182bd',\n  fill: '#3182bd',\n  fillOpacity: 0.6,\n  xAxisId: 0,\n  yAxisId: 0,\n  legendType: 'line',\n  connectNulls: false,\n  // points of area\n  points: [],\n  dot: false,\n  activeDot: true,\n  hide: false,\n\n  isAnimationActive: !(0, _ReactUtils.isSsr)(),\n  animationBegin: 0,\n  animationDuration: 1500,\n  animationEasing: 'ease'\n}, _class2.getBaseValue = function (props, xAxis, yAxis) {\n  var layout = props.layout,\n      baseValue = props.baseValue;\n\n\n  if ((0, _DataUtils.isNumber)(baseValue)) {\n    return baseValue;\n  }\n\n  var numericAxis = layout === 'horizontal' ? yAxis : xAxis;\n  var domain = numericAxis.scale.domain();\n\n  if (numericAxis.type === 'number') {\n    var max = Math.max(domain[0], domain[1]);\n    var min = Math.min(domain[0], domain[1]);\n\n    if (baseValue === 'dataMin') {\n      return min;\n    }\n    if (baseValue === 'dataMax') {\n      return max;\n    }\n\n    return max < 0 ? max : Math.max(Math.min(domain[0], domain[1]), 0);\n  }\n\n  if (baseValue === 'dataMin') {\n    return domain[0];\n  }\n  if (baseValue === 'dataMax') {\n    return domain[1];\n  }\n\n  return domain[0];\n}, _class2.getComposedData = function (_ref3) {\n  var props = _ref3.props,\n      xAxis = _ref3.xAxis,\n      yAxis = _ref3.yAxis,\n      xAxisTicks = _ref3.xAxisTicks,\n      yAxisTicks = _ref3.yAxisTicks,\n      bandSize = _ref3.bandSize,\n      dataKey = _ref3.dataKey,\n      stackedData = _ref3.stackedData,\n      dataStartIndex = _ref3.dataStartIndex,\n      displayedData = _ref3.displayedData,\n      offset = _ref3.offset;\n  var layout = props.layout;\n\n  var hasStack = stackedData && stackedData.length;\n  var baseValue = Area.getBaseValue(props, xAxis, yAxis);\n  var isRange = false;\n\n  var points = displayedData.map(function (entry, index) {\n    var value = void 0;\n\n    if (hasStack) {\n      value = stackedData[dataStartIndex + index];\n    } else {\n      value = (0, _ChartUtils.getValueByDataKey)(entry, dataKey);\n\n      if (!(0, _isArray3.default)(value)) {\n        value = [baseValue, value];\n      } else {\n        isRange = true;\n      }\n    }\n\n    if (layout === 'horizontal') {\n      return {\n        x: (0, _ChartUtils.getCateCoordinateOfLine)({ axis: xAxis, ticks: xAxisTicks, bandSize: bandSize, entry: entry, index: index }),\n        y: (0, _isNil3.default)(value[1]) ? null : yAxis.scale(value[1]),\n        value: value,\n        payload: entry\n      };\n    }\n\n    return {\n      x: (0, _isNil3.default)(value[1]) ? null : xAxis.scale(value[1]),\n      y: (0, _ChartUtils.getCateCoordinateOfLine)({ axis: yAxis, ticks: yAxisTicks, bandSize: bandSize, entry: entry, index: index }),\n      value: value,\n      payload: entry\n    };\n  });\n\n  var baseLine = void 0;\n  if (hasStack || isRange) {\n    baseLine = points.map(function (entry) {\n      return {\n        x: layout === 'horizontal' ? entry.x : xAxis.scale(entry && entry.value[0]),\n        y: layout === 'horizontal' ? yAxis.scale(entry && entry.value[0]) : entry.y\n      };\n    });\n  } else if (layout === 'horizontal') {\n    baseLine = yAxis.scale(baseValue);\n  } else {\n    baseLine = xAxis.scale(baseValue);\n  }\n\n  return _extends({ points: points, baseLine: baseLine, layout: layout, isRange: isRange }, offset);\n}, _class2.renderDotItem = function (option, props) {\n  var dotItem = void 0;\n\n  if (_react2.default.isValidElement(option)) {\n    dotItem = _react2.default.cloneElement(option, props);\n  } else if ((0, _isFunction3.default)(option)) {\n    dotItem = option(props);\n  } else {\n    dotItem = _react2.default.createElement(_Dot2.default, _extends({}, props, { className: 'recharts-area-dot' }));\n  }\n\n  return dotItem;\n}, _temp2)) || _class;\n\nexports.default = Area;"},"hash":"ac8379add4cf1ef45f1d14aaea8b1d9f"}