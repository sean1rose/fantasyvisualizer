{"dependencies":[{"name":"lodash/isFunction","loc":{"line":7,"column":27}},{"name":"lodash/isNaN","loc":{"line":11,"column":22}},{"name":"react","loc":{"line":24,"column":21}},{"name":"prop-types","loc":{"line":28,"column":25}},{"name":"react-smooth","loc":{"line":32,"column":27}},{"name":"classnames","loc":{"line":36,"column":26}},{"name":"../container/Surface","loc":{"line":40,"column":23}},{"name":"../container/Layer","loc":{"line":44,"column":21}},{"name":"../shape/Rectangle","loc":{"line":48,"column":25}},{"name":"../util/ReactUtils","loc":{"line":52,"column":26}},{"name":"../component/Tooltip","loc":{"line":54,"column":23}},{"name":"../util/PureRender","loc":{"line":58,"column":26}},{"name":"../util/ChartUtils","loc":{"line":62,"column":26}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _isFunction2 = require('lodash/isFunction');\n\nvar _isFunction3 = _interopRequireDefault(_isFunction2);\n\nvar _isNaN2 = require('lodash/isNaN');\n\nvar _isNaN3 = _interopRequireDefault(_isNaN2);\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _class2, _temp2;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**\n                                                                                                                                                                                                                                                                   * @fileOverview TreemapChart\n                                                                                                                                                                                                                                                                   */\n\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactSmooth = require('react-smooth');\n\nvar _reactSmooth2 = _interopRequireDefault(_reactSmooth);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _Surface = require('../container/Surface');\n\nvar _Surface2 = _interopRequireDefault(_Surface);\n\nvar _Layer = require('../container/Layer');\n\nvar _Layer2 = _interopRequireDefault(_Layer);\n\nvar _Rectangle = require('../shape/Rectangle');\n\nvar _Rectangle2 = _interopRequireDefault(_Rectangle);\n\nvar _ReactUtils = require('../util/ReactUtils');\n\nvar _Tooltip = require('../component/Tooltip');\n\nvar _Tooltip2 = _interopRequireDefault(_Tooltip);\n\nvar _PureRender = require('../util/PureRender');\n\nvar _PureRender2 = _interopRequireDefault(_PureRender);\n\nvar _ChartUtils = require('../util/ChartUtils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar computeNode = function computeNode(_ref) {\n  var depth = _ref.depth,\n      node = _ref.node,\n      index = _ref.index,\n      valueKey = _ref.valueKey;\n  var children = node.children;\n\n  var childDepth = depth + 1;\n  var computedChildren = children && children.length ? children.map(function (child, i) {\n    return computeNode({ depth: childDepth, node: child, index: i, valueKey: valueKey });\n  }) : null;\n  var value = void 0;\n\n  if (children && children.length) {\n    value = computedChildren.reduce(function (result, child) {\n      return result + child.value;\n    }, 0);\n  } else {\n    value = (0, _isNaN3.default)(node[valueKey]) || node[valueKey] <= 0 ? 0 : node[valueKey];\n  }\n\n  return _extends({}, node, {\n    children: computedChildren,\n    value: value, depth: depth, index: index\n  });\n};\n\nvar filterRect = function filterRect(node) {\n  return { x: node.x, y: node.y, width: node.width, height: node.height };\n};\n\n// Compute the area for each child based on value & scale.\nvar getAreaOfChildren = function getAreaOfChildren(children, areaValueRatio) {\n  var ratio = areaValueRatio < 0 ? 0 : areaValueRatio;\n\n  return children.map(function (child) {\n    var area = child.value * ratio;\n\n    return _extends({}, child, {\n      area: (0, _isNaN3.default)(area) || area <= 0 ? 0 : area\n    });\n  });\n};\n\n// Computes the score for the specified row, as the worst aspect ratio.\nvar getWorstScore = function getWorstScore(row, parentSize, aspectRatio) {\n  var parentArea = parentSize * parentSize;\n  var rowArea = row.area * row.area;\n\n  var _row$reduce = row.reduce(function (result, child) {\n    return {\n      min: Math.min(result.min, child.area),\n      max: Math.max(result.max, child.area)\n    };\n  }, { min: Infinity, max: 0 }),\n      min = _row$reduce.min,\n      max = _row$reduce.max;\n\n  return rowArea ? Math.max(parentArea * max * aspectRatio / rowArea, rowArea / (parentArea * min * aspectRatio)) : Infinity;\n};\n\nvar horizontalPosition = function horizontalPosition(row, parentSize, parentRect, isFlush) {\n  var rowHeight = parentSize ? Math.round(row.area / parentSize) : 0;\n\n  if (isFlush || rowHeight > parentRect.height) {\n    rowHeight = parentRect.height;\n  }\n\n  var curX = parentRect.x;\n  var child = void 0;\n  for (var i = 0, len = row.length; i < len; i++) {\n    child = row[i];\n    child.x = curX;\n    child.y = parentRect.y;\n    child.height = rowHeight;\n    child.width = Math.min(rowHeight ? Math.round(child.area / rowHeight) : 0, parentRect.x + parentRect.width - curX);\n    curX += child.width;\n  }\n  // what's z\n  child.z = true;\n  // add the remain x to the last one of row\n  child.width += parentRect.x + parentRect.width - curX;\n\n  return _extends({}, parentRect, {\n    y: parentRect.y + rowHeight,\n    height: parentRect.height - rowHeight\n  });\n};\n\nvar verticalPosition = function verticalPosition(row, parentSize, parentRect, isFlush) {\n  var rowWidth = parentSize ? Math.round(row.area / parentSize) : 0;\n\n  if (isFlush || rowWidth > parentRect.width) {\n    rowWidth = parentRect.width;\n  }\n\n  var curY = parentRect.y;\n  var child = void 0;\n  for (var i = 0, len = row.length; i < len; i++) {\n    child = row[i];\n    child.x = parentRect.x;\n    child.y = curY;\n    child.width = rowWidth;\n    child.height = Math.min(rowWidth ? Math.round(child.area / rowWidth) : 0, parentRect.y + parentRect.height - curY);\n    curY += child.height;\n  }\n  child.z = false;\n  child.height += parentRect.y + parentRect.height - curY;\n\n  return _extends({}, parentRect, {\n    x: parentRect.x + rowWidth,\n    width: parentRect.width - rowWidth\n  });\n};\n\nvar position = function position(row, parentSize, parentRect, isFlush) {\n  if (parentSize === parentRect.width) {\n    return horizontalPosition(row, parentSize, parentRect, isFlush);\n  }\n\n  return verticalPosition(row, parentSize, parentRect, isFlush);\n};\n\n// Recursively arranges the specified node's children into squarified rows.\nvar squarify = function squarify(node, aspectRatio) {\n  var children = node.children;\n\n  if (children && children.length) {\n    var rect = filterRect(node);\n    var row = [];\n    var best = Infinity; // the best row score so far\n    var child = void 0,\n        score = void 0; // the current row score\n    var size = Math.min(rect.width, rect.height); // initial orientation\n    var scaleChildren = getAreaOfChildren(children, rect.width * rect.height / node.value);\n    var tempChildren = scaleChildren.slice();\n\n    row.area = 0;\n\n    while (tempChildren.length > 0) {\n      // row first\n      row.push(child = tempChildren[0]);\n      row.area += child.area;\n\n      score = getWorstScore(row, size, aspectRatio);\n      if (score <= best) {\n        // continue with this orientation\n        tempChildren.shift();\n        best = score;\n      } else {\n        // abort, and try a different orientation\n        row.area -= row.pop().area;\n        rect = position(row, size, rect, false);\n        size = Math.min(rect.width, rect.height);\n        row.length = row.area = 0;\n        best = Infinity;\n      }\n    }\n\n    if (row.length) {\n      rect = position(row, size, rect, true);\n      row.length = row.area = 0;\n    }\n\n    return _extends({}, node, { children: scaleChildren.map(function (c) {\n        return squarify(c, aspectRatio);\n      }) });\n  }\n\n  return node;\n};\n\nvar Treemap = (0, _PureRender2.default)(_class = (_temp2 = _class2 = function (_Component) {\n  _inherits(Treemap, _Component);\n\n  function Treemap() {\n    var _ref2;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Treemap);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = Treemap.__proto__ || Object.getPrototypeOf(Treemap)).call.apply(_ref2, [this].concat(args))), _this), _this.state = _this.createDefaultState(), _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(Treemap, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.data !== this.props.data) {\n        this.setState(this.createDefaultState());\n      }\n    }\n    /**\n     * Returns default, reset state for the treemap chart.\n     * @return {Object} Whole new state\n     */\n\n  }, {\n    key: 'createDefaultState',\n    value: function createDefaultState() {\n      return {\n        isTooltipActive: false,\n        activeNode: null\n      };\n    }\n  }, {\n    key: 'handleMouseEnter',\n    value: function handleMouseEnter(node, e) {\n      var _props = this.props,\n          onMouseEnter = _props.onMouseEnter,\n          children = _props.children;\n\n      var tooltipItem = (0, _ReactUtils.findChildByType)(children, _Tooltip2.default);\n\n      if (tooltipItem) {\n        this.setState({\n          isTooltipActive: true,\n          activeNode: node\n        }, function () {\n          if (onMouseEnter) {\n            onMouseEnter(node, e);\n          }\n        });\n      } else if (onMouseEnter) {\n        onMouseEnter(node, e);\n      }\n    }\n  }, {\n    key: 'handleMouseLeave',\n    value: function handleMouseLeave(node, e) {\n      var _props2 = this.props,\n          onMouseLeave = _props2.onMouseLeave,\n          children = _props2.children;\n\n      var tooltipItem = (0, _ReactUtils.findChildByType)(children, _Tooltip2.default);\n\n      if (tooltipItem) {\n        this.setState({\n          isTooltipActive: false,\n          activeNode: null\n        }, function () {\n          if (onMouseLeave) {\n            onMouseLeave(node, e);\n          }\n        });\n      } else if (onMouseLeave) {\n        onMouseLeave(node, e);\n      }\n    }\n  }, {\n    key: 'handleClick',\n    value: function handleClick(node) {\n      var onClick = this.props.onClick;\n\n\n      if (onClick) {\n        onClick(node);\n      }\n    }\n  }, {\n    key: 'renderAnimatedItem',\n    value: function renderAnimatedItem(content, nodeProps, isLeaf) {\n      var _this2 = this;\n\n      var _props3 = this.props,\n          isAnimationActive = _props3.isAnimationActive,\n          animationBegin = _props3.animationBegin,\n          animationDuration = _props3.animationDuration,\n          animationEasing = _props3.animationEasing,\n          isUpdateAnimationActive = _props3.isUpdateAnimationActive;\n      var width = nodeProps.width,\n          height = nodeProps.height,\n          x = nodeProps.x,\n          y = nodeProps.y;\n\n      var translateX = parseInt((Math.random() * 2 - 1) * width, 10);\n      var event = {};\n\n      if (isLeaf) {\n        event = {\n          onMouseEnter: this.handleMouseEnter.bind(this, nodeProps),\n          onMouseLeave: this.handleMouseLeave.bind(this, nodeProps),\n          onClick: this.handleClick.bind(this, nodeProps)\n        };\n      }\n\n      return _react2.default.createElement(\n        _reactSmooth2.default,\n        {\n          from: { x: x, y: y, width: width, height: height },\n          to: { x: x, y: y, width: width, height: height },\n          duration: animationDuration,\n          easing: animationEasing,\n          isActive: isUpdateAnimationActive\n        },\n        function (_ref3) {\n          var currX = _ref3.x,\n              currY = _ref3.y,\n              currWidth = _ref3.width,\n              currHeight = _ref3.height;\n          return _react2.default.createElement(\n            _reactSmooth2.default,\n            {\n              from: 'translate(' + translateX + 'px, ' + translateX + 'px)',\n              to: 'translate(0, 0)',\n              attributeName: 'transform',\n              begin: animationBegin,\n              easing: animationEasing,\n              isActive: isAnimationActive,\n              duration: animationDuration\n            },\n            _react2.default.createElement(\n              _Layer2.default,\n              event,\n              _this2.renderContentItem(content, _extends({}, nodeProps, {\n                isAnimationActive: isAnimationActive,\n                isUpdateAnimationActive: !isUpdateAnimationActive,\n                width: currWidth,\n                height: currHeight,\n                x: currX,\n                y: currY\n              }))\n            )\n          );\n        }\n      );\n    }\n  }, {\n    key: 'renderContentItem',\n    value: function renderContentItem(content, nodeProps) {\n      if (_react2.default.isValidElement(content)) {\n        return _react2.default.cloneElement(content, nodeProps);\n      } else if ((0, _isFunction3.default)(content)) {\n        return content(nodeProps);\n      }\n\n      return _react2.default.createElement(_Rectangle2.default, _extends({\n        fill: '#fff',\n        stroke: '#000'\n      }, nodeProps));\n    }\n  }, {\n    key: 'renderNode',\n    value: function renderNode(root, node, i) {\n      var _this3 = this;\n\n      var content = this.props.content;\n\n      var nodeProps = _extends({}, (0, _ReactUtils.getPresentationAttributes)(this.props), node, { root: root });\n      var isLeaf = !node.children || !node.children.length;\n\n      return _react2.default.createElement(\n        _Layer2.default,\n        { key: 'recharts-treemap-node-' + i, className: 'recharts-treemap-depth-' + node.depth },\n        this.renderAnimatedItem(content, nodeProps, isLeaf),\n        node.children && node.children.length ? node.children.map(function (child, index) {\n          return _this3.renderNode(node, child, index);\n        }) : null\n      );\n    }\n  }, {\n    key: 'renderAllNodes',\n    value: function renderAllNodes() {\n      var _props4 = this.props,\n          width = _props4.width,\n          height = _props4.height,\n          data = _props4.data,\n          dataKey = _props4.dataKey,\n          aspectRatio = _props4.aspectRatio;\n\n\n      var root = computeNode({\n        depth: 0,\n        node: { children: data, x: 0, y: 0, width: width, height: height },\n        index: 0,\n        valueKey: dataKey\n      });\n\n      var formatRoot = squarify(root, aspectRatio);\n\n      return this.renderNode(formatRoot, formatRoot, 0);\n    }\n  }, {\n    key: 'renderTooltip',\n    value: function renderTooltip() {\n      var _props5 = this.props,\n          children = _props5.children,\n          nameKey = _props5.nameKey;\n\n      var tooltipItem = (0, _ReactUtils.findChildByType)(children, _Tooltip2.default);\n\n      if (!tooltipItem) {\n        return null;\n      }\n\n      var _props6 = this.props,\n          width = _props6.width,\n          height = _props6.height,\n          dataKey = _props6.dataKey;\n      var _state = this.state,\n          isTooltipActive = _state.isTooltipActive,\n          activeNode = _state.activeNode;\n\n      var viewBox = { x: 0, y: 0, width: width, height: height };\n      var coordinate = activeNode ? {\n        x: activeNode.x + activeNode.width / 2,\n        y: activeNode.y + activeNode.height / 2\n      } : null;\n      var payload = isTooltipActive && activeNode ? [{\n        payload: activeNode,\n        name: (0, _ChartUtils.getValueByDataKey)(activeNode, nameKey, ''),\n        value: (0, _ChartUtils.getValueByDataKey)(activeNode, dataKey)\n      }] : [];\n\n      return _react2.default.cloneElement(tooltipItem, {\n        viewBox: viewBox,\n        active: isTooltipActive,\n        coordinate: coordinate,\n        label: '',\n        payload: payload\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      if (!(0, _ReactUtils.validateWidthHeight)(this)) {\n        return null;\n      }\n\n      var _props7 = this.props,\n          width = _props7.width,\n          height = _props7.height,\n          className = _props7.className,\n          style = _props7.style,\n          children = _props7.children,\n          others = _objectWithoutProperties(_props7, ['width', 'height', 'className', 'style', 'children']);\n\n      var attrs = (0, _ReactUtils.getPresentationAttributes)(others);\n\n      return _react2.default.createElement(\n        'div',\n        {\n          className: (0, _classnames2.default)('recharts-wrapper', className),\n          style: _extends({}, style, { position: 'relative', cursor: 'default', width: width, height: height })\n        },\n        _react2.default.createElement(\n          _Surface2.default,\n          _extends({}, attrs, { width: width, height: height }),\n          this.renderAllNodes(),\n          (0, _ReactUtils.filterSvgElements)(children)\n        ),\n        this.renderTooltip()\n      );\n    }\n  }]);\n\n  return Treemap;\n}(_react.Component), _class2.displayName = 'Treemap', _class2.propTypes = {\n  width: _propTypes2.default.number,\n  height: _propTypes2.default.number,\n  data: _propTypes2.default.array,\n  style: _propTypes2.default.object,\n  aspectRatio: _propTypes2.default.number,\n  content: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.func]),\n  fill: _propTypes2.default.string,\n  stroke: _propTypes2.default.string,\n  className: _propTypes2.default.string,\n  nameKey: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.func]),\n  dataKey: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.func]),\n  children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node]),\n\n  onMouseEnter: _propTypes2.default.func,\n  onMouseLeave: _propTypes2.default.func,\n  onClick: _propTypes2.default.func,\n\n  isAnimationActive: _propTypes2.default.bool,\n  isUpdateAnimationActive: _propTypes2.default.bool,\n  animationBegin: _propTypes2.default.number,\n  animationDuration: _propTypes2.default.number,\n  animationEasing: _propTypes2.default.oneOf(['ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear'])\n}, _class2.defaultProps = {\n  dataKey: 'value',\n  aspectRatio: 0.5 * (1 + Math.sqrt(5)),\n  isAnimationActive: !(0, _ReactUtils.isSsr)(),\n  isUpdateAnimationActive: !(0, _ReactUtils.isSsr)(),\n  animationBegin: 0,\n  animationDuration: 1500,\n  animationEasing: 'linear'\n}, _temp2)) || _class;\n\nexports.default = Treemap;"},"hash":"9f3991811dcc2202306a137c7fe0a5e0"}