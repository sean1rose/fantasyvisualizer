{"dependencies":[{"name":"prop-types","loc":{"line":5,"column":25}},{"name":"recompose/compose","loc":{"line":9,"column":23}},{"name":"recompose/defaultProps","loc":{"line":13,"column":29}},{"name":"recompose/setPropTypes","loc":{"line":17,"column":29}},{"name":"recompose/withPropsOnChange","loc":{"line":21,"column":33}},{"name":"d3-hierarchy","loc":{"line":25,"column":27}},{"name":"../lib/propertiesConverters","loc":{"line":27,"column":36}}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _compose = require('recompose/compose');\n\nvar _compose2 = _interopRequireDefault(_compose);\n\nvar _defaultProps2 = require('recompose/defaultProps');\n\nvar _defaultProps3 = _interopRequireDefault(_defaultProps2);\n\nvar _setPropTypes2 = require('recompose/setPropTypes');\n\nvar _setPropTypes3 = _interopRequireDefault(_setPropTypes2);\n\nvar _withPropsOnChange = require('recompose/withPropsOnChange');\n\nvar _withPropsOnChange2 = _interopRequireDefault(_withPropsOnChange);\n\nvar _d3Hierarchy = require('d3-hierarchy');\n\nvar _propertiesConverters = require('../lib/propertiesConverters');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * This HOC watch hierarchical data props change\n * and returns the corresponding summed hierarchy.\n * Using it prevent from having a new ref each time\n * we pass through the component, useful for shallow comparison.\n */\nexports.default = function () {\n    var _defaultProps, _setPropTypes;\n\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$srcKey = _ref.srcKey,\n        srcKey = _ref$srcKey === undefined ? 'root' : _ref$srcKey,\n        _ref$destKey = _ref.destKey,\n        destKey = _ref$destKey === undefined ? 'root' : _ref$destKey,\n        _ref$valueKey = _ref.valueKey,\n        valueKey = _ref$valueKey === undefined ? 'value' : _ref$valueKey,\n        _ref$valueDefault = _ref.valueDefault,\n        valueDefault = _ref$valueDefault === undefined ? 'value' : _ref$valueDefault;\n\n    return (0, _compose2.default)((0, _defaultProps3.default)((_defaultProps = {}, _defaultProps[valueKey] = valueDefault, _defaultProps)), (0, _setPropTypes3.default)((_setPropTypes = {}, _setPropTypes[srcKey] = _propTypes2.default.object.isRequired, _setPropTypes[valueKey] = _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]).isRequired, _setPropTypes)), (0, _withPropsOnChange2.default)([srcKey, valueKey], function (props) {\n        var _ref2;\n\n        return _ref2 = {}, _ref2[destKey] = (0, _d3Hierarchy.hierarchy)(props[srcKey]).sum((0, _propertiesConverters.getAccessorFor)(props[valueKey])), _ref2;\n    }));\n}; /*\n    * This file is part of the nivo project.\n    *\n    * Copyright 2016-present, RaphaÃ«l Benitte.\n    *\n    * For the full copyright and license information, please view the LICENSE\n    * file that was distributed with this source code.\n    */"},"hash":"2e1070f47258223046e88ca3b69e9c29"}