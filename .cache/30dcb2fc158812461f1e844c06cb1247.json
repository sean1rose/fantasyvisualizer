{"dependencies":[{"name":"lodash/set","loc":{"line":6,"column":20}},{"name":"lodash/get","loc":{"line":10,"column":20}},{"name":"lodash/isEqual","loc":{"line":14,"column":24}},{"name":"lodash/pick","loc":{"line":18,"column":21}},{"name":"lodash/isPlainObject","loc":{"line":22,"column":30}},{"name":"lodash/isFunction","loc":{"line":26,"column":27}},{"name":"../components/defs","loc":{"line":40,"column":20}}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\nexports.bindDefs = exports.isMatchingDef = undefined;\n\nvar _set2 = require('lodash/set');\n\nvar _set3 = _interopRequireDefault(_set2);\n\nvar _get2 = require('lodash/get');\n\nvar _get3 = _interopRequireDefault(_get2);\n\nvar _isEqual2 = require('lodash/isEqual');\n\nvar _isEqual3 = _interopRequireDefault(_isEqual2);\n\nvar _pick2 = require('lodash/pick');\n\nvar _pick3 = _interopRequireDefault(_pick2);\n\nvar _isPlainObject2 = require('lodash/isPlainObject');\n\nvar _isPlainObject3 = _interopRequireDefault(_isPlainObject2);\n\nvar _isFunction2 = require('lodash/isFunction');\n\nvar _isFunction3 = _interopRequireDefault(_isFunction2);\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * This file is part of the nivo project.\n                                                                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                                                                   * Copyright 2016-present, RaphaÃ«l Benitte.\n                                                                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                                                                   * For the full copyright and license information, please view the LICENSE\n                                                                                                                                                                                                                                                                   * file that was distributed with this source code.\n                                                                                                                                                                                                                                                                   */\n\n\nvar _defs = require('../components/defs');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar gradientKeys = Object.keys(_defs.gradientTypes);\nvar patternKeys = Object.keys(_defs.patternTypes);\n\n/**\n * Check a node matches given def predicate.\n *\n * @param {string|Function|Object} predicate\n * @param {Object}                 node\n * @param {string}                 [dataKey] - Optional path to access node data\n * @returns {boolean}\n */\nvar isMatchingDef = exports.isMatchingDef = function isMatchingDef(predicate, node, dataKey) {\n    if (predicate === '*') {\n        return true;\n    } else if ((0, _isFunction3.default)(predicate)) {\n        return predicate(node);\n    } else if ((0, _isPlainObject3.default)(predicate)) {\n        var data = dataKey ? (0, _get3.default)(node, dataKey) : node;\n        return (0, _isEqual3.default)((0, _pick3.default)(data, Object.keys(predicate)), predicate);\n    }\n\n    return false;\n};\n\n/**\n * Compute SVG defs.\n *\n * @param {Array.<Object>} defs               - Base SVG defs configs\n * @param {Array.<Object>} nodes              - Data nodes to apply defs on\n * @param {Array.<Object>} rules              - Rules used to conditionally apply defs on data nodes\n * @param {string}         [dataKey]          - Path to node data, used for rule object query based predicate\n * @param {string}         [colorKey='color'] - Node color path, required when inheritance is involved\n * @param {string}         [targetKey='fill'] - Node target property to apply def ID on\n * @returns {Array}\n */\nvar bindDefs = exports.bindDefs = function bindDefs(defs, nodes, rules) {\n    var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n        dataKey = _ref.dataKey,\n        _ref$colorKey = _ref.colorKey,\n        colorKey = _ref$colorKey === undefined ? 'color' : _ref$colorKey,\n        _ref$targetKey = _ref.targetKey,\n        targetKey = _ref$targetKey === undefined ? 'fill' : _ref$targetKey;\n\n    var boundDefs = [];\n\n    // will hold generated variation ids,\n    // to avoid generating multiple identical defs\n    var generatedIds = {};\n\n    if (defs.length && nodes.length) {\n        // first, add base defs\n        boundDefs = [].concat(defs);\n\n        nodes.forEach(function (node) {\n            var _loop = function _loop(i) {\n                var _rules$i = rules[i],\n                    id = _rules$i.id,\n                    match = _rules$i.match;\n\n                if (isMatchingDef(match, node, dataKey)) {\n                    var def = defs.find(function (_ref2) {\n                        var defId = _ref2.id;\n                        return defId === id;\n                    });\n                    if (def) {\n                        if (patternKeys.includes(def.type)) {\n                            if (def.background === 'inherit' || def.color === 'inherit') {\n                                var nodeColor = (0, _get3.default)(node, colorKey);\n                                var background = def.background;\n                                var color = def.color;\n\n                                var inheritedId = id;\n                                if (def.background === 'inherit') {\n                                    inheritedId = inheritedId + '.bg.' + nodeColor;\n                                    background = nodeColor;\n                                }\n                                if (def.color === 'inherit') {\n                                    inheritedId = inheritedId + '.fg.' + nodeColor;\n                                    color = nodeColor;\n                                }\n\n                                (0, _set3.default)(node, targetKey, 'url(#' + inheritedId + ')');\n                                if (!generatedIds[inheritedId]) {\n                                    boundDefs.push(_extends({}, def, {\n                                        id: inheritedId,\n                                        background: background,\n                                        color: color\n                                    }));\n                                    generatedIds[inheritedId] = 1;\n                                }\n                            } else {\n                                // do not generate new def as there's no inheritance involved\n                                (0, _set3.default)(node, targetKey, 'url(#' + id + ')');\n                            }\n                        } else if (gradientKeys.includes(def.type)) {\n                            var allColors = def.colors.map(function (_ref3) {\n                                var color = _ref3.color;\n                                return color;\n                            });\n\n                            if (allColors.includes('inherit')) {\n                                var _nodeColor = (0, _get3.default)(node, colorKey);\n\n                                var _inheritedId = id;\n                                var inheritedDef = _extends({}, def, {\n                                    colors: def.colors.map(function (colorStop, i) {\n                                        if (colorStop.color !== 'inherit') return colorStop;\n\n                                        _inheritedId = _inheritedId + '.' + i + '.' + _nodeColor;\n\n                                        return _extends({}, colorStop, {\n                                            color: colorStop.color === 'inherit' ? _nodeColor : colorStop.color\n                                        });\n                                    })\n                                });\n                                inheritedDef.id = _inheritedId;\n\n                                (0, _set3.default)(node, targetKey, 'url(#' + _inheritedId + ')');\n                                if (!generatedIds[_inheritedId]) {\n                                    boundDefs.push(inheritedDef);\n                                    generatedIds[_inheritedId] = 1;\n                                }\n                            } else {\n                                // do not generate new def as there's no inheritance involved\n                                (0, _set3.default)(node, targetKey, 'url(#' + id + ')');\n                            }\n                        }\n                    }\n\n                    // break loop on first match\n                    return 'break';\n                }\n            };\n\n            for (var i = 0; i < rules.length; i++) {\n                var _ret = _loop(i);\n\n                if (_ret === 'break') break;\n            }\n        });\n    }\n\n    return boundDefs;\n};"},"hash":"73539f249c8e4a1553b4a5c1c3a213bc"}