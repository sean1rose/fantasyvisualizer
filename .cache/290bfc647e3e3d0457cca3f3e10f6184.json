{"dependencies":[{"name":"lodash/max","loc":{"line":6,"column":20}},{"name":"lodash/min","loc":{"line":10,"column":20}},{"name":"lodash/range","loc":{"line":14,"column":22}},{"name":"d3-scale","loc":{"line":18,"column":23}},{"name":"./common","loc":{"line":20,"column":22}}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\nexports.generateGroupedBars = exports.generateHorizontalGroupedBars = exports.generateVerticalGroupedBars = exports.getGroupedScale = undefined;\n\nvar _max2 = require('lodash/max');\n\nvar _max3 = _interopRequireDefault(_max2);\n\nvar _min2 = require('lodash/min');\n\nvar _min3 = _interopRequireDefault(_min2);\n\nvar _range2 = require('lodash/range');\n\nvar _range3 = _interopRequireDefault(_range2);\n\nvar _d3Scale = require('d3-scale');\n\nvar _common = require('./common');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Generates scale for grouped bar chart.\n *\n * @param {Array.<Object>} data\n * @param {Array.<string>} keys\n * @param {number}         _minValue\n * @param {number|string}  _maxValue\n * @param {Array.<number>} range\n * @returns {Function}\n */\n/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, RaphaÃ«l Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nvar getGroupedScale = exports.getGroupedScale = function getGroupedScale(data, keys, _minValue, _maxValue, range) {\n    var allValues = data.reduce(function (acc, entry) {\n        return [].concat(acc, keys.map(function (k) {\n            return entry[k];\n        }));\n    }, []);\n\n    var maxValue = _maxValue;\n    if (maxValue === 'auto') {\n        maxValue = (0, _max3.default)(allValues);\n    }\n\n    var minValue = _minValue;\n    if (minValue === 'auto') {\n        minValue = (0, _min3.default)(allValues);\n        if (minValue > 0) minValue = 0;\n    }\n\n    return (0, _d3Scale.scaleLinear)().rangeRound(range).domain([minValue, maxValue]);\n};\n\n/**\n * Generates x/y scales & bars for vertical grouped bar chart.\n *\n * @param {Array.<Object>} data\n * @param {Function}       getIndex\n * @param {Array.<string>} keys\n * @param {number}         minValue\n * @param {number}         maxValue\n * @param {boolean}        reverse\n * @param {number}         width\n * @param {number}         height\n * @param {Function}       getColor\n * @param {number}         [padding=0]\n * @param {number}         [innerPadding=0]\n * @return {{ xScale: Function, yScale: Function, bars: Array.<Object> }}\n */\nvar generateVerticalGroupedBars = exports.generateVerticalGroupedBars = function generateVerticalGroupedBars(_ref) {\n    var data = _ref.data,\n        getIndex = _ref.getIndex,\n        keys = _ref.keys,\n        minValue = _ref.minValue,\n        maxValue = _ref.maxValue,\n        reverse = _ref.reverse,\n        width = _ref.width,\n        height = _ref.height,\n        getColor = _ref.getColor,\n        _ref$padding = _ref.padding,\n        padding = _ref$padding === undefined ? 0 : _ref$padding,\n        _ref$innerPadding = _ref.innerPadding,\n        innerPadding = _ref$innerPadding === undefined ? 0 : _ref$innerPadding;\n\n    var xScale = (0, _common.getIndexedScale)(data, getIndex, [0, width], padding);\n    var yRange = reverse ? [0, height] : [height, 0];\n    var yScale = getGroupedScale(data, keys, minValue, maxValue, yRange);\n\n    var barWidth = (xScale.bandwidth() - innerPadding * (keys.length - 1)) / keys.length;\n    var yRef = yScale(0);\n\n    var getY = function getY(d) {\n        return d > 0 ? yScale(d) : yRef;\n    };\n    var getHeight = function getHeight(d, y) {\n        return d > 0 ? yRef - y : yScale(d) - yRef;\n    };\n    if (reverse) {\n        getY = function getY(d) {\n            return d < 0 ? yScale(d) : yRef;\n        };\n        getHeight = function getHeight(d, y) {\n            return d < 0 ? yRef - y : yScale(d) - yRef;\n        };\n    }\n\n    var bars = [];\n    if (barWidth > 0) {\n        keys.forEach(function (key, i) {\n            (0, _range3.default)(xScale.domain().length).forEach(function (index) {\n                var x = xScale(getIndex(data[index])) + barWidth * i + innerPadding * i;\n                var y = getY(data[index][key]);\n                var barHeight = getHeight(data[index][key], y);\n\n                if (barWidth > 0 && barHeight > 0) {\n                    var barData = {\n                        id: key,\n                        value: data[index][key],\n                        index: index,\n                        indexValue: getIndex(data[index]),\n                        data: data[index]\n                    };\n\n                    bars.push({\n                        key: key + '.' + barData.indexValue,\n                        data: barData,\n                        x: x,\n                        y: y,\n                        width: barWidth,\n                        height: barHeight,\n                        color: getColor(barData)\n                    });\n                }\n            });\n        });\n    }\n\n    return { xScale: xScale, yScale: yScale, bars: bars };\n};\n\n/**\n * Generates x/y scales & bars for horizontal grouped bar chart.\n *\n * @param {Array.<Object>} data\n * @param {Function}       getIndex\n * @param {Array.<string>} keys\n * @param {number}         minValue\n * @param {number}         maxValue\n * @param {boolean}        reverse\n * @param {number}         width\n * @param {number}         height\n * @param {Function}       getColor\n * @param {number}         [padding=0]\n * @param {number}         [innerPadding=0]\n * @return {{ xScale: Function, yScale: Function, bars: Array.<Object> }}\n */\nvar generateHorizontalGroupedBars = exports.generateHorizontalGroupedBars = function generateHorizontalGroupedBars(_ref2) {\n    var data = _ref2.data,\n        getIndex = _ref2.getIndex,\n        keys = _ref2.keys,\n        minValue = _ref2.minValue,\n        maxValue = _ref2.maxValue,\n        reverse = _ref2.reverse,\n        width = _ref2.width,\n        height = _ref2.height,\n        getColor = _ref2.getColor,\n        _ref2$padding = _ref2.padding,\n        padding = _ref2$padding === undefined ? 0 : _ref2$padding,\n        _ref2$innerPadding = _ref2.innerPadding,\n        innerPadding = _ref2$innerPadding === undefined ? 0 : _ref2$innerPadding;\n\n    var xRange = reverse ? [width, 0] : [0, width];\n    var xScale = getGroupedScale(data, keys, minValue, maxValue, xRange);\n    var yScale = (0, _common.getIndexedScale)(data, getIndex, [height, 0], padding);\n\n    var barHeight = (yScale.bandwidth() - innerPadding * (keys.length - 1)) / keys.length;\n    var xRef = xScale(0);\n\n    var getX = function getX(d) {\n        return d > 0 ? xRef : xScale(d);\n    };\n    var getWidth = function getWidth(d, x) {\n        return d > 0 ? xScale(d) - xRef : xRef - x;\n    };\n    if (reverse) {\n        getX = function getX(d) {\n            return d < 0 ? xRef : xScale(d);\n        };\n        getWidth = function getWidth(d, x) {\n            return d < 0 ? xScale(d) - xRef : xRef - x;\n        };\n    }\n\n    var bars = [];\n    if (barHeight > 0) {\n        keys.forEach(function (key, i) {\n            (0, _range3.default)(yScale.domain().length).forEach(function (index) {\n                var x = getX(data[index][key]);\n                var y = yScale(getIndex(data[index])) + barHeight * i + innerPadding * i;\n                var barWidth = getWidth(data[index][key], x);\n\n                if (barWidth > 0) {\n                    var barData = {\n                        id: key,\n                        value: data[index][key],\n                        index: index,\n                        indexValue: getIndex(data[index]),\n                        data: data[index]\n                    };\n\n                    bars.push({\n                        key: key + '.' + barData.indexValue,\n                        data: barData,\n                        x: x,\n                        y: y,\n                        width: barWidth,\n                        height: barHeight,\n                        color: getColor(barData)\n                    });\n                }\n            });\n        });\n    }\n\n    return { xScale: xScale, yScale: yScale, bars: bars };\n};\n\n/**\n * Generates x/y scales & bars for grouped bar chart.\n *\n * @param {Object} options\n * @return {{ xScale: Function, yScale: Function, bars: Array.<Object> }}\n */\nvar generateGroupedBars = exports.generateGroupedBars = function generateGroupedBars(options) {\n    return options.layout === 'vertical' ? generateVerticalGroupedBars(options) : generateHorizontalGroupedBars(options);\n};"},"hash":"49b0fa126afac8bf5ad22232f4aa322d"}