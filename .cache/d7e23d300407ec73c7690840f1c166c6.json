{"dependencies":[{"name":"babel-runtime/helpers/extends","loc":{"line":5,"column":24}},{"name":"babel-runtime/helpers/classCallCheck","loc":{"line":9,"column":31}},{"name":"babel-runtime/helpers/possibleConstructorReturn","loc":{"line":13,"column":42}},{"name":"babel-runtime/helpers/inherits","loc":{"line":17,"column":25}},{"name":"react","loc":{"line":21,"column":21}},{"name":"prop-types","loc":{"line":25,"column":25}},{"name":"classnames","loc":{"line":29,"column":26}},{"name":"rc-animate","loc":{"line":33,"column":25}},{"name":"rc-util/lib/Children/toArray","loc":{"line":37,"column":23}},{"name":"./Tree","loc":{"line":41,"column":20}}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _rcAnimate = require('rc-animate');\n\nvar _rcAnimate2 = _interopRequireDefault(_rcAnimate);\n\nvar _toArray = require('rc-util/lib/Children/toArray');\n\nvar _toArray2 = _interopRequireDefault(_toArray);\n\nvar _Tree = require('./Tree');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar defaultTitle = '---';\n\nvar TreeNode = function (_React$Component) {\n  (0, _inherits3['default'])(TreeNode, _React$Component);\n\n  function TreeNode(props) {\n    (0, _classCallCheck3['default'])(this, TreeNode);\n\n    var _this = (0, _possibleConstructorReturn3['default'])(this, _React$Component.call(this, props));\n\n    _this.onCheck = function () {\n      _this.props.root.onCheck(_this);\n    };\n\n    _this.onMouseEnter = function (e) {\n      e.preventDefault();\n      _this.props.root.onMouseEnter(e, _this);\n    };\n\n    _this.onMouseLeave = function (e) {\n      e.preventDefault();\n      _this.props.root.onMouseLeave(e, _this);\n    };\n\n    _this.onContextMenu = function (e) {\n      _this.props.root.onContextMenu(e, _this);\n    };\n\n    _this.onDragStart = function (e) {\n      e.stopPropagation();\n      _this.setState({\n        dragNodeHighlight: true\n      });\n      _this.props.root.onDragStart(e, _this);\n      try {\n        // ie throw error\n        // firefox-need-it\n        e.dataTransfer.setData('text/plain', '');\n      } catch (error) {\n        // empty\n      }\n    };\n\n    _this.onDragEnter = function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n      _this.props.root.onDragEnter(e, _this);\n    };\n\n    _this.onDragOver = function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n      _this.props.root.onDragOver(e, _this);\n    };\n\n    _this.onDragLeave = function (e) {\n      e.stopPropagation();\n      _this.props.root.onDragLeave(e, _this);\n    };\n\n    _this.onDrop = function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n      _this.setState({\n        dragNodeHighlight: false\n      });\n      _this.props.root.onDrop(e, _this);\n    };\n\n    _this.onDragEnd = function (e) {\n      e.stopPropagation();\n      _this.setState({\n        dragNodeHighlight: false\n      });\n      _this.props.root.onDragEnd(e, _this);\n    };\n\n    _this.onExpand = function () {\n      var callbackPromise = _this.props.root.onExpand(_this);\n      if (callbackPromise && typeof callbackPromise === 'object') {\n        var setLoading = function setLoading(dataLoading) {\n          _this.setState({ dataLoading: dataLoading });\n        };\n        setLoading(true);\n        callbackPromise.then(function () {\n          setLoading(false);\n        }, function () {\n          setLoading(false);\n        });\n      }\n    };\n\n    _this.saveSelectHandle = function (node) {\n      _this.selectHandle = node;\n    };\n\n    _this.state = {\n      dataLoading: false,\n      dragNodeHighlight: false\n    };\n    return _this;\n  }\n\n  TreeNode.prototype.onSelect = function onSelect() {\n    this.props.root.onSelect(this);\n  };\n\n  // keyboard event support\n  TreeNode.prototype.onKeyDown = function onKeyDown(e) {\n    e.preventDefault();\n  };\n\n  TreeNode.prototype.isSelectable = function isSelectable() {\n    var props = this.props,\n        context = this.context;\n\n    return 'selectable' in props ? props.selectable : context.rcTree.selectable;\n  };\n\n  TreeNode.prototype.renderSwitcher = function renderSwitcher(props, expandedState) {\n    var _classNames;\n\n    var prefixCls = props.prefixCls;\n    var switcherCls = (0, _classnames2['default'])(prefixCls + '-switcher', prefixCls + '-switcher_' + expandedState, (_classNames = {}, _classNames[prefixCls + '-switcher-disabled'] = props.disabled, _classNames));\n    return _react2['default'].createElement('span', { className: switcherCls, onClick: props.disabled ? null : this.onExpand });\n  };\n\n  TreeNode.prototype.renderCheckbox = function renderCheckbox(props) {\n    var _checkboxCls;\n\n    var prefixCls = props.prefixCls;\n    var checkboxCls = (_checkboxCls = {}, _checkboxCls[prefixCls + '-checkbox'] = true, _checkboxCls);\n    if (props.checked) {\n      checkboxCls[prefixCls + '-checkbox-checked'] = true;\n    } else if (props.halfChecked) {\n      checkboxCls[prefixCls + '-checkbox-indeterminate'] = true;\n    }\n    var customEle = null;\n    if (typeof props.checkable !== 'boolean') {\n      customEle = props.checkable;\n    }\n    if (props.disabled || props.disableCheckbox) {\n      checkboxCls[prefixCls + '-checkbox-disabled'] = true;\n      return _react2['default'].createElement(\n        'span',\n        { className: (0, _classnames2['default'])(checkboxCls) },\n        customEle\n      );\n    }\n    return _react2['default'].createElement(\n      'span',\n      {\n        className: (0, _classnames2['default'])(checkboxCls),\n        onClick: this.onCheck\n      },\n      customEle\n    );\n  };\n\n  TreeNode.prototype.renderChildren = function renderChildren(props) {\n    var renderFirst = this.renderFirst;\n    this.renderFirst = 1;\n    var transitionAppear = true;\n    if (!renderFirst && props.expanded) {\n      transitionAppear = false;\n    }\n    var children = null;\n    if (props.children) {\n      children = (0, _toArray2['default'])(props.children).filter(function (item) {\n        return !!item;\n      });\n    }\n    var newChildren = children;\n    if (children && (Array.isArray(children) && children.length && children.every(function (item) {\n      return item.type && item.type.isTreeNode;\n    }) || children.type && children.type.isTreeNode)) {\n      var _classNames2;\n\n      var animProps = {};\n      if (props.openTransitionName) {\n        animProps.transitionName = props.openTransitionName;\n      } else if (typeof props.openAnimation === 'object') {\n        animProps.animation = (0, _extends3['default'])({}, props.openAnimation);\n        if (!transitionAppear) {\n          delete animProps.animation.appear;\n        }\n      }\n      var cls = (0, _classnames2['default'])(props.prefixCls + '-child-tree', (_classNames2 = {}, _classNames2[props.prefixCls + '-child-tree-open'] = props.expanded, _classNames2));\n      newChildren = _react2['default'].createElement(\n        _rcAnimate2['default'],\n        (0, _extends3['default'])({}, animProps, {\n          showProp: 'data-expanded',\n          transitionAppear: transitionAppear,\n          component: ''\n        }),\n        !props.expanded ? null : _react2['default'].createElement(\n          'ul',\n          { className: cls, 'data-expanded': props.expanded },\n          _react2['default'].Children.map(children, function (item, index) {\n            return props.root.renderTreeNode(item, index, props.pos);\n          }, props.root)\n        )\n      );\n    }\n    return newChildren;\n  };\n\n  TreeNode.prototype.render = function render() {\n    var _iconEleCls,\n        _this2 = this;\n\n    var props = this.props;\n\n    var prefixCls = props.prefixCls;\n    var expandedState = props.expanded ? 'open' : 'close';\n    var iconState = expandedState;\n\n    var canRenderSwitcher = true;\n    var content = props.title;\n    var newChildren = this.renderChildren(props);\n    if (!newChildren || newChildren === props.children) {\n      // content = newChildren;\n      newChildren = null;\n      if (!props.loadData || props.isLeaf) {\n        canRenderSwitcher = false;\n        iconState = 'docu';\n      }\n    }\n    // For performance, does't render children into dom when `!props.expanded` (move to Animate)\n    // if (!props.expanded) {\n    //   newChildren = null;\n    // }\n\n    var iconEleCls = (_iconEleCls = {}, _iconEleCls[prefixCls + '-iconEle'] = true, _iconEleCls[prefixCls + '-icon_loading'] = this.state.dataLoading, _iconEleCls[prefixCls + '-icon__' + iconState] = true, _iconEleCls);\n\n    var selectHandle = function selectHandle() {\n      var icon = props.showIcon || props.loadData && _this2.state.dataLoading ? _react2['default'].createElement('span', { className: (0, _classnames2['default'])(iconEleCls) }) : null;\n      var title = _react2['default'].createElement(\n        'span',\n        { className: prefixCls + '-title' },\n        content\n      );\n      var wrap = prefixCls + '-node-content-wrapper';\n      var domProps = {\n        className: wrap + ' ' + wrap + '-' + (iconState === expandedState ? iconState : 'normal'),\n        onMouseEnter: _this2.onMouseEnter,\n        onMouseLeave: _this2.onMouseLeave,\n        onContextMenu: _this2.onContextMenu\n      };\n      if (!props.disabled) {\n        if (props.selected || _this2.state.dragNodeHighlight) {\n          domProps.className += ' ' + prefixCls + '-node-selected';\n        }\n        domProps.onClick = function (e) {\n          if (_this2.isSelectable()) {\n            e.preventDefault();\n            _this2.onSelect();\n          } else if (props.checkable && !props.disableCheckbox) {\n            e.preventDefault();\n            // && !props.disabled is checked on line 259\n            _this2.onCheck();\n          }\n        };\n        if (props.draggable) {\n          domProps.className += ' draggable';\n          domProps.draggable = true;\n          domProps['aria-grabbed'] = true;\n          domProps.onDragStart = _this2.onDragStart;\n        }\n      }\n      return _react2['default'].createElement(\n        'span',\n        (0, _extends3['default'])({\n          ref: _this2.saveSelectHandle,\n          title: typeof content === 'string' ? content : ''\n        }, domProps),\n        icon,\n        title\n      );\n    };\n\n    var liProps = {};\n    if (props.draggable) {\n      liProps.onDragEnter = this.onDragEnter;\n      liProps.onDragOver = this.onDragOver;\n      liProps.onDragLeave = this.onDragLeave;\n      liProps.onDrop = this.onDrop;\n      liProps.onDragEnd = this.onDragEnd;\n    }\n\n    var disabledCls = '';\n    var dragOverCls = '';\n    if (props.disabled) {\n      disabledCls = prefixCls + '-treenode-disabled';\n    } else if (props.dragOver) {\n      dragOverCls = 'drag-over';\n    } else if (props.dragOverGapTop) {\n      dragOverCls = 'drag-over-gap-top';\n    } else if (props.dragOverGapBottom) {\n      dragOverCls = 'drag-over-gap-bottom';\n    }\n\n    var filterCls = props.filterTreeNode(this) ? 'filter-node' : '';\n\n    var renderNoopSwitcher = function renderNoopSwitcher() {\n      return _react2['default'].createElement('span', { className: prefixCls + '-switcher ' + prefixCls + '-switcher-noop' });\n    };\n\n    return _react2['default'].createElement(\n      'li',\n      (0, _extends3['default'])({}, liProps, {\n        className: (0, _classnames2['default'])(props.className, disabledCls, dragOverCls, filterCls)\n      }),\n      canRenderSwitcher ? this.renderSwitcher(props, expandedState) : renderNoopSwitcher(),\n      props.checkable ? this.renderCheckbox(props) : null,\n      selectHandle(),\n      newChildren\n    );\n  };\n\n  return TreeNode;\n}(_react2['default'].Component);\n\nTreeNode.propTypes = {\n  prefixCls: _propTypes2['default'].string,\n  disabled: _propTypes2['default'].bool,\n  disableCheckbox: _propTypes2['default'].bool,\n  expanded: _propTypes2['default'].bool,\n  isLeaf: _propTypes2['default'].bool,\n  root: _propTypes2['default'].object,\n  onSelect: _propTypes2['default'].func\n};\nTreeNode.contextTypes = _Tree.contextTypes;\nTreeNode.defaultProps = {\n  title: defaultTitle\n};\n\n\nTreeNode.isTreeNode = 1;\n\nexports['default'] = TreeNode;\nmodule.exports = exports['default'];"},"hash":"9233f67678675fd81f712559bf8f1a88"}