{"dependencies":[{"name":"react","loc":{"line":5,"column":21}},{"name":"../../../lib/charts/calendar/CalendarLayout","loc":{"line":9,"column":30}},{"name":"./props","loc":{"line":13,"column":21}},{"name":"d3-time-format","loc":{"line":15,"column":28}},{"name":"../../../constants/directions","loc":{"line":17,"column":26}},{"name":"./CalendarDay","loc":{"line":19,"column":27}},{"name":"./CalendarMonthPath","loc":{"line":23,"column":33}},{"name":"../Container","loc":{"line":27,"column":25}},{"name":"../SvgWrapper","loc":{"line":31,"column":26}},{"name":"./enhance","loc":{"line":35,"column":23}}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _CalendarLayout = require('../../../lib/charts/calendar/CalendarLayout');\n\nvar _CalendarLayout2 = _interopRequireDefault(_CalendarLayout);\n\nvar _props = require('./props');\n\nvar _d3TimeFormat = require('d3-time-format');\n\nvar _directions = require('../../../constants/directions');\n\nvar _CalendarDay = require('./CalendarDay');\n\nvar _CalendarDay2 = _interopRequireDefault(_CalendarDay);\n\nvar _CalendarMonthPath = require('./CalendarMonthPath');\n\nvar _CalendarMonthPath2 = _interopRequireDefault(_CalendarMonthPath);\n\nvar _Container = require('../Container');\n\nvar _Container2 = _interopRequireDefault(_Container);\n\nvar _SvgWrapper = require('../SvgWrapper');\n\nvar _SvgWrapper2 = _interopRequireDefault(_SvgWrapper);\n\nvar _enhance = require('./enhance');\n\nvar _enhance2 = _interopRequireDefault(_enhance);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, RaphaÃ«l Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nvar monthLegendFormat = (0, _d3TimeFormat.timeFormat)('%b');\n\nvar Calendar = function Calendar(_ref) {\n    var data = _ref.data,\n        from = _ref.from,\n        to = _ref.to,\n        colorScale = _ref.colorScale,\n        margin = _ref.margin,\n        width = _ref.width,\n        height = _ref.height,\n        outerWidth = _ref.outerWidth,\n        outerHeight = _ref.outerHeight,\n        direction = _ref.direction,\n        emptyColor = _ref.emptyColor,\n        yearSpacing = _ref.yearSpacing,\n        yearLegendOffset = _ref.yearLegendOffset,\n        daySpacing = _ref.daySpacing,\n        dayBorderWidth = _ref.dayBorderWidth,\n        dayBorderColor = _ref.dayBorderColor,\n        monthBorderWidth = _ref.monthBorderWidth,\n        monthBorderColor = _ref.monthBorderColor,\n        monthLegendOffset = _ref.monthLegendOffset,\n        theme = _ref.theme,\n        isInteractive = _ref.isInteractive,\n        tooltipFormat = _ref.tooltipFormat,\n        onClick = _ref.onClick;\n\n    var _computeCalendar = (0, _CalendarLayout2.default)({\n        width: width,\n        height: height,\n        from: from,\n        to: to,\n        data: data,\n        direction: direction,\n        colorScale: colorScale,\n        emptyColor: emptyColor,\n        yearSpacing: yearSpacing,\n        daySpacing: daySpacing\n    }),\n        years = _computeCalendar.years,\n        months = _computeCalendar.months,\n        days = _computeCalendar.days;\n\n    return _react2.default.createElement(\n        _Container2.default,\n        { isInteractive: isInteractive, theme: theme },\n        function (_ref2) {\n            var showTooltip = _ref2.showTooltip,\n                hideTooltip = _ref2.hideTooltip;\n            return _react2.default.createElement(\n                _SvgWrapper2.default,\n                { width: outerWidth, height: outerHeight, margin: margin },\n                days.map(function (d) {\n                    return _react2.default.createElement(_CalendarDay2.default, {\n                        key: d.date.toString(),\n                        data: d,\n                        x: d.x,\n                        y: d.y,\n                        size: d.size,\n                        color: d.color,\n                        borderWidth: dayBorderWidth,\n                        borderColor: dayBorderColor,\n                        showTooltip: showTooltip,\n                        hideTooltip: hideTooltip,\n                        tooltipFormat: tooltipFormat,\n                        theme: theme,\n                        onClick: onClick\n                    });\n                }),\n                months.map(function (m) {\n                    return _react2.default.createElement(_CalendarMonthPath2.default, {\n                        key: m.date.toString(),\n                        path: m.path,\n                        borderWidth: monthBorderWidth,\n                        borderColor: monthBorderColor\n                    });\n                }),\n                months.map(function (month) {\n                    var transform = void 0;\n                    if (direction === _directions.DIRECTION_HORIZONTAL) {\n                        transform = 'translate(' + (month.bbox.x + month.bbox.width / 2) + ',' + (month.bbox.y - monthLegendOffset) + ')';\n                    } else {\n                        transform = 'translate(' + (month.bbox.x - monthLegendOffset) + ',' + (month.bbox.y + month.bbox.height / 2) + ') rotate(-90)';\n                    }\n\n                    return _react2.default.createElement(\n                        'text',\n                        {\n                            key: month.date.toString() + '.legend',\n                            className: 'nivo_calendar_month_legend',\n                            transform: transform,\n                            textAnchor: 'middle'\n                        },\n                        monthLegendFormat(month.date)\n                    );\n                }),\n                years.map(function (year) {\n                    var transform = void 0;\n                    if (direction === _directions.DIRECTION_HORIZONTAL) {\n                        transform = 'translate(' + (year.bbox.x - yearLegendOffset) + ',' + (year.bbox.y + year.bbox.height / 2) + ') rotate(-90)';\n                    } else {\n                        transform = 'translate(' + (year.bbox.x + year.bbox.width / 2) + ',' + (year.bbox.y - yearLegendOffset) + ')';\n                    }\n\n                    return _react2.default.createElement(\n                        'text',\n                        {\n                            key: year.year,\n                            className: 'nivo_calendar_year_legend',\n                            transform: transform,\n                            textAnchor: 'middle'\n                        },\n                        year.year\n                    );\n                })\n            );\n        }\n    );\n};\n\nCalendar.propTypes = _props.CalendarPropTypes;\n\nexports.default = (0, _enhance2.default)(Calendar);"},"hash":"8a87abd6ae04feb1ce935119947a826a"}