{"dependencies":[{"name":"babel-runtime/helpers/extends","loc":{"line":5,"column":24}},{"name":"prop-types","loc":{"line":9,"column":25}},{"name":"create-react-class","loc":{"line":13,"column":32}},{"name":"./MenuMixin","loc":{"line":17,"column":25}},{"name":"./util","loc":{"line":21,"column":20}}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _createReactClass = require('create-react-class');\n\nvar _createReactClass2 = _interopRequireDefault(_createReactClass);\n\nvar _MenuMixin = require('./MenuMixin');\n\nvar _MenuMixin2 = _interopRequireDefault(_MenuMixin);\n\nvar _util = require('./util');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n// import React from 'react';\nvar Menu = (0, _createReactClass2['default'])({\n  displayName: 'Menu',\n\n  propTypes: {\n    defaultSelectedKeys: _propTypes2['default'].arrayOf(_propTypes2['default'].string),\n    selectedKeys: _propTypes2['default'].arrayOf(_propTypes2['default'].string),\n    defaultOpenKeys: _propTypes2['default'].arrayOf(_propTypes2['default'].string),\n    openKeys: _propTypes2['default'].arrayOf(_propTypes2['default'].string),\n    mode: _propTypes2['default'].oneOf(['horizontal', 'vertical', 'vertical-left', 'vertical-right', 'inline']),\n    getPopupContainer: _propTypes2['default'].func,\n    onClick: _propTypes2['default'].func,\n    onSelect: _propTypes2['default'].func,\n    onDeselect: _propTypes2['default'].func,\n    onDestroy: _propTypes2['default'].func,\n    openTransitionName: _propTypes2['default'].string,\n    openAnimation: _propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].object]),\n    subMenuOpenDelay: _propTypes2['default'].number,\n    subMenuCloseDelay: _propTypes2['default'].number,\n    forceSubMenuRender: _propTypes2['default'].bool,\n    triggerSubMenuAction: _propTypes2['default'].string,\n    level: _propTypes2['default'].number,\n    selectable: _propTypes2['default'].bool,\n    multiple: _propTypes2['default'].bool,\n    children: _propTypes2['default'].any\n  },\n\n  mixins: [_MenuMixin2['default']],\n\n  isRootMenu: true,\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      selectable: true,\n      onClick: _util.noop,\n      onSelect: _util.noop,\n      onOpenChange: _util.noop,\n      onDeselect: _util.noop,\n      defaultSelectedKeys: [],\n      defaultOpenKeys: [],\n      subMenuOpenDelay: 0.1,\n      subMenuCloseDelay: 0.1,\n      triggerSubMenuAction: 'hover'\n    };\n  },\n  getInitialState: function getInitialState() {\n    var props = this.props;\n    var selectedKeys = props.defaultSelectedKeys;\n    var openKeys = props.defaultOpenKeys;\n    if ('selectedKeys' in props) {\n      selectedKeys = props.selectedKeys || [];\n    }\n    if ('openKeys' in props) {\n      openKeys = props.openKeys || [];\n    }\n    return {\n      selectedKeys: selectedKeys,\n      openKeys: openKeys\n    };\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n    if ('selectedKeys' in nextProps) {\n      this.setState({\n        selectedKeys: nextProps.selectedKeys || []\n      });\n    }\n    if ('openKeys' in nextProps) {\n      this.setState({\n        openKeys: nextProps.openKeys || []\n      });\n    }\n  },\n  onSelect: function onSelect(selectInfo) {\n    var props = this.props;\n    if (props.selectable) {\n      // root menu\n      var selectedKeys = this.state.selectedKeys;\n      var selectedKey = selectInfo.key;\n      if (props.multiple) {\n        selectedKeys = selectedKeys.concat([selectedKey]);\n      } else {\n        selectedKeys = [selectedKey];\n      }\n      if (!('selectedKeys' in props)) {\n        this.setState({\n          selectedKeys: selectedKeys\n        });\n      }\n      props.onSelect((0, _extends3['default'])({}, selectInfo, {\n        selectedKeys: selectedKeys\n      }));\n    }\n  },\n  onClick: function onClick(e) {\n    this.props.onClick(e);\n  },\n  onOpenChange: function onOpenChange(event) {\n    var props = this.props;\n    var openKeys = this.state.openKeys.concat();\n    var changed = false;\n    var processSingle = function processSingle(e) {\n      var oneChanged = false;\n      if (e.open) {\n        oneChanged = openKeys.indexOf(e.key) === -1;\n        if (oneChanged) {\n          openKeys.push(e.key);\n        }\n      } else {\n        var index = openKeys.indexOf(e.key);\n        oneChanged = index !== -1;\n        if (oneChanged) {\n          openKeys.splice(index, 1);\n        }\n      }\n      changed = changed || oneChanged;\n    };\n    if (Array.isArray(event)) {\n      // batch change call\n      event.forEach(processSingle);\n    } else {\n      processSingle(event);\n    }\n    if (changed) {\n      if (!('openKeys' in this.props)) {\n        this.setState({ openKeys: openKeys });\n      }\n      props.onOpenChange(openKeys);\n    }\n  },\n  onDeselect: function onDeselect(selectInfo) {\n    var props = this.props;\n    if (props.selectable) {\n      var selectedKeys = this.state.selectedKeys.concat();\n      var selectedKey = selectInfo.key;\n      var index = selectedKeys.indexOf(selectedKey);\n      if (index !== -1) {\n        selectedKeys.splice(index, 1);\n      }\n      if (!('selectedKeys' in props)) {\n        this.setState({\n          selectedKeys: selectedKeys\n        });\n      }\n      props.onDeselect((0, _extends3['default'])({}, selectInfo, {\n        selectedKeys: selectedKeys\n      }));\n    }\n  },\n  getOpenTransitionName: function getOpenTransitionName() {\n    var props = this.props;\n    var transitionName = props.openTransitionName;\n    var animationName = props.openAnimation;\n    if (!transitionName && typeof animationName === 'string') {\n      transitionName = props.prefixCls + '-open-' + animationName;\n    }\n    return transitionName;\n  },\n  isInlineMode: function isInlineMode() {\n    return this.props.mode === 'inline';\n  },\n  lastOpenSubMenu: function lastOpenSubMenu() {\n    var lastOpen = [];\n    var openKeys = this.state.openKeys;\n\n    if (openKeys.length) {\n      lastOpen = this.getFlatInstanceArray().filter(function (c) {\n        return c && openKeys.indexOf(c.props.eventKey) !== -1;\n      });\n    }\n    return lastOpen[0];\n  },\n  renderMenuItem: function renderMenuItem(c, i, subIndex) {\n    if (!c) {\n      return null;\n    }\n    var state = this.state;\n    var extraProps = {\n      openKeys: state.openKeys,\n      selectedKeys: state.selectedKeys,\n      triggerSubMenuAction: this.props.triggerSubMenuAction\n    };\n    return this.renderCommonMenuItem(c, i, subIndex, extraProps);\n  },\n  render: function render() {\n    var props = (0, _extends3['default'])({}, this.props);\n    props.className += ' ' + props.prefixCls + '-root';\n    return this.renderRoot(props);\n  }\n});\n\nexports['default'] = Menu;\nmodule.exports = exports['default'];"},"hash":"aa4b3cb12a9becfd10508cbb1c35186a"}