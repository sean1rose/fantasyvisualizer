{"dependencies":[{"name":"lodash/uniq","loc":{"line":6,"column":21}},{"name":"lodash/sumBy","loc":{"line":10,"column":22}},{"name":"lodash/max","loc":{"line":14,"column":20}},{"name":"lodash/min","loc":{"line":18,"column":20}},{"name":"lodash/range","loc":{"line":22,"column":22}},{"name":"d3-scale","loc":{"line":26,"column":23}}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\nexports.generateStackedLines = exports.generateLines = exports.getScales = exports.getStackedScales = exports.getStackedYScale = exports.getYScale = exports.getXScale = undefined;\n\nvar _uniq2 = require('lodash/uniq');\n\nvar _uniq3 = _interopRequireDefault(_uniq2);\n\nvar _sumBy2 = require('lodash/sumBy');\n\nvar _sumBy3 = _interopRequireDefault(_sumBy2);\n\nvar _max2 = require('lodash/max');\n\nvar _max3 = _interopRequireDefault(_max2);\n\nvar _min2 = require('lodash/min');\n\nvar _min3 = _interopRequireDefault(_min2);\n\nvar _range2 = require('lodash/range');\n\nvar _range3 = _interopRequireDefault(_range2);\n\nvar _d3Scale = require('d3-scale');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Generates X scale.\n *\n * @param {Array.<Object>} data\n * @param {number}         width\n * @returns {Function}\n */\nvar getXScale = exports.getXScale = function getXScale(data, width) {\n    var xLengths = (0, _uniq3.default)(data.map(function (_ref) {\n        var data = _ref.data;\n        return data.length;\n    }));\n    if (xLengths.length > 1) {\n        throw new Error(['Found inconsitent data for x,', 'expecting all series to have same length', 'but found: ' + xLengths.join(', ')].join(' '));\n    }\n\n    return (0, _d3Scale.scalePoint)().range([0, width]).domain(data[0].data.map(function (_ref2) {\n        var x = _ref2.x;\n        return x;\n    }));\n};\n\n/**\n * Generates Y scale for line chart.\n *\n * @param {Array.<Object>} data\n * @param {number}         height\n * @param {number|string}  minValue\n * @param {number|string}  maxValue\n * @returns {Function}\n */\n/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, RaphaÃ«l Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nvar getYScale = exports.getYScale = function getYScale(data, height, minValue, maxValue) {\n    var minY = minValue;\n    if (minValue === 'auto') {\n        minY = (0, _min3.default)(data.map(function (serie) {\n            return (0, _min3.default)(serie.data.map(function (d) {\n                return d.y;\n            }));\n        }));\n    }\n\n    var maxY = maxValue;\n    if (maxValue === 'auto') {\n        maxY = (0, _max3.default)(data.map(function (serie) {\n            return (0, _max3.default)(serie.data.map(function (d) {\n                return d.y;\n            }));\n        }));\n    }\n\n    return (0, _d3Scale.scaleLinear)().rangeRound([height, 0]).domain([minY, maxY]);\n};\n\n/**\n * Generates Y scale for stacked line chart.\n *\n * @param {Array.<Object>} data\n * @param {Object}         xScale\n * @param {number}         height\n * @param {number|string}  minValue\n * @param {number|string}  maxValue\n * @returns {Function}\n */\nvar getStackedYScale = exports.getStackedYScale = function getStackedYScale(data, xScale, height, minValue, maxValue) {\n    var minY = minValue;\n    if (minValue === 'auto') {\n        minY = (0, _min3.default)(data.map(function (serie) {\n            return (0, _min3.default)(serie.data.map(function (d) {\n                return d.y;\n            }));\n        }));\n    }\n\n    var maxY = maxValue;\n    if (maxValue === 'auto') {\n        maxY = (0, _max3.default)((0, _range3.default)(xScale.domain().length).map(function (i) {\n            return (0, _sumBy3.default)(data, function (serie) {\n                return serie.data[i].y;\n            });\n        }));\n    }\n\n    return (0, _d3Scale.scaleLinear)().rangeRound([height, 0]).domain([minY, maxY]);\n};\n\n/**\n * Generates stacked x/y scales.\n *\n * @param {Array}         data\n * @param {number}        width\n * @param {number}        height\n * @param {number|string} minY\n * @param {number|string} maxY\n * @return {{ xScale: Function, yScale: Function }}\n */\nvar getStackedScales = exports.getStackedScales = function getStackedScales(_ref3) {\n    var data = _ref3.data,\n        width = _ref3.width,\n        height = _ref3.height,\n        minY = _ref3.minY,\n        maxY = _ref3.maxY;\n\n    var xScale = getXScale(data, width);\n    var yScale = getStackedYScale(data, xScale, height, minY, maxY);\n\n    return { xScale: xScale, yScale: yScale };\n};\n\n/**\n * Generates non stacked x/ scales\n *\n * @param {Array}         data\n * @param {number}        width\n * @param {number}        height\n * @param {number|string} minY\n * @param {number|string} maxY\n * @return {{ xScale: Function, yScale: Function }}\n */\nvar getScales = exports.getScales = function getScales(_ref4) {\n    var data = _ref4.data,\n        width = _ref4.width,\n        height = _ref4.height,\n        minY = _ref4.minY,\n        maxY = _ref4.maxY;\n\n    var xScale = getXScale(data, width);\n    var yScale = getYScale(data, height, minY, maxY);\n\n    return { xScale: xScale, yScale: yScale };\n};\n\n/**\n * Generates x/y scales & lines for line chart.\n *\n * @param {Array.<Object>} data\n * @param {Function}       xScale\n * @param {Function}       yScale\n * @param {Function}       color\n * @return {{ xScale: Function, yScale: Function, lines: Array.<Object> }}\n */\nvar generateLines = exports.generateLines = function generateLines(data, xScale, yScale, color) {\n    return data.map(function (serie) {\n        var id = serie.id,\n            serieData = serie.data;\n\n\n        return {\n            id: id,\n            color: color(serie),\n            data: serie,\n            points: serieData.map(function (d) {\n                return Object.assign({}, d, {\n                    value: d.y,\n                    x: xScale(d.x),\n                    y: yScale(d.y)\n                });\n            })\n        };\n    });\n};\n\n/**\n * Generates x/y scales & lines for stacked line chart.\n *\n * @param {Array.<Object>} data\n * @param {Function}       xScale\n * @param {Function}       yScale\n * @param {Function}       color\n * @return {{ xScale: Function, yScale: Function, lines: Array.<Object> }}\n */\nvar generateStackedLines = exports.generateStackedLines = function generateStackedLines(data, xScale, yScale, color) {\n    return data.reduce(function (acc, serie, serieIndex) {\n        var previousPoints = serieIndex === 0 ? null : acc[serieIndex - 1].points;\n\n        var id = serie.id,\n            serieData = serie.data;\n\n\n        return [].concat(acc, [{\n            id: id,\n            color: color(serie),\n            data: serie,\n            points: serieData.map(function (d, i) {\n                if (!previousPoints) {\n                    return Object.assign({}, d, {\n                        value: d.y,\n                        x: d.x,\n                        y: d.y\n                    });\n                }\n\n                return Object.assign({}, d, {\n                    value: d.y,\n                    x: d.x,\n                    y: d.y + previousPoints[i].accY\n                });\n            }).map(function (d) {\n                return {\n                    key: d.x,\n                    value: d.value,\n                    accY: d.y,\n                    x: xScale(d.x),\n                    y: yScale(d.y)\n                };\n            })\n        }]);\n    }, []);\n};"},"hash":"43ca680cf5491d0f426d725223dd0340"}