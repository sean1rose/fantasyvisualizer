{"dependencies":[{"name":"react","loc":{"line":5,"column":21}},{"name":"../../../lib/polar","loc":{"line":9,"column":21}},{"name":"../../../lib/interactivity","loc":{"line":11,"column":29}},{"name":"../Container","loc":{"line":13,"column":25}},{"name":"./enhance","loc":{"line":17,"column":23}},{"name":"./TreeMapNodeTooltip","loc":{"line":21,"column":34}}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _polar = require('../../../lib/polar');\n\nvar _interactivity = require('../../../lib/interactivity');\n\nvar _Container = require('../Container');\n\nvar _Container2 = _interopRequireDefault(_Container);\n\nvar _enhance = require('./enhance');\n\nvar _enhance2 = _interopRequireDefault(_enhance);\n\nvar _TreeMapNodeTooltip = require('./TreeMapNodeTooltip');\n\nvar _TreeMapNodeTooltip2 = _interopRequireDefault(_TreeMapNodeTooltip);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This file is part of the nivo project.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2016-present, RaphaÃ«l Benitte.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * For the full copyright and license information, please view the LICENSE\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * file that was distributed with this source code.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\nvar findNodeUnderCursor = function findNodeUnderCursor(nodes, margin, x, y) {\n    return nodes.find(function (node) {\n        return (0, _interactivity.isCursorInRect)(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y);\n    });\n};\n\nvar TreeMapCanvas = function (_Component) {\n    _inherits(TreeMapCanvas, _Component);\n\n    function TreeMapCanvas() {\n        var _temp, _this, _ret;\n\n        _classCallCheck(this, TreeMapCanvas);\n\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n\n        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.handleMouseHover = function (showTooltip, hideTooltip) {\n            return function (event) {\n                var _this$props = _this.props,\n                    isInteractive = _this$props.isInteractive,\n                    nodes = _this$props.nodes,\n                    margin = _this$props.margin,\n                    theme = _this$props.theme;\n\n\n                if (!isInteractive) return;\n\n                var _getRelativeCursor = (0, _interactivity.getRelativeCursor)(_this.surface, event),\n                    x = _getRelativeCursor[0],\n                    y = _getRelativeCursor[1];\n\n                var node = findNodeUnderCursor(nodes, margin, x, y);\n\n                if (node !== undefined) {\n                    showTooltip(_react2.default.createElement(_TreeMapNodeTooltip2.default, { node: node, theme: theme }), event);\n                } else {\n                    hideTooltip();\n                }\n            };\n        }, _this.handleMouseLeave = function (hideTooltip) {\n            return function () {\n                hideTooltip();\n            };\n        }, _this.handleClick = function (event) {\n            var _this$props2 = _this.props,\n                isInteractive = _this$props2.isInteractive,\n                nodes = _this$props2.nodes,\n                margin = _this$props2.margin,\n                onClick = _this$props2.onClick;\n\n\n            if (!isInteractive) return;\n\n            var _getRelativeCursor2 = (0, _interactivity.getRelativeCursor)(_this.surface, event),\n                x = _getRelativeCursor2[0],\n                y = _getRelativeCursor2[1];\n\n            var node = findNodeUnderCursor(nodes, margin, x, y);\n            if (node !== undefined) onClick(node, event);\n        }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    TreeMapCanvas.prototype.componentDidMount = function componentDidMount() {\n        this.ctx = this.surface.getContext('2d');\n        this.draw(this.props);\n    };\n\n    TreeMapCanvas.prototype.componentDidUpdate = function componentDidUpdate() {\n        this.ctx = this.surface.getContext('2d');\n        this.draw(this.props);\n    };\n\n    TreeMapCanvas.prototype.draw = function draw(props) {\n        var _this2 = this;\n\n        var nodes = props.nodes,\n            pixelRatio = props.pixelRatio,\n            margin = props.margin,\n            outerWidth = props.outerWidth,\n            outerHeight = props.outerHeight,\n            borderWidth = props.borderWidth,\n            getBorderColor = props.getBorderColor,\n            enableLabel = props.enableLabel,\n            getLabelTextColor = props.getLabelTextColor,\n            orientLabel = props.orientLabel;\n\n\n        this.surface.width = outerWidth * pixelRatio;\n        this.surface.height = outerHeight * pixelRatio;\n\n        this.ctx.scale(pixelRatio, pixelRatio);\n        this.ctx.clearRect(0, 0, outerWidth, outerHeight);\n        this.ctx.translate(margin.left, margin.top);\n\n        nodes.forEach(function (node) {\n            _this2.ctx.fillStyle = node.color;\n            _this2.ctx.fillRect(node.x, node.y, node.width, node.height);\n\n            if (borderWidth > 0) {\n                _this2.ctx.strokeStyle = getBorderColor(node);\n                _this2.ctx.lineWidth = borderWidth;\n                _this2.ctx.strokeRect(node.x, node.y, node.width, node.height);\n            }\n        });\n\n        if (enableLabel) {\n            this.ctx.textAlign = 'center';\n            this.ctx.textBaseline = 'middle';\n\n            // draw labels on top\n            nodes.filter(function (_ref) {\n                var label = _ref.label;\n                return label !== undefined;\n            }).forEach(function (node) {\n                var labelTextColor = getLabelTextColor(node);\n\n                var rotate = orientLabel && node.height > node.width;\n\n                _this2.ctx.save();\n                _this2.ctx.translate(node.x + node.width / 2, node.y + node.height / 2);\n                _this2.ctx.rotate((0, _polar.degreesToRadians)(rotate ? -90 : 0));\n\n                _this2.ctx.fillStyle = labelTextColor;\n                _this2.ctx.fillText(node.label, 0, 0);\n\n                _this2.ctx.restore();\n            });\n        }\n    };\n\n    TreeMapCanvas.prototype.render = function render() {\n        var _this3 = this;\n\n        var _props = this.props,\n            outerWidth = _props.outerWidth,\n            outerHeight = _props.outerHeight,\n            pixelRatio = _props.pixelRatio,\n            isInteractive = _props.isInteractive,\n            theme = _props.theme;\n\n\n        return _react2.default.createElement(\n            _Container2.default,\n            { isInteractive: isInteractive, theme: theme },\n            function (_ref2) {\n                var showTooltip = _ref2.showTooltip,\n                    hideTooltip = _ref2.hideTooltip;\n                return _react2.default.createElement('canvas', {\n                    ref: function ref(surface) {\n                        _this3.surface = surface;\n                    },\n                    width: outerWidth * pixelRatio,\n                    height: outerHeight * pixelRatio,\n                    style: {\n                        width: outerWidth,\n                        height: outerHeight\n                    },\n                    onMouseEnter: _this3.handleMouseHover(showTooltip, hideTooltip),\n                    onMouseMove: _this3.handleMouseHover(showTooltip, hideTooltip),\n                    onMouseLeave: _this3.handleMouseLeave(hideTooltip),\n                    onClick: _this3.handleClick\n                });\n            }\n        );\n    };\n\n    return TreeMapCanvas;\n}(_react.Component);\n\nTreeMapCanvas.displayName = 'TreeMapCanvas';\n\nexports.default = (0, _enhance2.default)(TreeMapCanvas);"},"hash":"a53329aa81532a7e30315d577201561e"}