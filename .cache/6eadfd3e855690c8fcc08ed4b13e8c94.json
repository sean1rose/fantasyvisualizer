{"dependencies":[{"name":"lodash/partial","loc":{"line":5,"column":24}},{"name":"react","loc":{"line":9,"column":21}},{"name":"../../../lib/polar","loc":{"line":13,"column":21}},{"name":"../../../lib/interactivity","loc":{"line":15,"column":29}},{"name":"../Container","loc":{"line":17,"column":25}},{"name":"./props","loc":{"line":21,"column":22}},{"name":"./enhance","loc":{"line":23,"column":23}},{"name":"./ChordArcTooltip","loc":{"line":27,"column":31}}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\n\nvar _partial2 = require('lodash/partial');\n\nvar _partial3 = _interopRequireDefault(_partial2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _polar = require('../../../lib/polar');\n\nvar _interactivity = require('../../../lib/interactivity');\n\nvar _Container = require('../Container');\n\nvar _Container2 = _interopRequireDefault(_Container);\n\nvar _props3 = require('./props');\n\nvar _enhance = require('./enhance');\n\nvar _enhance2 = _interopRequireDefault(_enhance);\n\nvar _ChordArcTooltip = require('./ChordArcTooltip');\n\nvar _ChordArcTooltip2 = _interopRequireDefault(_ChordArcTooltip);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This file is part of the nivo project.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2016-present, RaphaÃ«l Benitte.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * For the full copyright and license information, please view the LICENSE\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * file that was distributed with this source code.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\nvar ChordCanvas = function (_Component) {\n    _inherits(ChordCanvas, _Component);\n\n    function ChordCanvas() {\n        var _temp, _this, _ret;\n\n        _classCallCheck(this, ChordCanvas);\n\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n\n        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.handleMouseHover = function (showTooltip, hideTooltip, event) {\n            if (_this.props.isInteractive !== true) return;\n\n            var _getRelativeCursor = (0, _interactivity.getRelativeCursor)(_this.surface, event),\n                x = _getRelativeCursor[0],\n                y = _getRelativeCursor[1];\n\n            var _this$props = _this.props,\n                width = _this$props.width,\n                height = _this$props.height,\n                margin = _this$props.margin,\n                radius = _this$props.radius,\n                innerRadius = _this$props.innerRadius,\n                arcs = _this$props.arcs,\n                setCurrentArc = _this$props.setCurrentArc,\n                theme = _this$props.theme;\n\n\n            var centerX = width / 2 + margin.left;\n            var centerY = height / 2 + margin.top;\n\n            var arc = (0, _interactivity.getHoveredArc)(centerX, centerY, radius, innerRadius, arcs, x, y);\n            if (arc) {\n                setCurrentArc(arc);\n                showTooltip(_react2.default.createElement(_ChordArcTooltip2.default, { arc: arc, theme: theme }), event);\n            } else {\n                setCurrentArc(null);\n                hideTooltip();\n            }\n        }, _this.handleMouseLeave = function (hideTooltip) {\n            if (_this.props.isInteractive !== true) return;\n\n            _this.props.setCurrentArc(null);\n            hideTooltip();\n        }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    ChordCanvas.prototype.componentDidMount = function componentDidMount() {\n        this.ctx = this.surface.getContext('2d');\n        this.draw(this.props);\n    };\n\n    ChordCanvas.prototype.shouldComponentUpdate = function shouldComponentUpdate(props) {\n        if (this.props.outerWidth !== props.outerWidth || this.props.outerHeight !== props.outerHeight || this.props.isInteractive !== props.isInteractive || this.props.theme !== props.theme) {\n            return true;\n        } else {\n            this.draw(props);\n            return false;\n        }\n    };\n\n    ChordCanvas.prototype.componentDidUpdate = function componentDidUpdate() {\n        this.ctx = this.surface.getContext('2d');\n        this.draw(this.props);\n    };\n\n    ChordCanvas.prototype.draw = function draw(props) {\n        var _this2 = this;\n\n        var pixelRatio = props.pixelRatio,\n            width = props.width,\n            height = props.height,\n            margin = props.margin,\n            outerWidth = props.outerWidth,\n            outerHeight = props.outerHeight,\n            enableLabel = props.enableLabel,\n            getLabel = props.getLabel,\n            labelOffset = props.labelOffset,\n            labelRotation = props.labelRotation,\n            getLabelTextColor = props.getLabelTextColor,\n            arcGenerator = props.arcGenerator,\n            ribbonGenerator = props.ribbonGenerator,\n            theme = props.theme,\n            ribbons = props.ribbons,\n            arcs = props.arcs,\n            radius = props.radius,\n            getArcOpacity = props.getArcOpacity,\n            getRibbonOpacity = props.getRibbonOpacity;\n\n\n        this.surface.width = outerWidth * pixelRatio;\n        this.surface.height = outerHeight * pixelRatio;\n\n        this.ctx.scale(pixelRatio, pixelRatio);\n\n        var centerX = width / 2 + margin.left;\n        var centerY = height / 2 + margin.top;\n\n        this.ctx.clearRect(0, 0, outerWidth, outerHeight);\n        this.ctx.translate(centerX, centerY);\n\n        ribbonGenerator.context(this.ctx);\n        ribbons.forEach(function (ribbon) {\n            _this2.ctx.save();\n            _this2.ctx.globalAlpha = getRibbonOpacity(ribbon);\n\n            _this2.ctx.beginPath();\n            ribbonGenerator(ribbon);\n            _this2.ctx.fillStyle = ribbon.source.color;\n            _this2.ctx.fill();\n\n            _this2.ctx.restore();\n        });\n\n        arcGenerator.context(this.ctx);\n        arcs.forEach(function (arc) {\n            _this2.ctx.save();\n            _this2.ctx.globalAlpha = getArcOpacity(arc);\n\n            _this2.ctx.beginPath();\n            arcGenerator(arc);\n            _this2.ctx.fillStyle = arc.color;\n            _this2.ctx.fill();\n\n            _this2.ctx.restore();\n\n            if (enableLabel) {\n                var labelTextColor = getLabelTextColor(arc, theme);\n                var angle = (0, _polar.midAngle)(arc);\n                var _props = (0, _polar.getPolarLabelProps)(radius + labelOffset, angle, labelRotation);\n\n                _this2.ctx.save();\n                _this2.ctx.translate(_props.x, _props.y);\n                _this2.ctx.rotate((0, _polar.degreesToRadians)(_props.rotate));\n\n                _this2.ctx.textAlign = _props.align;\n                _this2.ctx.textBaseline = _props.baseline;\n                _this2.ctx.fillStyle = labelTextColor;\n                _this2.ctx.fillText(getLabel(arc), 0, 0);\n\n                _this2.ctx.restore();\n            }\n        });\n    };\n\n    ChordCanvas.prototype.render = function render() {\n        var _this3 = this;\n\n        var _props2 = this.props,\n            outerWidth = _props2.outerWidth,\n            outerHeight = _props2.outerHeight,\n            pixelRatio = _props2.pixelRatio,\n            isInteractive = _props2.isInteractive,\n            theme = _props2.theme;\n\n\n        return _react2.default.createElement(\n            _Container2.default,\n            { isInteractive: isInteractive, theme: theme },\n            function (_ref) {\n                var showTooltip = _ref.showTooltip,\n                    hideTooltip = _ref.hideTooltip;\n                return _react2.default.createElement('canvas', {\n                    ref: function ref(surface) {\n                        _this3.surface = surface;\n                    },\n                    width: outerWidth * pixelRatio,\n                    height: outerHeight * pixelRatio,\n                    style: {\n                        width: outerWidth,\n                        height: outerHeight\n                    },\n                    onMouseEnter: (0, _partial3.default)(_this3.handleMouseHover, showTooltip, hideTooltip),\n                    onMouseMove: (0, _partial3.default)(_this3.handleMouseHover, showTooltip, hideTooltip),\n                    onMouseLeave: (0, _partial3.default)(_this3.handleMouseLeave, hideTooltip)\n                });\n            }\n        );\n    };\n\n    return ChordCanvas;\n}(_react.Component);\n\nChordCanvas.propTypes = _props3.ChordPropTypes;\n\nexports.default = (0, _enhance2.default)(ChordCanvas);"},"hash":"8a4023671c53bed1cf6752019068db02"}