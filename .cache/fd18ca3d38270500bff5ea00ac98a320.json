{"dependencies":[{"name":"lodash/sortBy","loc":{"line":7,"column":23}},{"name":"lodash/isFunction","loc":{"line":11,"column":27}},{"name":"lodash/range","loc":{"line":15,"column":22}},{"name":"lodash/throttle","loc":{"line":19,"column":25}},{"name":"lodash/isNil","loc":{"line":23,"column":22}},{"name":"react","loc":{"line":31,"column":21}},{"name":"prop-types","loc":{"line":35,"column":25}},{"name":"classnames","loc":{"line":39,"column":26}},{"name":"../container/Surface","loc":{"line":43,"column":23}},{"name":"../container/Layer","loc":{"line":47,"column":21}},{"name":"../component/Tooltip","loc":{"line":51,"column":23}},{"name":"../component/Legend","loc":{"line":55,"column":22}},{"name":"../shape/Curve","loc":{"line":59,"column":21}},{"name":"../shape/Cross","loc":{"line":63,"column":21}},{"name":"../shape/Sector","loc":{"line":67,"column":22}},{"name":"../shape/Dot","loc":{"line":71,"column":19}},{"name":"../shape/Rectangle","loc":{"line":75,"column":25}},{"name":"../util/ReactUtils","loc":{"line":79,"column":26}},{"name":"../cartesian/CartesianAxis","loc":{"line":81,"column":29}},{"name":"../cartesian/Brush","loc":{"line":85,"column":21}},{"name":"../util/DOMUtils","loc":{"line":89,"column":24}},{"name":"../util/DataUtils","loc":{"line":91,"column":25}},{"name":"../util/ChartUtils","loc":{"line":93,"column":26}},{"name":"../util/PolarUtils","loc":{"line":95,"column":26}},{"name":"../util/PureRender","loc":{"line":97,"column":26}},{"name":"../util/Events","loc":{"line":99,"column":22}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _sortBy2 = require('lodash/sortBy');\n\nvar _sortBy3 = _interopRequireDefault(_sortBy2);\n\nvar _isFunction2 = require('lodash/isFunction');\n\nvar _isFunction3 = _interopRequireDefault(_isFunction2);\n\nvar _range2 = require('lodash/range');\n\nvar _range3 = _interopRequireDefault(_range2);\n\nvar _throttle2 = require('lodash/throttle');\n\nvar _throttle3 = _interopRequireDefault(_throttle2);\n\nvar _isNil2 = require('lodash/isNil');\n\nvar _isNil3 = _interopRequireDefault(_isNil2);\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _Surface = require('../container/Surface');\n\nvar _Surface2 = _interopRequireDefault(_Surface);\n\nvar _Layer = require('../container/Layer');\n\nvar _Layer2 = _interopRequireDefault(_Layer);\n\nvar _Tooltip = require('../component/Tooltip');\n\nvar _Tooltip2 = _interopRequireDefault(_Tooltip);\n\nvar _Legend = require('../component/Legend');\n\nvar _Legend2 = _interopRequireDefault(_Legend);\n\nvar _Curve = require('../shape/Curve');\n\nvar _Curve2 = _interopRequireDefault(_Curve);\n\nvar _Cross = require('../shape/Cross');\n\nvar _Cross2 = _interopRequireDefault(_Cross);\n\nvar _Sector = require('../shape/Sector');\n\nvar _Sector2 = _interopRequireDefault(_Sector);\n\nvar _Dot = require('../shape/Dot');\n\nvar _Dot2 = _interopRequireDefault(_Dot);\n\nvar _Rectangle = require('../shape/Rectangle');\n\nvar _Rectangle2 = _interopRequireDefault(_Rectangle);\n\nvar _ReactUtils = require('../util/ReactUtils');\n\nvar _CartesianAxis = require('../cartesian/CartesianAxis');\n\nvar _CartesianAxis2 = _interopRequireDefault(_CartesianAxis);\n\nvar _Brush = require('../cartesian/Brush');\n\nvar _Brush2 = _interopRequireDefault(_Brush);\n\nvar _DOMUtils = require('../util/DOMUtils');\n\nvar _DataUtils = require('../util/DataUtils');\n\nvar _ChartUtils = require('../util/ChartUtils');\n\nvar _PolarUtils = require('../util/PolarUtils');\n\nvar _PureRender = require('../util/PureRender');\n\nvar _Events = require('../util/Events');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ORIENT_MAP = {\n  xAxis: ['bottom', 'top'],\n  yAxis: ['left', 'right']\n};\n\nvar originCoordinate = { x: 0, y: 0 };\n\nvar generateCategoricalChart = function generateCategoricalChart(_ref) {\n  var _class, _temp, _initialiseProps;\n\n  var chartName = _ref.chartName,\n      GraphicalChild = _ref.GraphicalChild,\n      _ref$eventType = _ref.eventType,\n      eventType = _ref$eventType === undefined ? 'axis' : _ref$eventType,\n      axisComponents = _ref.axisComponents,\n      legendContent = _ref.legendContent,\n      formatAxisMap = _ref.formatAxisMap,\n      defaultProps = _ref.defaultProps,\n      propTypes = _ref.propTypes;\n  var CategoricalChartWrapper = (_temp = _class = function (_Component) {\n    _inherits(CategoricalChartWrapper, _Component);\n\n    function CategoricalChartWrapper(props) {\n      _classCallCheck(this, CategoricalChartWrapper);\n\n      var _this = _possibleConstructorReturn(this, (CategoricalChartWrapper.__proto__ || Object.getPrototypeOf(CategoricalChartWrapper)).call(this, props));\n\n      _initialiseProps.call(_this);\n\n      var defaultState = _this.constructor.createDefaultState(props);\n      var updateId = 0;\n      _this.state = _extends({}, defaultState, { updateId: 0\n      }, _this.updateStateOfAxisMapsOffsetAndStackGroups(_extends({ props: props }, defaultState, { updateId: updateId })));\n\n      _this.uniqueChartId = (0, _isNil3.default)(props.id) ? (0, _DataUtils.uniqueId)('recharts') : props.id;\n\n      if (props.throttleDelay) {\n        _this.triggeredAfterMouseMove = (0, _throttle3.default)(_this.triggeredAfterMouseMove, props.throttleDelay);\n      }\n      return _this;\n    }\n\n    /* eslint-disable  react/no-did-mount-set-state */\n\n\n    /**\n     * Returns default, reset state for the categorical chart.\n     * @param {Object} props Props object to use when creating the default state\n     * @return {Object} Whole new state\n     */\n\n\n    _createClass(CategoricalChartWrapper, [{\n      key: 'componentDidMount',\n      value: function componentDidMount() {\n        if (!(0, _isNil3.default)(this.props.syncId)) {\n          this.addListener();\n        }\n      }\n    }, {\n      key: 'componentWillReceiveProps',\n      value: function componentWillReceiveProps(nextProps) {\n        var _props = this.props,\n            data = _props.data,\n            children = _props.children,\n            width = _props.width,\n            height = _props.height,\n            layout = _props.layout,\n            stackOffset = _props.stackOffset,\n            margin = _props.margin;\n        var updateId = this.state.updateId;\n\n\n        if (nextProps.data !== data || nextProps.width !== width || nextProps.height !== height || nextProps.layout !== layout || nextProps.stackOffset !== stackOffset || !(0, _PureRender.shallowEqual)(nextProps.margin, margin)) {\n          var defaultState = this.constructor.createDefaultState(nextProps);\n          this.setState(_extends({}, defaultState, { updateId: updateId + 1\n          }, this.updateStateOfAxisMapsOffsetAndStackGroups(_extends({ props: nextProps }, defaultState, { updateId: updateId + 1 }))));\n        } else if (!(0, _ReactUtils.isChildrenEqual)(nextProps.children, children)) {\n          // update configuration in chilren\n          var hasGlobalData = !(0, _isNil3.default)(nextProps.data);\n          var newUpdateId = hasGlobalData ? updateId : updateId + 1;\n          var _state = this.state,\n              dataStartIndex = _state.dataStartIndex,\n              dataEndIndex = _state.dataEndIndex;\n          // Don't update brush\n\n          var _defaultState = _extends({}, this.constructor.createDefaultState(nextProps), { dataEndIndex: dataEndIndex, dataStartIndex: dataStartIndex\n          });\n\n          this.setState(_extends({}, _defaultState, {\n            updateId: newUpdateId\n          }, this.updateStateOfAxisMapsOffsetAndStackGroups(_extends({\n            props: nextProps\n          }, _defaultState, {\n            updateId: newUpdateId\n          }))));\n        }\n        // add syncId\n        if ((0, _isNil3.default)(this.props.syncId) && !(0, _isNil3.default)(nextProps.syncId)) {\n          this.addListener();\n        }\n        // remove syncId\n        if (!(0, _isNil3.default)(this.props.syncId) && (0, _isNil3.default)(nextProps.syncId)) {\n          this.removeListener();\n        }\n      }\n    }, {\n      key: 'componentWillUnmount',\n      value: function componentWillUnmount() {\n        if (!(0, _isNil3.default)(this.props.syncId)) {\n          this.removeListener();\n        }\n        if (typeof this.triggeredAfterMouseMove.cancel === 'function') {\n          this.triggeredAfterMouseMove.cancel();\n        }\n      }\n      /**\n      * Get the configuration of all x-axis or y-axis\n      * @param  {Object} props          Latest props\n      * @param  {String} axisType       The type of axis\n      * @param  {Array}  graphicalItems The instances of item\n      * @param  {Object} stackGroups    The items grouped by axisId and stackId\n      * @param {Number} dataStartIndex  The start index of the data series when a brush is applied\n      * @param {Number} dataEndIndex    The end index of the data series when a brush is applied\n      * @return {Object}          Configuration\n      */\n\n    }, {\n      key: 'getAxisMap',\n      value: function getAxisMap(props, _ref2) {\n        var _ref2$axisType = _ref2.axisType,\n            axisType = _ref2$axisType === undefined ? 'xAxis' : _ref2$axisType,\n            AxisComp = _ref2.AxisComp,\n            graphicalItems = _ref2.graphicalItems,\n            stackGroups = _ref2.stackGroups,\n            dataStartIndex = _ref2.dataStartIndex,\n            dataEndIndex = _ref2.dataEndIndex;\n        var children = props.children;\n\n        var axisIdKey = axisType + 'Id';\n        // Get all the instance of Axis\n        var axes = (0, _ReactUtils.findAllByType)(children, AxisComp);\n\n        var axisMap = {};\n\n        if (axes && axes.length) {\n          axisMap = this.getAxisMapByAxes(props, { axes: axes, graphicalItems: graphicalItems, axisType: axisType, axisIdKey: axisIdKey,\n            stackGroups: stackGroups, dataStartIndex: dataStartIndex, dataEndIndex: dataEndIndex });\n        } else if (graphicalItems && graphicalItems.length) {\n          axisMap = this.getAxisMapByItems(props, {\n            Axis: AxisComp,\n            graphicalItems: graphicalItems, axisType: axisType, axisIdKey: axisIdKey, stackGroups: stackGroups, dataStartIndex: dataStartIndex, dataEndIndex: dataEndIndex });\n        }\n\n        return axisMap;\n      }\n      /**\n       * Get the configuration of axis by the options of axis instance\n       * @param  {Object} props         Latest props\n       * @param {Array}  axes           The instance of axes\n       * @param  {Array} graphicalItems The instances of item\n       * @param  {String} axisType      The type of axis, xAxis - x-axis, yAxis - y-axis\n       * @param  {String} axisIdKey     The unique id of an axis\n       * @param  {Object} stackGroups   The items grouped by axisId and stackId\n       * @param {Number} dataStartIndex The start index of the data series when a brush is applied\n       * @param {Number} dataEndIndex   The end index of the data series when a brush is applied\n       * @return {Object}      Configuration\n       */\n\n    }, {\n      key: 'getAxisMapByAxes',\n      value: function getAxisMapByAxes(props, _ref3) {\n        var _this2 = this;\n\n        var axes = _ref3.axes,\n            graphicalItems = _ref3.graphicalItems,\n            axisType = _ref3.axisType,\n            axisIdKey = _ref3.axisIdKey,\n            stackGroups = _ref3.stackGroups,\n            dataStartIndex = _ref3.dataStartIndex,\n            dataEndIndex = _ref3.dataEndIndex;\n        var layout = props.layout,\n            children = props.children,\n            stackOffset = props.stackOffset;\n\n        var isCategorial = (0, _ChartUtils.isCategorialAxis)(layout, axisType);\n\n        // Eliminate duplicated axes\n        var axisMap = axes.reduce(function (result, child) {\n          var _child$props = child.props,\n              type = _child$props.type,\n              dataKey = _child$props.dataKey,\n              allowDataOverflow = _child$props.allowDataOverflow,\n              allowDuplicatedCategory = _child$props.allowDuplicatedCategory,\n              scale = _child$props.scale,\n              ticks = _child$props.ticks;\n\n          var axisId = child.props[axisIdKey];\n          var displayedData = _this2.constructor.getDisplayedData(props, {\n            graphicalItems: graphicalItems.filter(function (item) {\n              return item.props[axisIdKey] === axisId;\n            }),\n            dataStartIndex: dataStartIndex,\n            dataEndIndex: dataEndIndex\n          });\n          var len = displayedData.length;\n\n          if (!result[axisId]) {\n            var domain = void 0,\n                duplicateDomain = void 0,\n                categoricalDomain = void 0;\n\n            if (dataKey) {\n              domain = (0, _ChartUtils.getDomainOfDataByKey)(displayedData, dataKey, type);\n\n              if (type === 'category' && isCategorial) {\n                var duplicate = (0, _DataUtils.hasDuplicate)(domain);\n\n                if (allowDuplicatedCategory && duplicate) {\n                  duplicateDomain = domain;\n                  // When category axis has duplicated text, serial numbers are used to generate scale\n                  domain = (0, _range3.default)(0, len);\n                } else if (!allowDuplicatedCategory) {\n                  // remove duplicated category\n                  domain = (0, _ChartUtils.parseDomainOfCategoryAxis)(child.props.domain, domain, child).reduce(function (finalDomain, entry) {\n                    return finalDomain.indexOf(entry) >= 0 ? finalDomain : [].concat(_toConsumableArray(finalDomain), [entry]);\n                  }, []);\n                }\n              } else if (type === 'category') {\n                if (!allowDuplicatedCategory) {\n                  domain = (0, _ChartUtils.parseDomainOfCategoryAxis)(child.props.domain, domain, child).reduce(function (finalDomain, entry) {\n                    return finalDomain.indexOf(entry) >= 0 || entry === '' || (0, _isNil3.default)(entry) ? finalDomain : [].concat(_toConsumableArray(finalDomain), [entry]);\n                  }, []);\n                } else {\n                  // eliminate undefined or null or empty string\n                  domain = domain.filter(function (entry) {\n                    return entry !== '' && !(0, _isNil3.default)(entry);\n                  });\n                }\n              } else if (type === 'number') {\n                var errorBarsDomain = (0, _ChartUtils.parseErrorBarsOfAxis)(displayedData, graphicalItems.filter(function (item) {\n                  return item.props[axisIdKey] === axisId && !item.props.hide;\n                }), dataKey, axisType);\n\n                if (errorBarsDomain) {\n                  domain = errorBarsDomain;\n                }\n              }\n\n              if (isCategorial && (type === 'number' || scale !== 'auto')) {\n                categoricalDomain = (0, _ChartUtils.getDomainOfDataByKey)(displayedData, dataKey, 'category');\n              }\n            } else if (isCategorial) {\n              domain = (0, _range3.default)(0, len);\n            } else if (stackGroups && stackGroups[axisId] && stackGroups[axisId].hasStack && type === 'number') {\n              // when stackOffset is 'expand', the domain may be calculated as [0, 1.000000000002]\n              domain = stackOffset === 'expand' ? [0, 1] : (0, _ChartUtils.getDomainOfStackGroups)(stackGroups[axisId].stackGroups, dataStartIndex, dataEndIndex);\n            } else {\n              domain = (0, _ChartUtils.getDomainOfItemsWithSameAxis)(displayedData, graphicalItems.filter(function (item) {\n                return item.props[axisIdKey] === axisId && !item.props.hide;\n              }), type, true);\n            }\n            if (type === 'number') {\n              // To detect wether there is any reference lines whose props alwaysShow is true\n              domain = (0, _ChartUtils.detectReferenceElementsDomain)(children, domain, axisId, axisType, ticks);\n\n              if (child.props.domain) {\n                domain = (0, _ChartUtils.parseSpecifiedDomain)(child.props.domain, domain, allowDataOverflow);\n              }\n            }\n\n            return _extends({}, result, _defineProperty({}, axisId, _extends({}, child.props, {\n              axisType: axisType,\n              domain: domain,\n              categoricalDomain: categoricalDomain,\n              duplicateDomain: duplicateDomain,\n              originalDomain: child.props.domain,\n              isCategorial: isCategorial,\n              layout: layout\n            })));\n          }\n\n          return result;\n        }, {});\n        return axisMap;\n      }\n      /**\n       * Get the configuration of axis by the options of item,\n       * this kind of axis does not display in chart\n       * @param  {Object} props         Latest props\n       * @param  {Array} graphicalItems The instances of item\n       * @param  {ReactElement} Axis    Axis Component\n       * @param  {String} axisType      The type of axis, xAxis - x-axis, yAxis - y-axis\n       * @param  {String} axisIdKey     The unique id of an axis\n       * @param  {Object} stackGroups   The items grouped by axisId and stackId\n       * @param {Number} dataStartIndex The start index of the data series when a brush is applied\n       * @param {Number} dataEndIndex   The end index of the data series when a brush is applied\n       * @return {Object}               Configuration\n       */\n\n    }, {\n      key: 'getAxisMapByItems',\n      value: function getAxisMapByItems(props, _ref4) {\n        var graphicalItems = _ref4.graphicalItems,\n            Axis = _ref4.Axis,\n            axisType = _ref4.axisType,\n            axisIdKey = _ref4.axisIdKey,\n            stackGroups = _ref4.stackGroups,\n            dataStartIndex = _ref4.dataStartIndex,\n            dataEndIndex = _ref4.dataEndIndex;\n        var layout = props.layout,\n            children = props.children;\n\n        var displayedData = this.constructor.getDisplayedData(props, {\n          graphicalItems: graphicalItems, dataStartIndex: dataStartIndex, dataEndIndex: dataEndIndex\n        });\n        var len = displayedData.length;\n        var isCategorial = (0, _ChartUtils.isCategorialAxis)(layout, axisType);\n        var index = -1;\n\n        // The default type of x-axis is category axis,\n        // The default contents of x-axis is the serial numbers of data\n        // The default type of y-axis is number axis\n        // The default contents of y-axis is the domain of data\n        var axisMap = graphicalItems.reduce(function (result, child) {\n          var axisId = child.props[axisIdKey];\n\n          if (!result[axisId]) {\n            index++;\n            var domain = void 0;\n\n            if (isCategorial) {\n              domain = (0, _range3.default)(0, len);\n            } else if (stackGroups && stackGroups[axisId] && stackGroups[axisId].hasStack) {\n              domain = (0, _ChartUtils.getDomainOfStackGroups)(stackGroups[axisId].stackGroups, dataStartIndex, dataEndIndex);\n              domain = (0, _ChartUtils.detectReferenceElementsDomain)(children, domain, axisId, axisType);\n            } else {\n              domain = (0, _ChartUtils.parseSpecifiedDomain)(Axis.defaultProps.domain, (0, _ChartUtils.getDomainOfItemsWithSameAxis)(displayedData, graphicalItems.filter(function (item) {\n                return item.props[axisIdKey] === axisId && !item.props.hide;\n              }), 'number'), Axis.defaultProps.allowDataOverflow);\n              domain = (0, _ChartUtils.detectReferenceElementsDomain)(children, domain, axisId, axisType);\n            }\n\n            return _extends({}, result, _defineProperty({}, axisId, _extends({\n              axisType: axisType\n            }, Axis.defaultProps, {\n              hide: true,\n              orientation: ORIENT_MAP[axisType] && ORIENT_MAP[axisType][index % 2],\n              domain: domain,\n              originalDomain: Axis.defaultProps.domain,\n              isCategorial: isCategorial,\n              layout: layout\n              // specify scale when no Axis\n              // scale: isCategorial ? 'band' : 'linear',\n            })));\n          }\n\n          return result;\n        }, {});\n\n        return axisMap;\n      }\n    }, {\n      key: 'getActiveCoordinate',\n      value: function getActiveCoordinate(tooltipTicks, activeIndex, rangeObj) {\n        var layout = this.props.layout;\n\n        var entry = tooltipTicks.find(function (tick) {\n          return tick && tick.index === activeIndex;\n        });\n\n        if (entry) {\n          if (layout === 'horizontal') {\n            return { x: entry.coordinate, y: rangeObj.y };\n          } else if (layout === 'vertical') {\n            return { x: rangeObj.x, y: entry.coordinate };\n          } else if (layout === 'centric') {\n            var _angle = entry.coordinate;\n            var _radius = rangeObj.radius;\n\n            return _extends({}, rangeObj, (0, _PolarUtils.polarToCartesian)(rangeObj.cx, rangeObj.cy, _radius, _angle), {\n              angle: _angle, radius: _radius\n            });\n          }\n\n          var radius = entry.coordinate;\n          var angle = rangeObj.angle;\n\n          return _extends({}, rangeObj, (0, _PolarUtils.polarToCartesian)(rangeObj.cx, rangeObj.cy, radius, angle), {\n            angle: angle, radius: radius\n          });\n        }\n\n        return originCoordinate;\n      }\n      /**\n       * Get the information of mouse in chart, return null when the mouse is not in the chart\n       * @param  {Object} event    The event object\n       * @return {Object}          Mouse data\n       */\n\n    }, {\n      key: 'getMouseInfo',\n      value: function getMouseInfo(event) {\n        if (!this.container) {\n          return null;\n        }\n\n        var containerOffset = (0, _DOMUtils.getOffset)(this.container);\n        var e = (0, _DOMUtils.calculateChartCoordinate)(event, containerOffset);\n        var rangeObj = this.inRange(e.chartX, e.chartY);\n        if (!rangeObj) {\n          return null;\n        }\n\n        var _state2 = this.state,\n            xAxisMap = _state2.xAxisMap,\n            yAxisMap = _state2.yAxisMap;\n\n\n        if (eventType !== 'axis' && xAxisMap && yAxisMap) {\n          var xScale = (0, _DataUtils.getAnyElementOfObject)(xAxisMap).scale;\n          var yScale = (0, _DataUtils.getAnyElementOfObject)(yAxisMap).scale;\n          var xValue = xScale && xScale.invert ? xScale.invert(e.chartX) : null;\n          var yValue = yScale && yScale.invert ? yScale.invert(e.chartY) : null;\n\n          return _extends({}, e, { xValue: xValue, yValue: yValue });\n        }\n\n        var _state3 = this.state,\n            ticks = _state3.orderedTooltipTicks,\n            axis = _state3.tooltipAxis,\n            tooltipTicks = _state3.tooltipTicks;\n\n        var pos = this.calculateTooltipPos(rangeObj);\n        var activeIndex = (0, _ChartUtils.calculateActiveTickIndex)(pos, ticks, tooltipTicks, axis);\n\n        if (activeIndex >= 0 && tooltipTicks) {\n          var activeLabel = tooltipTicks[activeIndex] && tooltipTicks[activeIndex].value;\n          var activePayload = this.getTooltipContent(activeIndex, activeLabel);\n          var activeCoordinate = this.getActiveCoordinate(ticks, activeIndex, rangeObj);\n\n          return _extends({}, e, {\n            activeTooltipIndex: activeIndex,\n            activeLabel: activeLabel, activePayload: activePayload, activeCoordinate: activeCoordinate\n          });\n        }\n\n        return null;\n      }\n      /**\n       * Get the content to be displayed in the tooltip\n       * @param  {Number} activeIndex    Active index of data\n       * @param  {String} activeLabel    Active label of data\n       * @return {Array}                 The content of tooltip\n       */\n\n    }, {\n      key: 'getTooltipContent',\n      value: function getTooltipContent(activeIndex, activeLabel) {\n        var _state4 = this.state,\n            graphicalItems = _state4.graphicalItems,\n            tooltipAxis = _state4.tooltipAxis;\n\n        var displayedData = this.constructor.getDisplayedData(this.props, this.state);\n\n        if (activeIndex < 0 || !graphicalItems || !graphicalItems.length || activeIndex >= displayedData.length) {\n          return null;\n        }\n\n        // get data by activeIndex when the axis don't allow duplicated category\n        return graphicalItems.reduce(function (result, child) {\n          var hide = child.props.hide;\n\n\n          if (hide) {\n            return result;\n          }\n\n          var _child$props2 = child.props,\n              dataKey = _child$props2.dataKey,\n              name = _child$props2.name,\n              unit = _child$props2.unit,\n              formatter = _child$props2.formatter,\n              data = _child$props2.data;\n\n          var payload = void 0;\n\n          if (tooltipAxis.dataKey && !tooltipAxis.allowDuplicatedCategory) {\n            // graphic child has data props\n            payload = (0, _DataUtils.findEntryInArray)(data || displayedData, tooltipAxis.dataKey, activeLabel);\n          } else {\n            payload = displayedData[activeIndex];\n          }\n\n          if (!payload) {\n            return result;\n          }\n          return [].concat(_toConsumableArray(result), [_extends({}, (0, _ReactUtils.getPresentationAttributes)(child), {\n            dataKey: dataKey, unit: unit, formatter: formatter,\n            name: name || dataKey,\n            color: (0, _ChartUtils.getMainColorOfGraphicItem)(child),\n            value: (0, _ChartUtils.getValueByDataKey)(payload, dataKey),\n            payload: payload\n          })]);\n        }, []);\n      }\n    }, {\n      key: 'getFormatItems',\n      value: function getFormatItems(props, currentState) {\n        var _this3 = this;\n\n        var graphicalItems = currentState.graphicalItems,\n            stackGroups = currentState.stackGroups,\n            offset = currentState.offset,\n            updateId = currentState.updateId,\n            dataStartIndex = currentState.dataStartIndex,\n            dataEndIndex = currentState.dataEndIndex;\n        var barSize = props.barSize,\n            layout = props.layout,\n            barGap = props.barGap,\n            barCategoryGap = props.barCategoryGap,\n            globalMaxBarSize = props.maxBarSize;\n\n        var _getAxisNameByLayout = this.getAxisNameByLayout(layout),\n            numericAxisName = _getAxisNameByLayout.numericAxisName,\n            cateAxisName = _getAxisNameByLayout.cateAxisName;\n\n        var hasBar = this.constructor.hasBar(graphicalItems);\n        var sizeList = hasBar && (0, _ChartUtils.getBarSizeList)({ barSize: barSize, stackGroups: stackGroups });\n        var formatedItems = [];\n\n        graphicalItems.forEach(function (item, index) {\n          var displayedData = _this3.constructor.getDisplayedData(props, { dataStartIndex: dataStartIndex, dataEndIndex: dataEndIndex }, item);\n          var _item$props = item.props,\n              dataKey = _item$props.dataKey,\n              childMaxBarSize = _item$props.maxBarSize;\n\n          var numericAxisId = item.props[numericAxisName + 'Id'];\n          var cateAxisId = item.props[cateAxisName + 'Id'];\n          var axisObj = axisComponents.reduce(function (result, entry) {\n            var _extends4;\n\n            var axisMap = currentState[entry.axisType + 'Map'];\n            var id = item.props[entry.axisType + 'Id'];\n            var axis = axisMap && axisMap[id];\n\n            return _extends({}, result, (_extends4 = {}, _defineProperty(_extends4, entry.axisType, axis), _defineProperty(_extends4, entry.axisType + 'Ticks', (0, _ChartUtils.getTicksOfAxis)(axis)), _extends4));\n          }, {});\n          var cateAxis = axisObj[cateAxisName];\n          var cateTicks = axisObj[cateAxisName + 'Ticks'];\n          var stackedData = stackGroups && stackGroups[numericAxisId] && stackGroups[numericAxisId].hasStack && (0, _ChartUtils.getStackedDataOfItem)(item, stackGroups[numericAxisId].stackGroups);\n          var bandSize = (0, _ChartUtils.getBandSizeOfAxis)(cateAxis, cateTicks);\n          var maxBarSize = (0, _isNil3.default)(childMaxBarSize) ? globalMaxBarSize : childMaxBarSize;\n          var barPosition = hasBar && (0, _ChartUtils.getBarPosition)({\n            barGap: barGap, barCategoryGap: barCategoryGap, bandSize: bandSize, sizeList: sizeList[cateAxisId], maxBarSize: maxBarSize\n          });\n          var componsedFn = item && item.type && item.type.getComposedData;\n\n          if (componsedFn) {\n            var _extends5;\n\n            formatedItems.push({\n              props: _extends({}, componsedFn(_extends({}, axisObj, { displayedData: displayedData, props: props, dataKey: dataKey, item: item, bandSize: bandSize,\n                barPosition: barPosition, offset: offset, stackedData: stackedData, layout: layout, dataStartIndex: dataStartIndex, dataEndIndex: dataEndIndex,\n                onItemMouseLeave: (0, _ChartUtils.combineEventHandlers)(_this3.handleItemMouseLeave, null, item.props.onMouseLeave),\n                onItemMouseEnter: (0, _ChartUtils.combineEventHandlers)(_this3.handleItemMouseEnter, null, item.props.onMouseEnter)\n              })), (_extends5 = {\n                key: item.key || 'item-' + index\n              }, _defineProperty(_extends5, numericAxisName, axisObj[numericAxisName]), _defineProperty(_extends5, cateAxisName, axisObj[cateAxisName]), _defineProperty(_extends5, 'animationId', updateId), _extends5)),\n              childIndex: (0, _ReactUtils.parseChildIndex)(item, props.children),\n              item: item\n            });\n          }\n        });\n\n        return formatedItems;\n      }\n    }, {\n      key: 'getCursorRectangle',\n      value: function getCursorRectangle() {\n        var layout = this.props.layout;\n        var _state5 = this.state,\n            activeCoordinate = _state5.activeCoordinate,\n            offset = _state5.offset,\n            tooltipAxisBandSize = _state5.tooltipAxisBandSize;\n\n        var halfSize = tooltipAxisBandSize / 2;\n\n        return {\n          stroke: 'none',\n          fill: '#ccc',\n          x: layout === 'horizontal' ? activeCoordinate.x - halfSize : offset.left + 0.5,\n          y: layout === 'horizontal' ? offset.top + 0.5 : activeCoordinate.y - halfSize,\n          width: layout === 'horizontal' ? tooltipAxisBandSize : offset.width - 1,\n          height: layout === 'horizontal' ? offset.height - 1 : tooltipAxisBandSize\n        };\n      }\n    }, {\n      key: 'getCursorPoints',\n      value: function getCursorPoints() {\n        var layout = this.props.layout;\n        var _state6 = this.state,\n            activeCoordinate = _state6.activeCoordinate,\n            offset = _state6.offset;\n\n        var x1 = void 0,\n            y1 = void 0,\n            x2 = void 0,\n            y2 = void 0;\n\n        if (layout === 'horizontal') {\n          x1 = activeCoordinate.x;\n          x2 = x1;\n          y1 = offset.top;\n          y2 = offset.top + offset.height;\n        } else if (layout === 'vertical') {\n          y1 = activeCoordinate.y;\n          y2 = y1;\n          x1 = offset.left;\n          x2 = offset.left + offset.width;\n        } else if (!(0, _isNil3.default)(activeCoordinate.cx) || !(0, _isNil3.default)(activeCoordinate.cy)) {\n          if (layout === 'centric') {\n            var cx = activeCoordinate.cx,\n                cy = activeCoordinate.cy,\n                innerRadius = activeCoordinate.innerRadius,\n                outerRadius = activeCoordinate.outerRadius,\n                angle = activeCoordinate.angle;\n\n            var innerPoint = (0, _PolarUtils.polarToCartesian)(cx, cy, innerRadius, angle);\n            var outerPoint = (0, _PolarUtils.polarToCartesian)(cx, cy, outerRadius, angle);\n            x1 = innerPoint.x;\n            y1 = innerPoint.y;\n            x2 = outerPoint.x;\n            y2 = outerPoint.y;\n          } else {\n            var _cx = activeCoordinate.cx,\n                _cy = activeCoordinate.cy,\n                radius = activeCoordinate.radius,\n                startAngle = activeCoordinate.startAngle,\n                endAngle = activeCoordinate.endAngle;\n\n            var startPoint = (0, _PolarUtils.polarToCartesian)(_cx, _cy, radius, startAngle);\n            var endPoint = (0, _PolarUtils.polarToCartesian)(_cx, _cy, radius, endAngle);\n\n            return {\n              points: [startPoint, endPoint],\n              cx: _cx, cy: _cy, radius: radius, startAngle: startAngle, endAngle: endAngle\n            };\n          }\n        }\n\n        return [{ x: x1, y: y1 }, { x: x2, y: y2 }];\n      }\n    }, {\n      key: 'getAxisNameByLayout',\n      value: function getAxisNameByLayout(layout) {\n        if (layout === 'horizontal') {\n          return { numericAxisName: 'yAxis', cateAxisName: 'xAxis' };\n        } else if (layout === 'vertical') {\n          return { numericAxisName: 'xAxis', cateAxisName: 'yAxis' };\n        } else if (layout === 'centric') {\n          return { numericAxisName: 'radiusAxis', cateAxisName: 'angleAxis' };\n        }\n\n        return { numericAxisName: 'angleAxis', cateAxisName: 'radiusAxis' };\n      }\n    }, {\n      key: 'calculateTooltipPos',\n      value: function calculateTooltipPos(rangeObj) {\n        var layout = this.props.layout;\n\n\n        if (layout === 'horizontal') {\n          return rangeObj.x;\n        }\n        if (layout === 'vertical') {\n          return rangeObj.y;\n        }\n        if (layout === 'centric') {\n          return rangeObj.angle;\n        }\n\n        return rangeObj.radius;\n      }\n    }, {\n      key: 'inRange',\n      value: function inRange(x, y) {\n        var layout = this.props.layout;\n\n\n        if (layout === 'horizontal' || layout === 'vertical') {\n          var offset = this.state.offset;\n\n          var isInRange = x >= offset.left && x <= offset.left + offset.width && y >= offset.top && y <= offset.top + offset.height;\n\n          return isInRange ? { x: x, y: y } : null;\n        }\n\n        var _state7 = this.state,\n            angleAxisMap = _state7.angleAxisMap,\n            radiusAxisMap = _state7.radiusAxisMap;\n\n\n        if (angleAxisMap && radiusAxisMap) {\n          var angleAxis = (0, _DataUtils.getAnyElementOfObject)(angleAxisMap);\n\n          return (0, _PolarUtils.inRangeOfSector)({ x: x, y: y }, angleAxis);\n        }\n\n        return null;\n      }\n    }, {\n      key: 'parseEventsOfWrapper',\n      value: function parseEventsOfWrapper() {\n        var children = this.props.children;\n\n        var tooltipItem = (0, _ReactUtils.findChildByType)(children, _Tooltip2.default);\n        var tooltipEvents = tooltipItem && eventType === 'axis' ? {\n          onMouseEnter: this.handleMouseEnter,\n          onMouseMove: this.handleMouseMove,\n          onMouseLeave: this.handleMouseLeave,\n          onTouchMove: this.handleTouchMove\n        } : {};\n        var outerEvents = (0, _ReactUtils.filterEventAttributes)(this.props, this.handleOuterEvent);\n\n        return _extends({}, outerEvents, tooltipEvents);\n      }\n      /**\n       * The AxisMaps are expensive to render on large data sets\n       * so provide the ability to store them in state and only update them when necessary\n       * they are dependent upon the start and end index of\n       * the brush so it's important that this method is called _after_\n       * the state is updated with any new start/end indices\n       *\n       * @param {Object} props          The props object to be used for updating the axismaps\n       * @param {Number} dataStartIndex The start index of the data series when a brush is applied\n       * @param {Number} dataEndIndex   The end index of the data series when a brush is applied\n       * @param {Number} updateId       The update id\n       * @return {Object} state New state to set\n       */\n\n    }, {\n      key: 'updateStateOfAxisMapsOffsetAndStackGroups',\n      value: function updateStateOfAxisMapsOffsetAndStackGroups(_ref5) {\n        var _this4 = this;\n\n        var props = _ref5.props,\n            dataStartIndex = _ref5.dataStartIndex,\n            dataEndIndex = _ref5.dataEndIndex,\n            updateId = _ref5.updateId;\n\n        if (!(0, _ReactUtils.validateWidthHeight)({ props: props })) {\n          return null;\n        }\n\n        var children = props.children,\n            layout = props.layout,\n            stackOffset = props.stackOffset,\n            data = props.data,\n            reverseStackOrder = props.reverseStackOrder;\n\n        var _getAxisNameByLayout2 = this.getAxisNameByLayout(layout),\n            numericAxisName = _getAxisNameByLayout2.numericAxisName,\n            cateAxisName = _getAxisNameByLayout2.cateAxisName;\n\n        var graphicalItems = (0, _ReactUtils.findAllByType)(children, GraphicalChild);\n        var stackGroups = (0, _ChartUtils.getStackGroupsByAxisId)(data, graphicalItems, numericAxisName + 'Id', cateAxisName + 'Id', stackOffset, reverseStackOrder);\n        var axisObj = axisComponents.reduce(function (result, entry) {\n          var name = entry.axisType + 'Map';\n\n          return _extends({}, result, _defineProperty({}, name, _this4.getAxisMap(props, _extends({}, entry, {\n            graphicalItems: graphicalItems,\n            stackGroups: entry.axisType === numericAxisName && stackGroups,\n            dataStartIndex: dataStartIndex,\n            dataEndIndex: dataEndIndex\n          }))));\n        }, {});\n\n        var offset = this.calculateOffset(_extends({}, axisObj, { props: props, graphicalItems: graphicalItems }));\n\n        Object.keys(axisObj).forEach(function (key) {\n          axisObj[key] = formatAxisMap(props, axisObj[key], offset, key.replace('Map', ''), chartName);\n        });\n        var cateAxisMap = axisObj[cateAxisName + 'Map'];\n        var ticksObj = this.tooltipTicksGenerator(cateAxisMap);\n\n        var formatedGraphicalItems = this.getFormatItems(props, _extends({}, axisObj, { dataStartIndex: dataStartIndex, dataEndIndex: dataEndIndex, updateId: updateId,\n          graphicalItems: graphicalItems, stackGroups: stackGroups, offset: offset\n        }));\n\n        return _extends({\n          formatedGraphicalItems: formatedGraphicalItems, graphicalItems: graphicalItems, offset: offset, stackGroups: stackGroups\n        }, ticksObj, axisObj);\n      }\n\n      /* eslint-disable  no-underscore-dangle */\n\n    }, {\n      key: 'addListener',\n      value: function addListener() {\n        _Events.eventCenter.on(_Events.SYNC_EVENT, this.handleReceiveSyncEvent);\n\n        if (_Events.eventCenter.setMaxListeners && _Events.eventCenter._maxListeners) {\n          _Events.eventCenter.setMaxListeners(_Events.eventCenter._maxListeners + 1);\n        }\n      }\n    }, {\n      key: 'removeListener',\n      value: function removeListener() {\n        _Events.eventCenter.removeListener(_Events.SYNC_EVENT, this.handleReceiveSyncEvent);\n\n        if (_Events.eventCenter.setMaxListeners && _Events.eventCenter._maxListeners) {\n          _Events.eventCenter.setMaxListeners(_Events.eventCenter._maxListeners - 1);\n        }\n      }\n      /**\n       * Calculate the offset of main part in the svg element\n       * @param  {Object} props          Latest props\n       * @param  {Array}  graphicalItems The instances of item\n       * @param  {Object} xAxisMap       The configuration of x-axis\n       * @param  {Object} yAxisMap       The configuration of y-axis\n       * @return {Object} The offset of main part in the svg element\n       */\n\n    }, {\n      key: 'calculateOffset',\n      value: function calculateOffset(_ref6) {\n        var props = _ref6.props,\n            graphicalItems = _ref6.graphicalItems,\n            _ref6$xAxisMap = _ref6.xAxisMap,\n            xAxisMap = _ref6$xAxisMap === undefined ? {} : _ref6$xAxisMap,\n            _ref6$yAxisMap = _ref6.yAxisMap,\n            yAxisMap = _ref6$yAxisMap === undefined ? {} : _ref6$yAxisMap;\n        var width = props.width,\n            height = props.height,\n            children = props.children;\n\n        var margin = props.margin || {};\n        var brushItem = (0, _ReactUtils.findChildByType)(children, _Brush2.default);\n        var legendItem = (0, _ReactUtils.findChildByType)(children, _Legend2.default);\n\n        var offsetH = Object.keys(yAxisMap).reduce(function (result, id) {\n          var entry = yAxisMap[id];\n          var orientation = entry.orientation;\n\n          if (!entry.mirror && !entry.hide) {\n            return _extends({}, result, _defineProperty({}, orientation, result[orientation] + entry.width));\n          }\n\n          return result;\n        }, { left: margin.left || 0, right: margin.right || 0 });\n\n        var offsetV = Object.keys(xAxisMap).reduce(function (result, id) {\n          var entry = xAxisMap[id];\n          var orientation = entry.orientation;\n\n          if (!entry.mirror && !entry.hide) {\n            return _extends({}, result, _defineProperty({}, orientation, result[orientation] + entry.height));\n          }\n\n          return result;\n        }, { top: margin.top || 0, bottom: margin.bottom || 0 });\n\n        var offset = _extends({}, offsetV, offsetH);\n\n        var brushBottom = offset.bottom;\n\n        if (brushItem) {\n          offset.bottom += brushItem.props.height || _Brush2.default.defaultProps.height;\n        }\n\n        if (legendItem && this.legendInstance) {\n          var legendBox = this.legendInstance.getBBox();\n\n          offset = (0, _ChartUtils.appendOffsetOfLegend)(offset, graphicalItems, props, legendBox);\n        }\n\n        return _extends({\n          brushBottom: brushBottom\n        }, offset, {\n          width: width - offset.left - offset.right,\n          height: height - offset.top - offset.bottom\n        });\n      }\n      /**\n       * The handler of mouse entering chart\n       * @param  {Object} e              Event object\n       * @return {Null}                  null\n       */\n\n      /**\n       * The handler of mouse entering a scatter\n       * @param {Object} el     The active scatter\n       * @return {Object} no return\n       */\n\n      /**\n       * The handler of mouse leaving a scatter\n       * @return {Object} no return\n       */\n\n      /**\n       * The handler of mouse moving in chart\n       * @param  {Object} e        Event object\n       * @return {Null} no return\n       */\n\n      /**\n       * The handler if mouse leaving chart\n       * @param {Object} e Event object\n       * @return {Null} no return\n       */\n\n    }, {\n      key: 'triggerSyncEvent',\n      value: function triggerSyncEvent(data) {\n        var syncId = this.props.syncId;\n\n\n        if (!(0, _isNil3.default)(syncId)) {\n          _Events.eventCenter.emit(_Events.SYNC_EVENT, syncId, this.uniqueChartId, data);\n        }\n      }\n    }, {\n      key: 'filterFormatItem',\n      value: function filterFormatItem(item, displayName, childIndex) {\n        var formatedGraphicalItems = this.state.formatedGraphicalItems;\n\n\n        for (var i = 0, len = formatedGraphicalItems.length; i < len; i++) {\n          var entry = formatedGraphicalItems[i];\n\n          if (entry.item === item || entry.props.key === item.key || displayName === (0, _ReactUtils.getDisplayName)(entry.item.type) && childIndex === entry.childIndex) {\n            return entry;\n          }\n        }\n\n        return null;\n      }\n    }, {\n      key: 'renderAxis',\n\n      /**\n       * Draw axis\n       * @param {Object} axisOptions The options of axis\n       * @param {Object} element      The axis element\n       * @param {String} displayName  The display name of axis\n       * @param {Number} index        The index of element\n       * @return {ReactElement}       The instance of x-axes\n       */\n      value: function renderAxis(axisOptions, element, displayName, index) {\n        var _props2 = this.props,\n            width = _props2.width,\n            height = _props2.height;\n\n\n        return _react2.default.createElement(_CartesianAxis2.default, _extends({}, axisOptions, {\n          className: 'recharts-' + axisOptions.axisType + ' ' + axisOptions.axisType,\n          key: element.key || displayName + '-' + index,\n          viewBox: { x: 0, y: 0, width: width, height: height },\n          ticksGenerator: this.axesTicksGenerator\n        }));\n      }\n      /**\n       * Draw grid\n       * @param  {ReactElement} element the grid item\n       * @return {ReactElement} The instance of grid\n       */\n\n    }, {\n      key: 'renderLegend',\n\n      /**\n       * Draw legend\n       * @return {ReactElement}            The instance of Legend\n       */\n      value: function renderLegend() {\n        var _this5 = this;\n\n        var formatedGraphicalItems = this.state.formatedGraphicalItems;\n        var _props3 = this.props,\n            children = _props3.children,\n            width = _props3.width,\n            height = _props3.height;\n\n        var margin = this.props.margin || {};\n        var legendWidth = width - (margin.left || 0) - (margin.right || 0);\n        var legendHeight = height - (margin.top || 0) - (margin.bottom || 0);\n        var props = (0, _ChartUtils.getLegendProps)({\n          children: children, formatedGraphicalItems: formatedGraphicalItems, legendWidth: legendWidth, legendHeight: legendHeight, legendContent: legendContent\n        });\n\n        if (!props) {\n          return null;\n        }\n\n        var item = props.item,\n            otherProps = _objectWithoutProperties(props, ['item']);\n\n        return (0, _react.cloneElement)(item, _extends({}, otherProps, {\n          chartWidth: width,\n          chartHeight: height,\n          margin: margin,\n          ref: function ref(legend) {\n            _this5.legendInstance = legend;\n          },\n          onBBoxUpdate: this.handleLegendBBoxUpdate\n        }));\n      }\n      /**\n       * Draw Tooltip\n       * @return {ReactElement}  The instance of Tooltip\n       */\n\n    }, {\n      key: 'renderTooltip',\n      value: function renderTooltip() {\n        var children = this.props.children;\n\n        var tooltipItem = (0, _ReactUtils.findChildByType)(children, _Tooltip2.default);\n\n        if (!tooltipItem) {\n          return null;\n        }\n\n        var _state8 = this.state,\n            isTooltipActive = _state8.isTooltipActive,\n            activeCoordinate = _state8.activeCoordinate,\n            activePayload = _state8.activePayload,\n            activeLabel = _state8.activeLabel,\n            offset = _state8.offset;\n\n\n        return (0, _react.cloneElement)(tooltipItem, {\n          viewBox: _extends({}, offset, { x: offset.left, y: offset.top }),\n          active: isTooltipActive,\n          label: activeLabel,\n          payload: isTooltipActive ? activePayload : [],\n          coordinate: activeCoordinate\n        });\n      }\n    }, {\n      key: 'renderActiveDot',\n      value: function renderActiveDot(option, props) {\n        var dot = void 0;\n\n        if ((0, _react.isValidElement)(option)) {\n          dot = (0, _react.cloneElement)(option, props);\n        } else if ((0, _isFunction3.default)(option)) {\n          dot = option(props);\n        } else {\n          dot = _react2.default.createElement(_Dot2.default, props);\n        }\n\n        return _react2.default.createElement(\n          _Layer2.default,\n          { className: 'recharts-active-dot', key: props.key },\n          dot\n        );\n      }\n    }, {\n      key: 'renderActivePoints',\n      value: function renderActivePoints(_ref7) {\n        var item = _ref7.item,\n            activePoint = _ref7.activePoint,\n            basePoint = _ref7.basePoint,\n            childIndex = _ref7.childIndex,\n            isRange = _ref7.isRange;\n\n        var result = [];\n        var key = item.props.key;\n        var _item$item$props = item.item.props,\n            activeDot = _item$item$props.activeDot,\n            dataKey = _item$item$props.dataKey;\n\n        var dotProps = _extends({\n          index: childIndex,\n          dataKey: dataKey,\n          cx: activePoint.x,\n          cy: activePoint.y,\n          r: 4,\n          fill: (0, _ChartUtils.getMainColorOfGraphicItem)(item.item),\n          strokeWidth: 2,\n          stroke: '#fff',\n          payload: activePoint.payload,\n          value: activePoint.value,\n          key: key + '-activePoint-' + childIndex\n        }, (0, _ReactUtils.getPresentationAttributes)(activeDot), (0, _ReactUtils.filterEventAttributes)(activeDot));\n\n        result.push(this.renderActiveDot(activeDot, dotProps, childIndex));\n\n        if (basePoint) {\n          result.push(this.renderActiveDot(activeDot, _extends({}, dotProps, {\n            cx: basePoint.x,\n            cy: basePoint.y,\n            key: key + '-basePoint-' + childIndex\n          }), childIndex));\n        } else if (isRange) {\n          result.push(null);\n        }\n\n        return result;\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _this6 = this;\n\n        if (!(0, _ReactUtils.validateWidthHeight)(this)) {\n          return null;\n        }\n\n        var _props4 = this.props,\n            children = _props4.children,\n            className = _props4.className,\n            width = _props4.width,\n            height = _props4.height,\n            style = _props4.style,\n            compact = _props4.compact,\n            others = _objectWithoutProperties(_props4, ['children', 'className', 'width', 'height', 'style', 'compact']);\n\n        var attrs = (0, _ReactUtils.getPresentationAttributes)(others);\n        var map = {\n          CartesianGrid: { handler: this.renderGrid, once: true },\n          ReferenceArea: { handler: this.renderReferenceElement },\n          ReferenceLine: { handler: this.renderReferenceElement },\n          ReferenceDot: { handler: this.renderReferenceElement },\n          XAxis: { handler: this.renderXAxis },\n          YAxis: { handler: this.renderYAxis },\n          Brush: { handler: this.renderBrush, once: true },\n          Bar: { handler: this.renderGraphicChild },\n          Line: { handler: this.renderGraphicChild },\n          Area: { handler: this.renderGraphicChild },\n          Radar: { handler: this.renderGraphicChild },\n          RadialBar: { handler: this.renderGraphicChild },\n          Scatter: { handler: this.renderGraphicChild },\n          Pie: { handler: this.renderGraphicChild },\n          Tooltip: { handler: this.renderCursor, once: true },\n          PolarGrid: { handler: this.renderPolarGrid, once: true },\n          PolarAngleAxis: { handler: this.renderPolarAxis },\n          PolarRadiusAxis: { handler: this.renderPolarAxis }\n        };\n\n        // The \"compact\" mode is mainly used as the panorama within Brush\n        if (compact) {\n          return _react2.default.createElement(\n            _Surface2.default,\n            _extends({}, attrs, { width: width, height: height }),\n            (0, _ReactUtils.renderByOrder)(children, map)\n          );\n        }\n\n        var events = this.parseEventsOfWrapper();\n        return _react2.default.createElement(\n          'div',\n          _extends({\n            className: (0, _classnames2.default)('recharts-wrapper', className),\n            style: _extends({}, style, { position: 'relative', cursor: 'default', width: width, height: height })\n          }, events, {\n            ref: function ref(node) {\n              _this6.container = node;\n            }\n          }),\n          _react2.default.createElement(\n            _Surface2.default,\n            _extends({}, attrs, { width: width, height: height }),\n            (0, _ReactUtils.renderByOrder)(children, map)\n          ),\n          this.renderLegend(),\n          this.renderTooltip()\n        );\n      }\n    }]);\n\n    return CategoricalChartWrapper;\n  }(_react.Component), _class.displayName = chartName, _class.propTypes = _extends({\n    syncId: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n    compact: _propTypes2.default.bool,\n    width: _propTypes2.default.number,\n    height: _propTypes2.default.number,\n    data: _propTypes2.default.arrayOf(_propTypes2.default.object),\n    layout: _propTypes2.default.oneOf(['horizontal', 'vertical']),\n    stackOffset: _propTypes2.default.oneOf(['sign', 'expand', 'none', 'wiggle', 'silhouette']),\n    throttleDelay: _propTypes2.default.number,\n    margin: _propTypes2.default.shape({\n      top: _propTypes2.default.number,\n      right: _propTypes2.default.number,\n      bottom: _propTypes2.default.number,\n      left: _propTypes2.default.number\n    }),\n    barCategoryGap: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),\n    barGap: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),\n    barSize: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),\n    maxBarSize: _propTypes2.default.number,\n    style: _propTypes2.default.object,\n    className: _propTypes2.default.string,\n    children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node]),\n    onClick: _propTypes2.default.func,\n    onMouseLeave: _propTypes2.default.func,\n    onMouseEnter: _propTypes2.default.func,\n    onMouseMove: _propTypes2.default.func,\n    onMouseDown: _propTypes2.default.func,\n    onMouseUp: _propTypes2.default.func,\n    reverseStackOrder: _propTypes2.default.bool,\n    id: _propTypes2.default.string\n  }, propTypes), _class.defaultProps = _extends({\n    layout: 'horizontal',\n    stackOffset: 'none',\n    barCategoryGap: '10%',\n    barGap: 4,\n    margin: { top: 5, right: 5, bottom: 5, left: 5 },\n    reverseStackOrder: false\n  }, defaultProps), _class.createDefaultState = function (props) {\n    var children = props.children;\n\n    var brushItem = (0, _ReactUtils.findChildByType)(children, _Brush2.default);\n    var startIndex = brushItem && brushItem.props && brushItem.props.startIndex || 0;\n    var endIndex = brushItem && brushItem.props && brushItem.props.endIndex || props.data && props.data.length - 1 || 0;\n    return {\n      chartX: 0,\n      chartY: 0,\n      dataStartIndex: startIndex,\n      dataEndIndex: endIndex,\n      activeTooltipIndex: -1,\n      isTooltipActive: false\n    };\n  }, _class.hasBar = function (graphicalItems) {\n    if (!graphicalItems || !graphicalItems.length) {\n      return false;\n    }\n\n    return graphicalItems.some(function (item) {\n      var name = (0, _ReactUtils.getDisplayName)(item && item.type);\n\n      return name && name.indexOf('Bar') >= 0;\n    });\n  }, _class.getDisplayedData = function (props, _ref8, item) {\n    var graphicalItems = _ref8.graphicalItems,\n        dataStartIndex = _ref8.dataStartIndex,\n        dataEndIndex = _ref8.dataEndIndex;\n\n    var itemsData = (graphicalItems || []).reduce(function (result, child) {\n      var itemData = child.props.data;\n\n      if (itemData && itemData.length) {\n        return [].concat(_toConsumableArray(result), _toConsumableArray(itemData));\n      }\n\n      return result;\n    }, []);\n    if (itemsData && itemsData.length > 0) {\n      return itemsData;\n    }\n\n    if (item && item.props && item.props.data && item.props.data.length > 0) {\n      return item.props.data;\n    }\n\n    var data = props.data;\n\n\n    if (data && data.length && (0, _DataUtils.isNumber)(dataStartIndex) && (0, _DataUtils.isNumber)(dataEndIndex)) {\n      return data.slice(dataStartIndex, dataEndIndex + 1);\n    }\n\n    return [];\n  }, _initialiseProps = function _initialiseProps() {\n    var _this7 = this;\n\n    this.handleLegendBBoxUpdate = function (box) {\n      if (box && _this7.legendInstance) {\n        var _state9 = _this7.state,\n            dataStartIndex = _state9.dataStartIndex,\n            dataEndIndex = _state9.dataEndIndex,\n            updateId = _state9.updateId;\n\n\n        _this7.setState(_this7.updateStateOfAxisMapsOffsetAndStackGroups({\n          props: _this7.props, dataStartIndex: dataStartIndex, dataEndIndex: dataEndIndex, updateId: updateId\n        }));\n      }\n    };\n\n    this.handleReceiveSyncEvent = function (cId, chartId, data) {\n      var _props5 = _this7.props,\n          syncId = _props5.syncId,\n          layout = _props5.layout;\n      var updateId = _this7.state.updateId;\n\n\n      if (syncId === cId && chartId !== _this7.uniqueChartId) {\n        var dataStartIndex = data.dataStartIndex,\n            dataEndIndex = data.dataEndIndex;\n\n\n        if (!(0, _isNil3.default)(data.dataStartIndex) || !(0, _isNil3.default)(data.dataEndIndex)) {\n          _this7.setState(_extends({\n            dataStartIndex: dataStartIndex,\n            dataEndIndex: dataEndIndex\n          }, _this7.updateStateOfAxisMapsOffsetAndStackGroups({ props: _this7.props, dataStartIndex: dataStartIndex, dataEndIndex: dataEndIndex, updateId: updateId })));\n        } else if (!(0, _isNil3.default)(data.activeTooltipIndex)) {\n          var chartX = data.chartX,\n              chartY = data.chartY,\n              activeTooltipIndex = data.activeTooltipIndex;\n          var _state10 = _this7.state,\n              offset = _state10.offset,\n              tooltipTicks = _state10.tooltipTicks;\n\n          if (!offset) {\n            return;\n          }\n          var viewBox = _extends({}, offset, { x: offset.left, y: offset.top });\n          // When a categotical chart is combined with another chart, the value of chartX\n          // and chartY may beyond the boundaries.\n          var validateChartX = Math.min(chartX, viewBox.x + viewBox.width);\n          var validateChartY = Math.min(chartY, viewBox.y + viewBox.height);\n          var activeLabel = tooltipTicks[activeTooltipIndex] && tooltipTicks[activeTooltipIndex].value;\n          var activePayload = _this7.getTooltipContent(activeTooltipIndex);\n          var activeCoordinate = tooltipTicks[activeTooltipIndex] ? {\n            x: layout === 'horizontal' ? tooltipTicks[activeTooltipIndex].coordinate : validateChartX,\n            y: layout === 'horizontal' ? validateChartY : tooltipTicks[activeTooltipIndex].coordinate\n          } : originCoordinate;\n\n          _this7.setState(_extends({}, data, { activeLabel: activeLabel, activeCoordinate: activeCoordinate, activePayload: activePayload }));\n        } else {\n          _this7.setState(data);\n        }\n      }\n    };\n\n    this.handleBrushChange = function (_ref9) {\n      var startIndex = _ref9.startIndex,\n          endIndex = _ref9.endIndex;\n\n      // Only trigger changes if the extents of the brush have actually changed\n      if (startIndex !== _this7.state.dataStartIndex || endIndex !== _this7.state.dataEndIndex) {\n        var updateId = _this7.state.updateId;\n\n\n        _this7.setState(function () {\n          return _extends({\n            dataStartIndex: startIndex,\n            dataEndIndex: endIndex\n          }, _this7.updateStateOfAxisMapsOffsetAndStackGroups({ props: _this7.props, dataStartIndex: startIndex, dataEndIndex: endIndex, updateId: updateId }));\n        });\n\n        _this7.triggerSyncEvent({\n          dataStartIndex: startIndex,\n          dataEndIndex: endIndex\n        });\n      }\n    };\n\n    this.handleMouseEnter = function (e) {\n      var onMouseEnter = _this7.props.onMouseEnter;\n\n      var mouse = _this7.getMouseInfo(e);\n\n      if (mouse) {\n        var nextState = _extends({}, mouse, { isTooltipActive: true });\n        _this7.setState(nextState);\n        _this7.triggerSyncEvent(nextState);\n\n        if ((0, _isFunction3.default)(onMouseEnter)) {\n          onMouseEnter(nextState, e);\n        }\n      }\n    };\n\n    this.triggeredAfterMouseMove = function (e) {\n      var onMouseMove = _this7.props.onMouseMove;\n\n      var mouse = _this7.getMouseInfo(e);\n      var nextState = mouse ? _extends({}, mouse, { isTooltipActive: true }) : { isTooltipActive: false };\n\n      _this7.setState(nextState);\n      _this7.triggerSyncEvent(nextState);\n\n      if ((0, _isFunction3.default)(onMouseMove)) {\n        onMouseMove(nextState, e);\n      }\n    };\n\n    this.handleItemMouseEnter = function (el) {\n      _this7.setState(function () {\n        return {\n          isTooltipActive: true,\n          activeItem: el,\n          activePayload: el.tooltipPayload,\n          activeCoordinate: el.tooltipPosition || { x: el.cx, y: el.cy }\n        };\n      });\n    };\n\n    this.handleItemMouseLeave = function () {\n      _this7.setState(function () {\n        return {\n          isTooltipActive: false\n        };\n      });\n    };\n\n    this.handleMouseMove = function (e) {\n      if (e && (0, _isFunction3.default)(e.persist)) {\n        e.persist();\n      }\n      _this7.triggeredAfterMouseMove(e);\n    };\n\n    this.handleMouseLeave = function (e) {\n      var onMouseLeave = _this7.props.onMouseLeave;\n\n      var nextState = { isTooltipActive: false };\n\n      _this7.setState(nextState);\n      _this7.triggerSyncEvent(nextState);\n\n      if ((0, _isFunction3.default)(onMouseLeave)) {\n        onMouseLeave(nextState, e);\n      }\n    };\n\n    this.handleOuterEvent = function (e) {\n      var eventName = (0, _ReactUtils.getReactEventByType)(e);\n\n      if (eventName && (0, _isFunction3.default)(_this7.props[eventName])) {\n        var mouse = _this7.getMouseInfo(e);\n        var handler = _this7.props[eventName];\n\n        handler(mouse, e);\n      }\n    };\n\n    this.handleClick = function (e) {\n      var onClick = _this7.props.onClick;\n\n\n      if ((0, _isFunction3.default)(onClick)) {\n        var mouse = _this7.getMouseInfo(e);\n\n        onClick(mouse, e);\n      }\n    };\n\n    this.handleMouseDown = function (e) {\n      var onMouseDown = _this7.props.onMouseDown;\n\n\n      if ((0, _isFunction3.default)(onMouseDown)) {\n        var mouse = _this7.getMouseInfo(e);\n\n        onMouseDown(mouse, e);\n      }\n    };\n\n    this.handleMouseUp = function (e) {\n      var onMouseUp = _this7.props.onMouseUp;\n\n\n      if ((0, _isFunction3.default)(onMouseUp)) {\n        var mouse = _this7.getMouseInfo(e);\n\n        onMouseUp(mouse, e);\n      }\n    };\n\n    this.handleTouchMove = function (e) {\n      if (e.changedTouches != null && e.changedTouches.length > 0) {\n        _this7.handleMouseMove(e.changedTouches[0]);\n      }\n    };\n\n    this.verticalCoordinatesGenerator = function (_ref10) {\n      var xAxis = _ref10.xAxis,\n          width = _ref10.width,\n          height = _ref10.height,\n          offset = _ref10.offset;\n      return (0, _ChartUtils.getCoordinatesOfGrid)(_CartesianAxis2.default.getTicks(_extends({}, _CartesianAxis2.default.defaultProps, xAxis, {\n        ticks: (0, _ChartUtils.getTicksOfAxis)(xAxis, true),\n        viewBox: { x: 0, y: 0, width: width, height: height }\n      })), offset.left, offset.left + offset.width);\n    };\n\n    this.horizontalCoordinatesGenerator = function (_ref11) {\n      var yAxis = _ref11.yAxis,\n          width = _ref11.width,\n          height = _ref11.height,\n          offset = _ref11.offset;\n      return (0, _ChartUtils.getCoordinatesOfGrid)(_CartesianAxis2.default.getTicks(_extends({}, _CartesianAxis2.default.defaultProps, yAxis, {\n        ticks: (0, _ChartUtils.getTicksOfAxis)(yAxis, true),\n        viewBox: { x: 0, y: 0, width: width, height: height }\n      })), offset.top, offset.top + offset.height);\n    };\n\n    this.axesTicksGenerator = function (axis) {\n      return (0, _ChartUtils.getTicksOfAxis)(axis, true);\n    };\n\n    this.tooltipTicksGenerator = function (axisMap) {\n      var axis = (0, _DataUtils.getAnyElementOfObject)(axisMap);\n      var tooltipTicks = (0, _ChartUtils.getTicksOfAxis)(axis, false, true);\n\n      return {\n        tooltipTicks: tooltipTicks,\n        orderedTooltipTicks: (0, _sortBy3.default)(tooltipTicks, function (o) {\n          return o.coordinate;\n        }),\n        tooltipAxis: axis,\n        tooltipAxisBandSize: (0, _ChartUtils.getBandSizeOfAxis)(axis)\n      };\n    };\n\n    this.renderCursor = function (element) {\n      var _state11 = _this7.state,\n          isTooltipActive = _state11.isTooltipActive,\n          activeCoordinate = _state11.activeCoordinate,\n          activePayload = _state11.activePayload,\n          offset = _state11.offset;\n\n\n      if (!element || !element.props.cursor || !isTooltipActive || !activeCoordinate) {\n        return null;\n      }\n      var layout = _this7.props.layout;\n\n      var restProps = void 0;\n      var cursorComp = _Curve2.default;\n\n      if (chartName === 'ScatterChart') {\n        restProps = activeCoordinate;\n        cursorComp = _Cross2.default;\n      } else if (chartName === 'BarChart') {\n        restProps = _this7.getCursorRectangle();\n        cursorComp = _Rectangle2.default;\n      } else if (layout === 'radial') {\n        var _getCursorPoints = _this7.getCursorPoints(),\n            cx = _getCursorPoints.cx,\n            cy = _getCursorPoints.cy,\n            radius = _getCursorPoints.radius,\n            startAngle = _getCursorPoints.startAngle,\n            endAngle = _getCursorPoints.endAngle;\n\n        restProps = {\n          cx: cx, cy: cy, startAngle: startAngle, endAngle: endAngle, innerRadius: radius, outerRadius: radius\n        };\n        cursorComp = _Sector2.default;\n      } else {\n        restProps = { points: _this7.getCursorPoints() };\n        cursorComp = _Curve2.default;\n      }\n      var key = element.key || '_recharts-cursor';\n      var cursorProps = _extends({\n        stroke: '#ccc'\n      }, offset, restProps, (0, _ReactUtils.getPresentationAttributes)(element.props.cursor), {\n        payload: activePayload,\n        key: key,\n        className: 'recharts-tooltip-cursor'\n      });\n\n      return (0, _react.isValidElement)(element.props.cursor) ? (0, _react.cloneElement)(element.props.cursor, cursorProps) : (0, _react.createElement)(cursorComp, cursorProps);\n    };\n\n    this.renderPolarAxis = function (element, displayName, index) {\n      var axisType = element.type.axisType;\n      var axisMap = _this7.state[axisType + 'Map'];\n      var axisOption = axisMap[element.props[axisType + 'Id']];\n\n      return (0, _react.cloneElement)(element, _extends({}, axisOption, {\n        className: axisType,\n        key: element.key || displayName + '-' + index,\n        ticks: (0, _ChartUtils.getTicksOfAxis)(axisOption, true)\n      }));\n    };\n\n    this.renderXAxis = function (element, displayName, index) {\n      var xAxisMap = _this7.state.xAxisMap;\n\n      var axisObj = xAxisMap[element.props.xAxisId];\n\n      return _this7.renderAxis(axisObj, element, displayName, index);\n    };\n\n    this.renderYAxis = function (element, displayName, index) {\n      var yAxisMap = _this7.state.yAxisMap;\n\n      var axisObj = yAxisMap[element.props.yAxisId];\n\n      return _this7.renderAxis(axisObj, element, displayName, index);\n    };\n\n    this.renderGrid = function (element) {\n      var _state12 = _this7.state,\n          xAxisMap = _state12.xAxisMap,\n          yAxisMap = _state12.yAxisMap,\n          offset = _state12.offset;\n      var _props6 = _this7.props,\n          width = _props6.width,\n          height = _props6.height;\n\n      var xAxis = (0, _DataUtils.getAnyElementOfObject)(xAxisMap);\n      var yAxis = (0, _DataUtils.getAnyElementOfObject)(yAxisMap);\n      var props = element.props || {};\n\n      return (0, _react.cloneElement)(element, {\n        key: element.key || 'grid',\n        x: (0, _DataUtils.isNumber)(props.x) ? props.x : offset.left,\n        y: (0, _DataUtils.isNumber)(props.y) ? props.y : offset.top,\n        width: (0, _DataUtils.isNumber)(props.width) ? props.width : offset.width,\n        height: (0, _DataUtils.isNumber)(props.height) ? props.height : offset.height,\n        xAxis: xAxis,\n        yAxis: yAxis,\n        offset: offset,\n        chartWidth: width,\n        chartHeight: height,\n        verticalCoordinatesGenerator: _this7.verticalCoordinatesGenerator,\n        horizontalCoordinatesGenerator: _this7.horizontalCoordinatesGenerator\n      });\n    };\n\n    this.renderPolarGrid = function (element) {\n      var _state13 = _this7.state,\n          radiusAxisMap = _state13.radiusAxisMap,\n          angleAxisMap = _state13.angleAxisMap;\n\n      var radiusAxis = (0, _DataUtils.getAnyElementOfObject)(radiusAxisMap);\n      var angleAxis = (0, _DataUtils.getAnyElementOfObject)(angleAxisMap);\n      var cx = angleAxis.cx,\n          cy = angleAxis.cy,\n          innerRadius = angleAxis.innerRadius,\n          outerRadius = angleAxis.outerRadius;\n\n\n      return (0, _react.cloneElement)(element, {\n        polarAngles: (0, _ChartUtils.getTicksOfAxis)(angleAxis, true).map(function (entry) {\n          return entry.coordinate;\n        }),\n        polarRadius: (0, _ChartUtils.getTicksOfAxis)(radiusAxis, true).map(function (entry) {\n          return entry.coordinate;\n        }),\n        cx: cx, cy: cy, innerRadius: innerRadius, outerRadius: outerRadius,\n        key: element.key || 'polar-grid'\n      });\n    };\n\n    this.renderBrush = function (element) {\n      var _props7 = _this7.props,\n          margin = _props7.margin,\n          data = _props7.data;\n      var _state14 = _this7.state,\n          offset = _state14.offset,\n          dataStartIndex = _state14.dataStartIndex,\n          dataEndIndex = _state14.dataEndIndex,\n          updateId = _state14.updateId;\n\n      // TODO: update brush when children update\n\n      return (0, _react.cloneElement)(element, {\n        key: element.key || '_recharts-brush',\n        onChange: (0, _ChartUtils.combineEventHandlers)(_this7.handleBrushChange, null, element.props.onChange),\n        data: data,\n        x: (0, _DataUtils.isNumber)(element.props.x) ? element.props.x : offset.left,\n        y: (0, _DataUtils.isNumber)(element.props.y) ? element.props.y : offset.top + offset.height + offset.brushBottom - (margin.bottom || 0),\n        width: (0, _DataUtils.isNumber)(element.props.width) ? element.props.width : offset.width,\n        startIndex: dataStartIndex,\n        endIndex: dataEndIndex,\n        updateId: 'brush-' + updateId\n      });\n    };\n\n    this.renderReferenceElement = function (element, displayName, index) {\n      if (!element) {\n        return null;\n      }\n      var _state15 = _this7.state,\n          xAxisMap = _state15.xAxisMap,\n          yAxisMap = _state15.yAxisMap,\n          offset = _state15.offset;\n      var _element$props = element.props,\n          xAxisId = _element$props.xAxisId,\n          yAxisId = _element$props.yAxisId;\n\n\n      return (0, _react.cloneElement)(element, {\n        key: element.key || displayName + '-' + index,\n        xAxis: xAxisMap[xAxisId],\n        yAxis: yAxisMap[yAxisId],\n        viewBox: {\n          x: offset.left,\n          y: offset.top,\n          width: offset.width,\n          height: offset.height\n        }\n      });\n    };\n\n    this.renderGraphicChild = function (element, displayName, index) {\n      var item = _this7.filterFormatItem(element, displayName, index);\n      if (!item) {\n        return null;\n      }\n\n      var graphicalItem = (0, _react.cloneElement)(element, item.props);\n      var _state16 = _this7.state,\n          isTooltipActive = _state16.isTooltipActive,\n          tooltipAxis = _state16.tooltipAxis,\n          activeTooltipIndex = _state16.activeTooltipIndex,\n          activeLabel = _state16.activeLabel;\n      var children = _this7.props.children;\n\n      var tooltipItem = (0, _ReactUtils.findChildByType)(children, _Tooltip2.default);\n      var _item$props2 = item.props,\n          points = _item$props2.points,\n          isRange = _item$props2.isRange,\n          baseLine = _item$props2.baseLine;\n      var _item$item$props2 = item.item.props,\n          activeDot = _item$item$props2.activeDot,\n          hide = _item$item$props2.hide;\n\n      var hasActive = !hide && isTooltipActive && tooltipItem && activeDot && activeTooltipIndex >= 0;\n\n      if (hasActive) {\n        var activePoint = void 0,\n            basePoint = void 0;\n\n        if (tooltipAxis.dataKey && !tooltipAxis.allowDuplicatedCategory) {\n          activePoint = (0, _DataUtils.findEntryInArray)(points, 'payload.' + tooltipAxis.dataKey, activeLabel);\n          basePoint = isRange && baseLine && (0, _DataUtils.findEntryInArray)(baseLine, 'payload.' + tooltipAxis.dataKey, activeLabel);\n        } else {\n          activePoint = points[activeTooltipIndex];\n          basePoint = isRange && baseLine && baseLine[activeTooltipIndex];\n        }\n\n        if (!(0, _isNil3.default)(activePoint)) {\n          return [graphicalItem].concat(_toConsumableArray(_this7.renderActivePoints({\n            item: item, activePoint: activePoint, basePoint: basePoint, childIndex: activeTooltipIndex,\n            isRange: isRange\n          })));\n        }\n      }\n\n      if (isRange) {\n        return [graphicalItem, null, null];\n      }\n\n      return [graphicalItem, null];\n    };\n  }, _temp);\n\n\n  return CategoricalChartWrapper;\n};\n\nexports.default = generateCategoricalChart;"},"hash":"ae6e62bc8c073070723feb93e5bdddf4"}