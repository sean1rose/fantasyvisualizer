{"dependencies":[{"name":"../../hierarchy","loc":{"line":16,"column":25}}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\nexports.computeZoom = exports.computeNodes = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * This file is part of the nivo project.\n                                                                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                                                                   * Copyright 2016-present, RaphaÃ«l Benitte.\n                                                                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                                                                   * For the full copyright and license information, please view the LICENSE\n                                                                                                                                                                                                                                                                   * file that was distributed with this source code.\n                                                                                                                                                                                                                                                                   */\n\n\nvar _hierarchy = require('../../hierarchy');\n\nvar computeNodes = exports.computeNodes = function computeNodes(_ref) {\n    var root = _ref.root,\n        pack = _ref.pack,\n        leavesOnly = _ref.leavesOnly,\n        getIdentity = _ref.getIdentity,\n        getColor = _ref.getColor;\n\n    // assign a unique id depending on node path to each node\n    root.each(function (node) {\n        node.id = getIdentity(node.data);\n        node.path = (0, _hierarchy.computeNodePath)(node, getIdentity);\n    });\n\n    pack(root);\n\n    var nodes = leavesOnly ? root.leaves() : root.descendants();\n    nodes = nodes.map(function (node) {\n        node.color = getColor(_extends({}, node.data, { depth: node.depth }));\n        node.label = false;\n\n        return node;\n    });\n\n    return nodes;\n};\n\nvar computeZoom = exports.computeZoom = function computeZoom(nodes, currentNodePath, width, height) {\n    var currentNode = nodes.find(function (_ref2) {\n        var path = _ref2.path;\n        return path === currentNodePath;\n    });\n\n    if (!currentNode) return nodes;\n\n    var ratio = Math.min(width, height) / (currentNode.r * 2);\n    var offsetX = width / 2 - currentNode.x * ratio;\n    var offsetY = height / 2 - currentNode.y * ratio;\n\n    return nodes.map(function (node) {\n        return _extends({}, node, {\n            r: node.r * ratio,\n            x: node.x * ratio + offsetX,\n            y: node.y * ratio + offsetY\n        });\n    });\n};"},"hash":"89690b99b63928d8c69e71d4b41e62c2"}