{"dependencies":[{"name":"babel-runtime/helpers/extends","loc":{"line":5,"column":24}},{"name":"react","loc":{"line":9,"column":21}},{"name":"react-dom","loc":{"line":13,"column":24}},{"name":"prop-types","loc":{"line":17,"column":25}},{"name":"create-react-class","loc":{"line":21,"column":32}},{"name":"rc-trigger","loc":{"line":25,"column":25}},{"name":"rc-util/lib/KeyCode","loc":{"line":29,"column":23}},{"name":"classnames","loc":{"line":33,"column":26}},{"name":"./SubPopupMenu","loc":{"line":37,"column":28}},{"name":"./placements","loc":{"line":41,"column":26}},{"name":"./util","loc":{"line":45,"column":20}}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _createReactClass = require('create-react-class');\n\nvar _createReactClass2 = _interopRequireDefault(_createReactClass);\n\nvar _rcTrigger = require('rc-trigger');\n\nvar _rcTrigger2 = _interopRequireDefault(_rcTrigger);\n\nvar _KeyCode = require('rc-util/lib/KeyCode');\n\nvar _KeyCode2 = _interopRequireDefault(_KeyCode);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _SubPopupMenu = require('./SubPopupMenu');\n\nvar _SubPopupMenu2 = _interopRequireDefault(_SubPopupMenu);\n\nvar _placements = require('./placements');\n\nvar _placements2 = _interopRequireDefault(_placements);\n\nvar _util = require('./util');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar guid = 0;\n\nvar popupPlacementMap = {\n  horizontal: 'bottomLeft',\n  vertical: 'rightTop',\n  'vertical-left': 'rightTop',\n  'vertical-right': 'leftTop'\n};\n\nvar SubMenu = (0, _createReactClass2['default'])({\n  displayName: 'SubMenu',\n\n  propTypes: {\n    parentMenu: _propTypes2['default'].object,\n    title: _propTypes2['default'].node,\n    children: _propTypes2['default'].any,\n    selectedKeys: _propTypes2['default'].array,\n    openKeys: _propTypes2['default'].array,\n    onClick: _propTypes2['default'].func,\n    onOpenChange: _propTypes2['default'].func,\n    rootPrefixCls: _propTypes2['default'].string,\n    eventKey: _propTypes2['default'].string,\n    multiple: _propTypes2['default'].bool,\n    active: _propTypes2['default'].bool, // TODO: remove\n    onItemHover: _propTypes2['default'].func,\n    onSelect: _propTypes2['default'].func,\n    triggerSubMenuAction: _propTypes2['default'].string,\n    onDeselect: _propTypes2['default'].func,\n    onDestroy: _propTypes2['default'].func,\n    onMouseEnter: _propTypes2['default'].func,\n    onMouseLeave: _propTypes2['default'].func,\n    onTitleMouseEnter: _propTypes2['default'].func,\n    onTitleMouseLeave: _propTypes2['default'].func,\n    onTitleClick: _propTypes2['default'].func\n  },\n\n  isRootMenu: false,\n\n  getDefaultProps: function getDefaultProps() {\n    return {\n      onMouseEnter: _util.noop,\n      onMouseLeave: _util.noop,\n      onTitleMouseEnter: _util.noop,\n      onTitleMouseLeave: _util.noop,\n      onTitleClick: _util.noop,\n      title: ''\n    };\n  },\n  getInitialState: function getInitialState() {\n    this.isSubMenu = 1;\n    return {\n      defaultActiveFirst: false\n    };\n  },\n  componentDidMount: function componentDidMount() {\n    this.componentDidUpdate();\n  },\n  componentDidUpdate: function componentDidUpdate() {\n    var _this = this;\n\n    var _props = this.props,\n        mode = _props.mode,\n        parentMenu = _props.parentMenu;\n\n    if (mode !== 'horizontal' || !parentMenu.isRootMenu || !this.isOpen()) {\n      return;\n    }\n    this.minWidthTimeout = setTimeout(function () {\n      if (!_this.subMenuTitle || !_this.menuInstance) {\n        return;\n      }\n      var popupMenu = _reactDom2['default'].findDOMNode(_this.menuInstance);\n      if (popupMenu.offsetWidth >= _this.subMenuTitle.offsetWidth) {\n        return;\n      }\n      popupMenu.style.minWidth = _this.subMenuTitle.offsetWidth + 'px';\n    }, 0);\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    var _props2 = this.props,\n        onDestroy = _props2.onDestroy,\n        eventKey = _props2.eventKey;\n\n    if (onDestroy) {\n      onDestroy(eventKey);\n    }\n    if (this.minWidthTimeout) {\n      clearTimeout(this.minWidthTimeout);\n    }\n    if (this.mouseenterTimeout) {\n      clearTimeout(this.mouseenterTimeout);\n    }\n  },\n  onDestroy: function onDestroy(key) {\n    this.props.onDestroy(key);\n  },\n  onKeyDown: function onKeyDown(e) {\n    var keyCode = e.keyCode;\n    var menu = this.menuInstance;\n    var isOpen = this.isOpen();\n\n    if (keyCode === _KeyCode2['default'].ENTER) {\n      this.onTitleClick(e);\n      this.setState({\n        defaultActiveFirst: true\n      });\n      return true;\n    }\n\n    if (keyCode === _KeyCode2['default'].RIGHT) {\n      if (isOpen) {\n        menu.onKeyDown(e);\n      } else {\n        this.triggerOpenChange(true);\n        this.setState({\n          defaultActiveFirst: true\n        });\n      }\n      return true;\n    }\n    if (keyCode === _KeyCode2['default'].LEFT) {\n      var handled = void 0;\n      if (isOpen) {\n        handled = menu.onKeyDown(e);\n      } else {\n        return undefined;\n      }\n      if (!handled) {\n        this.triggerOpenChange(false);\n        handled = true;\n      }\n      return handled;\n    }\n\n    if (isOpen && (keyCode === _KeyCode2['default'].UP || keyCode === _KeyCode2['default'].DOWN)) {\n      return menu.onKeyDown(e);\n    }\n  },\n  onOpenChange: function onOpenChange(e) {\n    this.props.onOpenChange(e);\n  },\n  onPopupVisibleChange: function onPopupVisibleChange(visible) {\n    this.triggerOpenChange(visible, visible ? 'mouseenter' : 'mouseleave');\n  },\n  onMouseEnter: function onMouseEnter(e) {\n    var _props3 = this.props,\n        key = _props3.eventKey,\n        onMouseEnter = _props3.onMouseEnter;\n\n    this.setState({\n      defaultActiveFirst: false\n    });\n    onMouseEnter({\n      key: key,\n      domEvent: e\n    });\n  },\n  onMouseLeave: function onMouseLeave(e) {\n    var _props4 = this.props,\n        parentMenu = _props4.parentMenu,\n        eventKey = _props4.eventKey,\n        onMouseLeave = _props4.onMouseLeave;\n\n    parentMenu.subMenuInstance = this;\n    onMouseLeave({\n      key: eventKey,\n      domEvent: e\n    });\n  },\n  onTitleMouseEnter: function onTitleMouseEnter(domEvent) {\n    var _props5 = this.props,\n        key = _props5.eventKey,\n        onItemHover = _props5.onItemHover,\n        onTitleMouseEnter = _props5.onTitleMouseEnter;\n\n    onItemHover({\n      key: key,\n      hover: true\n    });\n    onTitleMouseEnter({\n      key: key,\n      domEvent: domEvent\n    });\n  },\n  onTitleMouseLeave: function onTitleMouseLeave(e) {\n    var _props6 = this.props,\n        parentMenu = _props6.parentMenu,\n        eventKey = _props6.eventKey,\n        onItemHover = _props6.onItemHover,\n        onTitleMouseLeave = _props6.onTitleMouseLeave;\n\n    parentMenu.subMenuInstance = this;\n    onItemHover({\n      key: eventKey,\n      hover: false\n    });\n    onTitleMouseLeave({\n      key: eventKey,\n      domEvent: e\n    });\n  },\n  onTitleClick: function onTitleClick(e) {\n    var props = this.props;\n\n    props.onTitleClick({\n      key: props.eventKey,\n      domEvent: e\n    });\n    if (props.triggerSubMenuAction === 'hover') {\n      return;\n    }\n    this.triggerOpenChange(!this.isOpen(), 'click');\n    this.setState({\n      defaultActiveFirst: false\n    });\n  },\n  onSubMenuClick: function onSubMenuClick(info) {\n    this.props.onClick(this.addKeyPath(info));\n  },\n  onSelect: function onSelect(info) {\n    this.props.onSelect(info);\n  },\n  onDeselect: function onDeselect(info) {\n    this.props.onDeselect(info);\n  },\n  getPrefixCls: function getPrefixCls() {\n    return this.props.rootPrefixCls + '-submenu';\n  },\n  getActiveClassName: function getActiveClassName() {\n    return this.getPrefixCls() + '-active';\n  },\n  getDisabledClassName: function getDisabledClassName() {\n    return this.getPrefixCls() + '-disabled';\n  },\n  getSelectedClassName: function getSelectedClassName() {\n    return this.getPrefixCls() + '-selected';\n  },\n  getOpenClassName: function getOpenClassName() {\n    return this.props.rootPrefixCls + '-submenu-open';\n  },\n  saveMenuInstance: function saveMenuInstance(c) {\n    this.menuInstance = c;\n  },\n  addKeyPath: function addKeyPath(info) {\n    return (0, _extends3['default'])({}, info, {\n      keyPath: (info.keyPath || []).concat(this.props.eventKey)\n    });\n  },\n  triggerOpenChange: function triggerOpenChange(open, type) {\n    var _this2 = this;\n\n    var key = this.props.eventKey;\n    var openChange = function openChange() {\n      _this2.onOpenChange({\n        key: key,\n        item: _this2,\n        trigger: type,\n        open: open\n      });\n    };\n    if (type === 'mouseenter') {\n      // make sure mouseenter happen after other menu item's mouseleave\n      this.mouseenterTimeout = setTimeout(function () {\n        openChange();\n      }, 0);\n    } else {\n      openChange();\n    }\n  },\n  isChildrenSelected: function isChildrenSelected() {\n    var ret = { find: false };\n    (0, _util.loopMenuItemRecusively)(this.props.children, this.props.selectedKeys, ret);\n    return ret.find;\n  },\n  isOpen: function isOpen() {\n    return this.props.openKeys.indexOf(this.props.eventKey) !== -1;\n  },\n  renderChildren: function renderChildren(children) {\n    var props = this.props;\n    var baseProps = {\n      mode: props.mode === 'horizontal' ? 'vertical' : props.mode,\n      visible: this.isOpen(),\n      level: props.level + 1,\n      inlineIndent: props.inlineIndent,\n      focusable: false,\n      onClick: this.onSubMenuClick,\n      onSelect: this.onSelect,\n      onDeselect: this.onDeselect,\n      onDestroy: this.onDestroy,\n      selectedKeys: props.selectedKeys,\n      eventKey: props.eventKey + '-menu-',\n      openKeys: props.openKeys,\n      openTransitionName: props.openTransitionName,\n      openAnimation: props.openAnimation,\n      onOpenChange: this.onOpenChange,\n      subMenuOpenDelay: props.subMenuOpenDelay,\n      subMenuCloseDelay: props.subMenuCloseDelay,\n      forceSubMenuRender: props.forceSubMenuRender,\n      triggerSubMenuAction: props.triggerSubMenuAction,\n      defaultActiveFirst: this.state.defaultActiveFirst,\n      multiple: props.multiple,\n      prefixCls: props.rootPrefixCls,\n      id: this._menuId,\n      ref: this.saveMenuInstance\n    };\n    return _react2['default'].createElement(\n      _SubPopupMenu2['default'],\n      baseProps,\n      children\n    );\n  },\n  saveSubMenuTitle: function saveSubMenuTitle(subMenuTitle) {\n    this.subMenuTitle = subMenuTitle;\n  },\n  render: function render() {\n    var _classNames;\n\n    var props = this.props;\n    var isOpen = this.isOpen();\n    var prefixCls = this.getPrefixCls();\n    var isInlineMode = props.mode === 'inline';\n    var className = (0, _classnames2['default'])(prefixCls, prefixCls + '-' + props.mode, (_classNames = {}, _classNames[props.className] = !!props.className, _classNames[this.getOpenClassName()] = isOpen, _classNames[this.getActiveClassName()] = props.active || isOpen && !isInlineMode, _classNames[this.getDisabledClassName()] = props.disabled, _classNames[this.getSelectedClassName()] = this.isChildrenSelected(), _classNames));\n\n    if (!this._menuId) {\n      if (props.eventKey) {\n        this._menuId = props.eventKey + '$Menu';\n      } else {\n        this._menuId = '$__$' + ++guid + '$Menu';\n      }\n    }\n\n    var mouseEvents = {};\n    var titleClickEvents = {};\n    var titleMouseEvents = {};\n    if (!props.disabled) {\n      mouseEvents = {\n        onMouseLeave: this.onMouseLeave,\n        onMouseEnter: this.onMouseEnter\n      };\n\n      // only works in title, not outer li\n      titleClickEvents = {\n        onClick: this.onTitleClick\n      };\n      titleMouseEvents = {\n        onMouseEnter: this.onTitleMouseEnter,\n        onMouseLeave: this.onTitleMouseLeave\n      };\n    }\n\n    var style = {};\n    if (isInlineMode) {\n      style.paddingLeft = props.inlineIndent * props.level;\n    }\n    var title = _react2['default'].createElement(\n      'div',\n      (0, _extends3['default'])({\n        ref: this.saveSubMenuTitle,\n        style: style,\n        className: prefixCls + '-title'\n      }, titleMouseEvents, titleClickEvents, {\n        'aria-expanded': isOpen,\n        'aria-owns': this._menuId,\n        'aria-haspopup': 'true',\n        title: typeof props.title === 'string' ? props.title : undefined\n      }),\n      props.title,\n      _react2['default'].createElement('i', { className: prefixCls + '-arrow' })\n    );\n    var children = this.renderChildren(props.children);\n\n    var getPopupContainer = props.parentMenu.isRootMenu ? props.parentMenu.props.getPopupContainer : function (triggerNode) {\n      return triggerNode.parentNode;\n    };\n    var popupPlacement = popupPlacementMap[props.mode];\n    var popupClassName = props.mode === 'inline' ? '' : props.popupClassName;\n    return _react2['default'].createElement(\n      'li',\n      (0, _extends3['default'])({}, mouseEvents, { className: className, style: props.style }),\n      isInlineMode && title,\n      isInlineMode && children,\n      !isInlineMode && _react2['default'].createElement(\n        _rcTrigger2['default'],\n        {\n          prefixCls: prefixCls,\n          popupClassName: prefixCls + '-popup ' + popupClassName,\n          getPopupContainer: getPopupContainer,\n          builtinPlacements: _placements2['default'],\n          popupPlacement: popupPlacement,\n          popupVisible: isOpen,\n          popup: children,\n          action: props.disabled ? [] : [props.triggerSubMenuAction],\n          mouseEnterDelay: props.subMenuOpenDelay,\n          mouseLeaveDelay: props.subMenuCloseDelay,\n          onPopupVisibleChange: this.onPopupVisibleChange,\n          forceRender: props.forceSubMenuRender\n        },\n        title\n      )\n    );\n  }\n});\n\nSubMenu.isSubMenu = 1;\n\nexports['default'] = SubMenu;\nmodule.exports = exports['default'];"},"hash":"30e15c8d4e6c8292d117155e48154257"}