{"dependencies":[{"name":"lodash/isFunction","loc":{"line":7,"column":27}},{"name":"react","loc":{"line":20,"column":21}},{"name":"prop-types","loc":{"line":24,"column":25}},{"name":"../util/PureRender","loc":{"line":28,"column":26}},{"name":"../container/Layer","loc":{"line":32,"column":21}},{"name":"../util/ReactUtils","loc":{"line":36,"column":26}},{"name":"../shape/Dot","loc":{"line":38,"column":19}},{"name":"../shape/Polygon","loc":{"line":42,"column":23}},{"name":"../component/Text","loc":{"line":46,"column":20}},{"name":"../util/PolarUtils","loc":{"line":50,"column":26}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _isFunction2 = require('lodash/isFunction');\n\nvar _isFunction3 = _interopRequireDefault(_isFunction2);\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _class2, _temp; /**\n                             * @fileOverview Axis of radial direction\n                             */\n\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _PureRender = require('../util/PureRender');\n\nvar _PureRender2 = _interopRequireDefault(_PureRender);\n\nvar _Layer = require('../container/Layer');\n\nvar _Layer2 = _interopRequireDefault(_Layer);\n\nvar _ReactUtils = require('../util/ReactUtils');\n\nvar _Dot = require('../shape/Dot');\n\nvar _Dot2 = _interopRequireDefault(_Dot);\n\nvar _Polygon = require('../shape/Polygon');\n\nvar _Polygon2 = _interopRequireDefault(_Polygon);\n\nvar _Text = require('../component/Text');\n\nvar _Text2 = _interopRequireDefault(_Text);\n\nvar _PolarUtils = require('../util/PolarUtils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar RADIAN = Math.PI / 180;\nvar eps = 1e-5;\n\nvar PolarAngleAxis = (0, _PureRender2.default)(_class = (_temp = _class2 = function (_Component) {\n  _inherits(PolarAngleAxis, _Component);\n\n  function PolarAngleAxis() {\n    _classCallCheck(this, PolarAngleAxis);\n\n    return _possibleConstructorReturn(this, (PolarAngleAxis.__proto__ || Object.getPrototypeOf(PolarAngleAxis)).apply(this, arguments));\n  }\n\n  _createClass(PolarAngleAxis, [{\n    key: 'getTickLineCoord',\n\n\n    /**\n     * Calculate the coordinate of line endpoint\n     * @param  {Object} data The Data if ticks\n     * @return {Object} (x0, y0): The start point of text,\n     *                  (x1, y1): The end point close to text,\n     *                  (x2, y2): The end point close to axis\n     */\n    value: function getTickLineCoord(data) {\n      var _props = this.props,\n          cx = _props.cx,\n          cy = _props.cy,\n          radius = _props.radius,\n          orientation = _props.orientation,\n          tickLine = _props.tickLine;\n\n      var tickLineSize = tickLine && tickLine.size || 8;\n      var p1 = (0, _PolarUtils.polarToCartesian)(cx, cy, radius, data.coordinate);\n      var p2 = (0, _PolarUtils.polarToCartesian)(cx, cy, radius + (orientation === 'inner' ? -1 : 1) * tickLineSize, data.coordinate);\n\n      return { x1: p1.x, y1: p1.y, x2: p2.x, y2: p2.y };\n    }\n    /**\n     * Get the text-anchor of each tick\n     * @param  {Object} data Data of ticks\n     * @return {String} text-anchor\n     */\n\n  }, {\n    key: 'getTickTextAnchor',\n    value: function getTickTextAnchor(data) {\n      var orientation = this.props.orientation;\n\n      var cos = Math.cos(-data.coordinate * RADIAN);\n      var textAnchor = void 0;\n\n      if (cos > eps) {\n        textAnchor = orientation === 'outer' ? 'start' : 'end';\n      } else if (cos < -eps) {\n        textAnchor = orientation === 'outer' ? 'end' : 'start';\n      } else {\n        textAnchor = 'middle';\n      }\n\n      return textAnchor;\n    }\n  }, {\n    key: 'renderAxisLine',\n    value: function renderAxisLine() {\n      var _props2 = this.props,\n          cx = _props2.cx,\n          cy = _props2.cy,\n          radius = _props2.radius,\n          axisLine = _props2.axisLine,\n          axisLineType = _props2.axisLineType;\n\n      var props = _extends({}, (0, _ReactUtils.getPresentationAttributes)(this.props), {\n        fill: 'none'\n      }, (0, _ReactUtils.getPresentationAttributes)(axisLine));\n\n      if (axisLineType === 'circle') {\n        return _react2.default.createElement(_Dot2.default, _extends({\n          className: 'recharts-polar-angle-axis-line'\n        }, props, {\n          cx: cx,\n          cy: cy,\n          r: radius\n        }));\n      }\n      var ticks = this.props.ticks;\n\n      var points = ticks.map(function (entry) {\n        return (0, _PolarUtils.polarToCartesian)(cx, cy, radius, entry.coordinate);\n      });\n\n      return _react2.default.createElement(_Polygon2.default, _extends({ className: 'recharts-polar-angle-axis-line' }, props, { points: points }));\n    }\n  }, {\n    key: 'renderTickItem',\n    value: function renderTickItem(option, props, value) {\n      var tickItem = void 0;\n\n      if (_react2.default.isValidElement(option)) {\n        tickItem = _react2.default.cloneElement(option, props);\n      } else if ((0, _isFunction3.default)(option)) {\n        tickItem = option(props);\n      } else {\n        tickItem = _react2.default.createElement(\n          _Text2.default,\n          _extends({}, props, {\n            className: 'recharts-polar-angle-axis-tick-value'\n          }),\n          value\n        );\n      }\n\n      return tickItem;\n    }\n  }, {\n    key: 'renderTicks',\n    value: function renderTicks() {\n      var _this2 = this;\n\n      var _props3 = this.props,\n          ticks = _props3.ticks,\n          tick = _props3.tick,\n          tickLine = _props3.tickLine,\n          tickFormatter = _props3.tickFormatter,\n          stroke = _props3.stroke;\n\n      var axisProps = (0, _ReactUtils.getPresentationAttributes)(this.props);\n      var customTickProps = (0, _ReactUtils.getPresentationAttributes)(tick);\n      var tickLineProps = _extends({}, axisProps, { fill: 'none' }, (0, _ReactUtils.getPresentationAttributes)(tickLine));\n\n      var items = ticks.map(function (entry, i) {\n        var lineCoord = _this2.getTickLineCoord(entry);\n        var textAnchor = _this2.getTickTextAnchor(entry);\n        var tickProps = _extends({\n          textAnchor: textAnchor\n        }, axisProps, {\n          stroke: 'none', fill: stroke\n        }, customTickProps, {\n          index: i, payload: entry,\n          x: lineCoord.x2, y: lineCoord.y2\n        });\n\n        return _react2.default.createElement(\n          _Layer2.default,\n          _extends({\n            className: 'recharts-polar-angle-axis-tick',\n            key: 'tick-' + i\n          }, (0, _ReactUtils.filterEventsOfChild)(_this2.props, entry, i)),\n          tickLine && _react2.default.createElement('line', _extends({\n            className: 'recharts-polar-angle-axis-tick-line'\n          }, tickLineProps, lineCoord)),\n          tick && _this2.renderTickItem(tick, tickProps, tickFormatter ? tickFormatter(entry.value) : entry.value)\n        );\n      });\n\n      return _react2.default.createElement(\n        _Layer2.default,\n        { className: 'recharts-polar-angle-axis-ticks' },\n        items\n      );\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props4 = this.props,\n          ticks = _props4.ticks,\n          radius = _props4.radius,\n          axisLine = _props4.axisLine;\n\n\n      if (radius <= 0 || !ticks || !ticks.length) {\n        return null;\n      }\n\n      return _react2.default.createElement(\n        _Layer2.default,\n        { className: 'recharts-polar-angle-axis' },\n        axisLine && this.renderAxisLine(),\n        this.renderTicks()\n      );\n    }\n  }]);\n\n  return PolarAngleAxis;\n}(_react.Component), _class2.displayName = 'PolarAngleAxis', _class2.axisType = 'angleAxis', _class2.propTypes = _extends({}, _ReactUtils.PRESENTATION_ATTRIBUTES, _ReactUtils.EVENT_ATTRIBUTES, {\n  type: _propTypes2.default.oneOf(['number', 'category']),\n  angleAxisId: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  dataKey: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.func]),\n  cx: _propTypes2.default.number,\n  cy: _propTypes2.default.number,\n  radius: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),\n  hide: _propTypes2.default.bool,\n  scale: _propTypes2.default.oneOfType([_propTypes2.default.oneOf(_ReactUtils.SCALE_TYPES), _propTypes2.default.func]),\n\n  axisLine: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.object]),\n  axisLineType: _propTypes2.default.oneOf(['polygon', 'circle']),\n  tickLine: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.object]),\n  tick: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.func, _propTypes2.default.object, _propTypes2.default.element]),\n\n  ticks: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n    value: _propTypes2.default.any,\n    coordinate: _propTypes2.default.number\n  })),\n  stroke: _propTypes2.default.string,\n  orientation: _propTypes2.default.oneOf(['inner', 'outer']),\n  tickFormatter: _propTypes2.default.func,\n  allowDuplicatedCategory: _propTypes2.default.bool\n}), _class2.defaultProps = {\n  type: 'category',\n  angleAxisId: 0,\n  scale: 'auto',\n  cx: 0,\n  cy: 0,\n  domain: [0, 'auto'],\n  orientation: 'outer',\n  axisLine: true,\n  tickLine: true,\n  tick: true,\n  hide: false,\n  allowDuplicatedCategory: true\n}, _temp)) || _class;\n\nexports.default = PolarAngleAxis;"},"hash":"b0ca5b4edf2bb74e5e284dd42a51446b"}