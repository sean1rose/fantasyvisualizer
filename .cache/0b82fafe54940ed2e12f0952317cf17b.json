{"dependencies":[{"name":"react","loc":{"line":15,"column":21}},{"name":"prop-types","loc":{"line":19,"column":25}},{"name":"recompose/pure","loc":{"line":23,"column":20}},{"name":"react-motion","loc":{"line":27,"column":27}},{"name":"../../../lib/colors","loc":{"line":29,"column":22}},{"name":"../../../props","loc":{"line":31,"column":21}}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*\n                                                                                                                                                                                                                                                                   * This file is part of the nivo project.\n                                                                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                                                                   * Copyright 2016-present, RaphaÃ«l Benitte.\n                                                                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                                                                   * For the full copyright and license information, please view the LICENSE\n                                                                                                                                                                                                                                                                   * file that was distributed with this source code.\n                                                                                                                                                                                                                                                                   */\n\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _pure = require('recompose/pure');\n\nvar _pure2 = _interopRequireDefault(_pure);\n\nvar _reactMotion = require('react-motion');\n\nvar _colors = require('../../../lib/colors');\n\nvar _props = require('../../../props');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar SankeyLabels = function SankeyLabels(_ref) {\n    var nodes = _ref.nodes,\n        width = _ref.width,\n        labelPosition = _ref.labelPosition,\n        labelPadding = _ref.labelPadding,\n        labelOrientation = _ref.labelOrientation,\n        getLabelTextColor = _ref.getLabelTextColor,\n        theme = _ref.theme,\n        animate = _ref.animate,\n        motionDamping = _ref.motionDamping,\n        motionStiffness = _ref.motionStiffness;\n\n    var labelRotation = labelOrientation === 'vertical' ? -90 : 0;\n    var labels = nodes.map(function (node) {\n        var x = void 0;\n        var textAnchor = void 0;\n        if (node.x < width / 2) {\n            if (labelPosition === 'inside') {\n                x = node.x1 + labelPadding;\n                textAnchor = labelOrientation === 'vertical' ? 'middle' : 'start';\n            } else {\n                x = node.x - labelPadding;\n                textAnchor = labelOrientation === 'vertical' ? 'middle' : 'end';\n            }\n        } else {\n            if (labelPosition === 'inside') {\n                x = node.x - labelPadding;\n                textAnchor = labelOrientation === 'vertical' ? 'middle' : 'end';\n            } else {\n                x = node.x1 + labelPadding;\n                textAnchor = labelOrientation === 'vertical' ? 'middle' : 'start';\n            }\n        }\n\n        return {\n            id: node.id,\n            label: node.label,\n            x: x,\n            y: node.y + node.height / 2,\n            textAnchor: textAnchor,\n            color: getLabelTextColor(node)\n        };\n    });\n\n    if (!animate) {\n        return _react2.default.createElement(\n            'g',\n            null,\n            labels.map(function (label) {\n                return _react2.default.createElement(\n                    'text',\n                    {\n                        key: label.id,\n                        alignmentBaseline: 'central',\n                        textAnchor: label.textAnchor,\n                        transform: 'translate(' + label.x + ', ' + label.y + ') rotate(' + labelRotation + ')',\n                        style: _extends({}, theme.sankey.label, { fill: label.color })\n                    },\n                    label.label\n                );\n            })\n        );\n    }\n\n    var springProps = {\n        damping: motionDamping,\n        stiffness: motionStiffness\n    };\n\n    return _react2.default.createElement(\n        _reactMotion.TransitionMotion,\n        {\n            styles: labels.map(function (label) {\n                return {\n                    key: label.id,\n                    data: label,\n                    style: _extends({\n                        x: (0, _reactMotion.spring)(label.x, springProps),\n                        y: (0, _reactMotion.spring)(label.y, springProps),\n                        rotation: (0, _reactMotion.spring)(labelRotation, springProps)\n                    }, (0, _colors.colorMotionSpring)(label.color, springProps))\n                };\n            })\n        },\n        function (interpolatedStyles) {\n            return _react2.default.createElement(\n                'g',\n                null,\n                interpolatedStyles.map(function (_ref2) {\n                    var key = _ref2.key,\n                        style = _ref2.style,\n                        data = _ref2.data;\n\n                    var color = (0, _colors.getInterpolatedColor)(style);\n\n                    return _react2.default.createElement(\n                        'text',\n                        {\n                            key: key,\n                            transform: 'translate(' + style.x + ', ' + style.y + ') rotate(' + style.rotation + ')',\n                            alignmentBaseline: 'central',\n                            textAnchor: data.textAnchor,\n                            style: _extends({}, theme.sankey.label, {\n                                fill: color,\n                                pointerEvents: 'none'\n                            })\n                        },\n                        data.label\n                    );\n                })\n            );\n        }\n    );\n};\n\nSankeyLabels.propTypes = _extends({\n    nodes: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n        id: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]).isRequired,\n        label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]).isRequired,\n        x1: _propTypes2.default.number.isRequired,\n        x: _propTypes2.default.number.isRequired,\n        y: _propTypes2.default.number.isRequired,\n        width: _propTypes2.default.number.isRequired,\n        height: _propTypes2.default.number.isRequired\n    })).isRequired,\n\n    width: _propTypes2.default.number.isRequired,\n\n    labelPosition: _propTypes2.default.oneOf(['inside', 'outside']).isRequired,\n    labelPadding: _propTypes2.default.number.isRequired,\n    labelOrientation: _propTypes2.default.oneOf(['horizontal', 'vertical']).isRequired,\n    getLabelTextColor: _propTypes2.default.func.isRequired,\n\n    theme: _propTypes2.default.shape({\n        sankey: _propTypes2.default.shape({\n            label: _propTypes2.default.object.isRequired\n        }).isRequired\n    }).isRequired\n\n}, _props.motionPropTypes);\n\nexports.default = (0, _pure2.default)(SankeyLabels);"},"hash":"89e64de20a87ecd3c9f11dbc5b69b776"}