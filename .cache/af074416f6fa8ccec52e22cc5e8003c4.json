{"dependencies":[],"generated":{"js":"\"use strict\";\n\nexports.__esModule = true;\n/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, RaphaÃ«l Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nvar isHoverTargetByType = {\n    cell: function cell(node, current) {\n        return node.xKey === current.xKey && node.yKey === current.yKey;\n    },\n    row: function row(node, current) {\n        return node.yKey === current.yKey;\n    },\n    column: function column(node, current) {\n        return node.xKey === current.xKey;\n    },\n    rowColumn: function rowColumn(node, current) {\n        return node.xKey === current.xKey || node.yKey === current.yKey;\n    }\n};\n\nvar computeNodes = exports.computeNodes = function computeNodes(_ref) {\n    var data = _ref.data,\n        keys = _ref.keys,\n        getIndex = _ref.getIndex,\n        xScale = _ref.xScale,\n        yScale = _ref.yScale,\n        sizeScale = _ref.sizeScale,\n        cellOpacity = _ref.cellOpacity,\n        cellWidth = _ref.cellWidth,\n        cellHeight = _ref.cellHeight,\n        colorScale = _ref.colorScale,\n        getLabelTextColor = _ref.getLabelTextColor,\n        currentNode = _ref.currentNode,\n        hoverTarget = _ref.hoverTarget,\n        cellHoverOpacity = _ref.cellHoverOpacity,\n        cellHoverOthersOpacity = _ref.cellHoverOthersOpacity;\n\n    var isHoverTarget = isHoverTargetByType[hoverTarget];\n\n    return data.reduce(function (acc, d) {\n        keys.forEach(function (key) {\n            var width = sizeScale ? Math.min(sizeScale(d[key]) * cellWidth, cellWidth) : cellWidth;\n            var height = sizeScale ? Math.min(sizeScale(d[key]) * cellHeight, cellHeight) : cellHeight;\n\n            var node = {\n                key: key + \".\" + getIndex(d),\n                xKey: key,\n                yKey: getIndex(d),\n                x: xScale(key),\n                y: yScale(getIndex(d)),\n                width: width,\n                height: height,\n                value: d[key],\n                color: colorScale(d[key])\n            };\n\n            var opacity = cellOpacity;\n            if (currentNode) {\n                opacity = isHoverTarget(node, currentNode) ? cellHoverOpacity : cellHoverOthersOpacity;\n            }\n\n            acc.push(Object.assign(node, {\n                labelTextColor: getLabelTextColor(node),\n                opacity: opacity\n            }));\n        });\n\n        return acc;\n    }, []);\n};"},"hash":"b0c3874bd77560423d873ffcb2d0b059"}