{"dependencies":[{"name":"lodash/isArray","loc":{"line":7,"column":24}},{"name":"lodash/isFunction","loc":{"line":11,"column":27}},{"name":"react","loc":{"line":24,"column":21}},{"name":"prop-types","loc":{"line":28,"column":25}},{"name":"d3-shape","loc":{"line":32,"column":23}},{"name":"classnames","loc":{"line":34,"column":26}},{"name":"../util/PureRender","loc":{"line":38,"column":26}},{"name":"../util/ReactUtils","loc":{"line":42,"column":26}},{"name":"../util/DataUtils","loc":{"line":44,"column":25}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _isArray2 = require('lodash/isArray');\n\nvar _isArray3 = _interopRequireDefault(_isArray2);\n\nvar _isFunction2 = require('lodash/isFunction');\n\nvar _isFunction3 = _interopRequireDefault(_isFunction2);\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _class2, _temp; /**\n                             * @fileOverview Curve\n                             */\n\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _d3Shape = require('d3-shape');\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _PureRender = require('../util/PureRender');\n\nvar _PureRender2 = _interopRequireDefault(_PureRender);\n\nvar _ReactUtils = require('../util/ReactUtils');\n\nvar _DataUtils = require('../util/DataUtils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar CURVE_FACTORIES = {\n  curveBasisClosed: _d3Shape.curveBasisClosed, curveBasisOpen: _d3Shape.curveBasisOpen, curveBasis: _d3Shape.curveBasis, curveLinearClosed: _d3Shape.curveLinearClosed, curveLinear: _d3Shape.curveLinear,\n  curveMonotoneX: _d3Shape.curveMonotoneX, curveMonotoneY: _d3Shape.curveMonotoneY, curveNatural: _d3Shape.curveNatural, curveStep: _d3Shape.curveStep, curveStepAfter: _d3Shape.curveStepAfter,\n  curveStepBefore: _d3Shape.curveStepBefore\n};\n\nvar defined = function defined(p) {\n  return p.x === +p.x && p.y === +p.y;\n};\nvar getX = function getX(p) {\n  return p.x;\n};\nvar getY = function getY(p) {\n  return p.y;\n};\n\nvar getCurveFactory = function getCurveFactory(type, layout) {\n  if ((0, _isFunction3.default)(type)) {\n    return type;\n  }\n\n  var name = 'curve' + type.slice(0, 1).toUpperCase() + type.slice(1);\n\n  if (name === 'curveMonotone' && layout) {\n    return CURVE_FACTORIES['' + name + (layout === 'vertical' ? 'Y' : 'X')];\n  }\n  return CURVE_FACTORIES[name] || _d3Shape.curveLinear;\n};\n\nvar Curve = (0, _PureRender2.default)(_class = (_temp = _class2 = function (_Component) {\n  _inherits(Curve, _Component);\n\n  function Curve() {\n    _classCallCheck(this, Curve);\n\n    return _possibleConstructorReturn(this, (Curve.__proto__ || Object.getPrototypeOf(Curve)).apply(this, arguments));\n  }\n\n  _createClass(Curve, [{\n    key: 'getPath',\n\n    /**\n     * Calculate the path of curve\n     * @return {String} path\n     */\n    value: function getPath() {\n      var _props = this.props,\n          type = _props.type,\n          points = _props.points,\n          baseLine = _props.baseLine,\n          layout = _props.layout,\n          connectNulls = _props.connectNulls;\n\n      var curveFactory = getCurveFactory(type, layout);\n      var formatPoints = connectNulls ? points.filter(function (entry) {\n        return defined(entry);\n      }) : points;\n      var lineFunction = void 0;\n\n      if ((0, _isArray3.default)(baseLine)) {\n        var areaPoints = formatPoints.map(function (entry, index) {\n          return _extends({}, entry, { base: baseLine[index] });\n        });\n        if (layout === 'vertical') {\n          lineFunction = (0, _d3Shape.area)().y(getY).x1(getX).x0(function (d) {\n            return d.base.x;\n          });\n        } else {\n          lineFunction = (0, _d3Shape.area)().x(getX).y1(getY).y0(function (d) {\n            return d.base.y;\n          });\n        }\n        lineFunction.defined(defined).curve(curveFactory);\n\n        return lineFunction(areaPoints);\n      } else if (layout === 'vertical' && (0, _DataUtils.isNumber)(baseLine)) {\n        lineFunction = (0, _d3Shape.area)().y(getY).x1(getX).x0(baseLine);\n      } else if ((0, _DataUtils.isNumber)(baseLine)) {\n        lineFunction = (0, _d3Shape.area)().x(getX).y1(getY).y0(baseLine);\n      } else {\n        lineFunction = (0, _d3Shape.line)().x(getX).y(getY);\n      }\n\n      lineFunction.defined(defined).curve(curveFactory);\n\n      return lineFunction(formatPoints);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n          className = _props2.className,\n          points = _props2.points,\n          path = _props2.path,\n          pathRef = _props2.pathRef;\n\n\n      if ((!points || !points.length) && !path) {\n        return null;\n      }\n\n      var realPath = points && points.length ? this.getPath() : path;\n\n      return _react2.default.createElement('path', _extends({}, (0, _ReactUtils.getPresentationAttributes)(this.props), (0, _ReactUtils.filterEventAttributes)(this.props, null, true), {\n        className: (0, _classnames2.default)('recharts-curve', className),\n        d: realPath,\n        ref: pathRef\n      }));\n    }\n  }]);\n\n  return Curve;\n}(_react.Component), _class2.displayName = 'Curve', _class2.propTypes = _extends({}, _ReactUtils.PRESENTATION_ATTRIBUTES, {\n  className: _propTypes2.default.string,\n  type: _propTypes2.default.oneOfType([_propTypes2.default.oneOf(['basis', 'basisClosed', 'basisOpen', 'linear', 'linearClosed', 'natural', 'monotoneX', 'monotoneY', 'monotone', 'step', 'stepBefore', 'stepAfter']), _propTypes2.default.func]),\n  layout: _propTypes2.default.oneOf(['horizontal', 'vertical']),\n  baseLine: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.array]),\n  points: _propTypes2.default.arrayOf(_propTypes2.default.object),\n  connectNulls: _propTypes2.default.bool,\n  path: _propTypes2.default.string,\n  pathRef: _propTypes2.default.func\n}), _class2.defaultProps = {\n  type: 'linear',\n  points: [],\n  connectNulls: false\n}, _temp)) || _class;\n\nexports.default = Curve;"},"hash":"fd6ca41f0a76f68bb432b311ffa10bcf"}